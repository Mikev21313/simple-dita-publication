name: DITA to SPA Transformation with Auto-Generated Navigation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install DITA-OT and required tools
      - name: Set up DITA-OT and XML tools
        run: |
          # Install XML tools
          sudo apt-get update
          sudo apt-get install -y libxml2-utils xsltproc

          # Install DITA-OT
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # Step 4: Parse DITAMAP to generate navigation structure
      - name: Parse DITAMAP Structure
        run: |
          echo "Parsing DITAMAP structure from dita-source/automotive.ditamap"

          # Create an XSLT file to transform DITAMAP to JSON navigation structure
          cat > extract-nav.xsl << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            <xsl:output method="text"/>

            <xsl:template match="/">
              [
                <xsl:apply-templates select="//topicref[not(ancestor::topicref)]"/>
              ]
            </xsl:template>

            <xsl:template match="topicref">
              <xsl:variable name="href" select="@href"/>
              <xsl:variable name="filename">
                <xsl:choose>
                  <xsl:when test="contains($href, '/')">
                    <xsl:value-of select="substring-after(substring-before($href, '.'), '/')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="substring-before($href, '.')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              <xsl:variable name="id">
                <xsl:choose>
                  <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                  <xsl:otherwise><xsl:value-of select="translate($filename, '_', '-')"/></xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              <xsl:variable name="title">
                <xsl:choose>
                  <xsl:when test="@navtitle"><xsl:value-of select="@navtitle"/></xsl:when>
                  <xsl:when test="topicmeta/navtitle"><xsl:value-of select="topicmeta/navtitle"/></xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="translate(translate($id, '-', ' '), '_', ' ')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              {
                "id": "<xsl:value-of select="$id"/>",
                "title": "<xsl:value-of select="$title"/>",
                "filename": "<xsl:value-of select="$filename"/>",
                "href": "<xsl:value-of select="$href"/>"
                <xsl:if test="topicref">
                  ,
                  "children": [
                    <xsl:apply-templates select="topicref"/>
                  ]
                </xsl:if>
              }<xsl:if test="following-sibling::topicref">,</xsl:if>
            </xsl:template>
          </xsl:stylesheet>
          EOF

          # Apply XSLT to extract navigation from DITAMAP
          xsltproc extract-nav.xsl dita-source/automotive.ditamap > ./navigation-structure.json

          # Fix any JSON syntax issues
          sed -i 's/\\n//g; s/\\t//g; s/\\"//g; s/\\//g; s/  / /g' ./navigation-structure.json

          # Create a shell script to handle filename to id mapping
          cat > ./generate-id-map.sh << 'EOF'
          #!bin/bash

          # Function to convert underscore filenames to hyphenated ids
          function filename_to_id() {
            local filename=$1
            echo "${filename//_/-}"
          }

          # Function to generate a title from an ID
          function id_to_title() {
            local id=$1
            # Replace hyphens with spaces and capitalize each word
            echo "$id" | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g'
          }

          # Ensure directory exists
          mkdir -p ./site/js

          # Generate ID to title mapping as JavaScript
          echo "// Auto-generated content ID mapping" > ./site/js/content-id-map.js
          echo "const contentIdMap = {" >> ./site/js/content-id-map.js

          # Process each HTML file in the site directory
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            filename=$(basename "$file" .html)
            id=$(filename_to_id "$filename")
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)

            # If no title found, generate one from the ID
            if [ -z "$title" ]; then
              title=$(id_to_title "$id")
            fi

            # Handle special characters for shell safety
            title=$(echo "$title" | sed 's/"/\\"/g')

            # Add to content map file directly
            echo "  \"$id\": { \"title\": \"$title\", \"filename\": \"$filename\" }," >> ./site/js/content-id-map.js
          done

          # Close the mapping object
          echo "  \"default\": { \"title\": \"Automotive Documentation\" }" >> ./site/js/content-id-map.js
          echo "};" >> ./site/js/content-id-map.js
          EOF

          chmod +x ./generate-id-map.sh

          echo "DITAMAP parsing complete"
          cat ./navigation-structure.json

      # Step 5: Transform DITA to HTML and prepare images
      - name: Transform DITA to HTML and Prepare Images
        run: |
          # Using HTML5 format with parameters for better output
          ./dita-ot-4.0.2/bin/dita --input=dita-source/automotive.ditamap --format=html5 --output=./site
          echo "DITA transformation complete"

          # Create content directory for SPA fragments
          mkdir -p ./site/content
          mkdir -p ./site/images

          # List all DITA source content for debugging
          echo "Full content of dita-source directory:"
          find ./dita-source -type f | sort

          # Copy all image files from dita-source to the images directory
          echo "Copying all potential image files from dita-source:"
          find ./dita-source -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -exec cp -v {} ./site/images/ \;

          # Also look for images in subdirectories
          find ./dita-source -type d -name "*images*" -o -name "*img*" | while read dir; do
            echo "Copying from image directory: $dir"
            cp -rv $dir/* ./site/images/ || echo "No files in $dir"
          done

          # Extract image paths from HTML output
          echo "Extracting image references from HTML files:"
          grep -r "img src" ./site --include="*.html" | sed -E 's/.*src="([^"]*).*/\1/' > html-image-refs.txt
          grep -r "image href" ./site --include="*.html" | sed -E 's/.*href="([^"]*).*/\1/' >> html-image-refs.txt

          # Copy any image references found to the images directory
          cat html-image-refs.txt | while read imgpath; do
            # Extract just the filename if it's a path
            filename=$(basename "$imgpath")
            # Find the source file
            find ./site -name "$filename" -exec cp -v {} ./site/images/ \;
          done

          # Find any image references in the HTML output and copy them
          find ./site -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -not -path "./site/images/*" -exec cp -v {} ./site/images/ \;

          # Create placeholder images if no images are found
          if [ ! "$(ls -A ./site/images 2>/dev/null)" ]; then
            echo "Creating placeholder test images"
            # Use base64 encoded 1x1 pixel transparent PNG
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > ./site/images/test.png
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > ./site/images/2.jpg
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > ./site/images/3.jpg
          fi

          # Correct image file permissions
          chmod -R 644 ./site/images/* || echo "No files to change permissions"

          # List files in the images directory
          echo "Files in images directory:"
          ls -la ./site/images/ || echo "No files in images directory"

      # Step 6: Process HTML files and ensure content exists
      - name: Process HTML Content
        run: |
          # Create content directory for SPA fragments
          mkdir -p ./site/content
          mkdir -p ./site/js

          # Check for DITAMAP files
          echo "Checking for DITAMAP files..."
          find ./dita-source -name "*.ditamap" | sort
          find ./ -name "*.ditamap" | sort

          echo "Creating default content for welcome page"
          cat > "./site/content/welcome.html" << EOF
          <div class="welcome-page">
            <h1>Documentation Portal</h1>
            <p>Welcome to the documentation portal. Select a topic from the navigation menu to begin.</p>
            
            <div class="info-panel">
              <h2>Getting Started</h2>
              <p>This documentation has been generated from DITA content. It contains information about various topics organized in the left navigation menu.</p>
            </div>
            
            <div class="info-panel">
              <h2>Navigation</h2>
              <p>Use the navigation tree on the left to browse through topics. You can also use the search box to find specific content.</p>
            </div>
          </div>
          EOF

          # Echo current dir and files for debugging
          echo "Current directory: $PWD"
          echo "Files in dita-source directory (if exists):"
          ls -la ./dita-source || echo "dita-source directory not found"

          # Process each HTML file to extract content
          echo "Looking for HTML files to process..."
          html_count=0
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            # Skip processing if this is the index.html we'll create later
            if [[ "$file" == "./site/index.html" ]]; then
              continue
            fi

            filename=$(basename "$file")
            id="${filename%.html}"
            hyphenated_id="${id//_/-}"
            echo "Processing $filename (ID: $id, Hyphenated ID: $hyphenated_id)"
            html_count=$((html_count+1))

            # Extract content from file
            content=$(sed -n '/<body/,/<\/body>/p' "$file" |
                      sed '/<body/d;/<\/body>/d' |
                      sed '/<header/,/<\/header>/d' |
                      sed '/<nav/,/<\/nav>/d' |
                      sed '/<footer/,/<\/footer>/d')

            # Fix image paths to use base SPA image directory
            # 1. First convert DITA <image> tags to standard HTML <img> tags
            content=$(echo "$content" | sed -E 's/<image([^>]*)href="([^"]*)"([^>]*)>/<img\1src="\2"\3>/gi')

            # 2. Fix various image paths to use base SPA image directory
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="[^"]*\/([^\/"]*)\.([a-zA-Z0-9]+)"/<img\1src="images\/\2.\3"/gi')

            # 3. Fix remaining img paths that might just be filenames
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="([^\/:"]*)\.(jpg|jpeg|png|gif|svg)"/<img\1src="images\/\2.\3"/gi')

            # 4. Also handle images that might already have been correctly fixed
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="\/images\//<img\1src="images\//gi')

            # Get title from the original file
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '_-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi

            # Create content file with original filename
            echo "$content" > "./site/content/$id.html"

            # Also create a hyphenated version
            if [[ "$id" != "$hyphenated_id" ]]; then
              echo "$content" > "./site/content/$hyphenated_id.html"
              echo "Created mapping: $id.html → $hyphenated_id.html"
            fi
          done

          # If no HTML files were processed, create sample content
          if [ "$html_count" -eq 0 ]; then
            echo "No HTML files found to process. Creating sample content..."
            
            # Create sample content files
            cat > "./site/content/getting-started.html" << EOF
            <h1>Getting Started</h1>
            <p>This is a sample getting started page for the documentation.</p>
            <p>In a real DITA conversion, this would contain content from your DITA source files.</p>
            <h2>Navigation</h2>
            <p>Use the navigation menu on the left to browse through the documentation.</p>
            <h2>Search</h2>
            <p>You can also use the search bar to find specific content.</p>
            EOF
            
            cat > "./site/content/user-guide.html" << EOF
            <h1>User Guide</h1>
            <p>This is a sample user guide page for the documentation.</p>
            <table class="table">
              <thead>
                <tr>
                  <th>Feature</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Navigation</td>
                  <td>The left sidebar contains a tree of all documentation topics.</td>
                </tr>
                <tr>
                  <td>Search</td>
                  <td>Use the search bar to find content across all documentation.</td>
                </tr>
                <tr>
                  <td>Responsive Design</td>
                  <td>The documentation works on desktop, tablet, and mobile devices.</td>
                </tr>
              </tbody>
            </table>
            EOF
            
            cat > "./site/content/reference.html" << EOF
            <h1>API Reference</h1>
            <p>This is a sample reference page for the documentation.</p>
            <h2>Functions</h2>
            <ul>
              <li><strong>getDocument(id)</strong> - Retrieves a document by ID</li>
              <li><strong>searchContent(query)</strong> - Searches across all content</li>
              <li><strong>navigateTo(path)</strong> - Navigates to a specific path</li>
            </ul>
            <h2>Parameters</h2>
            <p>Most functions accept the following parameters:</p>
            <ul>
              <li><strong>id</strong> - The unique identifier for a document</li>
              <li><strong>query</strong> - A search query string</li>
              <li><strong>path</strong> - A navigation path</li>
            </ul>
            EOF
            
            # Create a sample content for user-guide children
            cat > "./site/content/installation.html" << EOF
            <h1>Installation Guide</h1>
            <p>This is a sample installation guide for the product.</p>
            <h2>System Requirements</h2>
            <ul>
              <li>Operating System: Windows 10, macOS, or Linux</li>
              <li>Memory: 4GB RAM minimum, 8GB recommended</li>
              <li>Disk Space: 500MB available</li>
            </ul>
            <h2>Installation Steps</h2>
            <ol>
              <li>Download the installer from the website</li>
              <li>Run the installer and follow the prompts</li>
              <li>Configure the application settings</li>
              <li>Verify the installation by running the application</li>
            </ol>
            EOF
            
            cat > "./site/content/configuration.html" << EOF
            <h1>Configuration Guide</h1>
            <p>This is a sample configuration guide for the product.</p>
            <h2>Basic Configuration</h2>
            <p>The following settings should be configured for most installations:</p>
            <table class="table">
              <thead>
                <tr>
                  <th>Setting</th>
                  <th>Default Value</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td>Port</td>
                  <td>8080</td>
                  <td>The port number used for HTTP connections</td>
                </tr>
                <tr>
                  <td>Logging Level</td>
                  <td>INFO</td>
                  <td>The minimum logging level (DEBUG, INFO, WARN, ERROR)</td>
                </tr>
                <tr>
                  <td>Cache Size</td>
                  <td>1024</td>
                  <td>The maximum number of items to store in the cache</td>
                </tr>
              </tbody>
            </table>
            EOF

            # Create a sample navigation config
            echo "Creating sample navigation config..."
            cat > ./site/js/navigation-config.js << EOF
            // Auto-generated navigation structure
            const navigationConfig = [
              {
                "id": "welcome",
                "title": "Welcome",
                "filename": "welcome",
                "href": "welcome.html"
              },
              {
                "id": "getting-started",
                "title": "Getting Started",
                "filename": "getting-started",
                "href": "getting-started.html"
              },
              {
                "id": "user-guide",
                "title": "User Guide",
                "filename": "user-guide",
                "href": "user-guide.html",
                "children": [
                  {
                    "id": "installation",
                    "title": "Installation",
                    "filename": "installation",
                    "href": "installation.html"
                  },
                  {
                    "id": "configuration",
                    "title": "Configuration",
                    "filename": "configuration",
                    "href": "configuration.html"
                  }
                ]
              },
              {
                "id": "reference",
                "title": "API Reference",
                "filename": "reference",
                "href": "reference.html"
              }
            ];
            EOF
            
            # Create content map
            echo "Creating sample content ID map..."
            cat > ./site/js/content-id-map.js << EOF
            // Auto-generated content ID mapping
            const contentIdMap = {
              "welcome": { 
                "title": "Welcome", 
                "filename": "welcome", 
                "content": "Welcome to the documentation portal. Select a topic from the navigation menu to begin. This documentation has been generated from DITA content. It contains information about various topics organized in the left navigation menu. Use the navigation tree on the left to browse through topics. You can also use the search box to find specific content." 
              },
              "getting-started": { 
                "title": "Getting Started", 
                "filename": "getting-started", 
                "content": "This is a sample getting started page for the documentation. In a real DITA conversion, this would contain content from your DITA source files. Use the navigation menu on the left to browse through the documentation. You can also use the search bar to find specific content." 
              },
              "user-guide": { 
                "title": "User Guide", 
                "filename": "user-guide", 
                "content": "This is a sample user guide page for the documentation. The left sidebar contains a tree of all documentation topics. Use the search bar to find content across all documentation. The documentation works on desktop, tablet, and mobile devices." 
              },
              "installation": { 
                "title": "Installation Guide", 
                "filename": "installation", 
                "content": "This is a sample installation guide for the product. System Requirements: Operating System: Windows 10, macOS, or Linux. Memory: 4GB RAM minimum, 8GB recommended. Disk Space: 500MB available. Installation Steps: Download the installer from the website. Run the installer and follow the prompts. Configure the application settings. Verify the installation by running the application." 
              },
              "configuration": { 
                "title": "Configuration Guide", 
                "filename": "configuration", 
                "content": "This is a sample configuration guide for the product. The following settings should be configured for most installations: Port: 8080. Logging Level: INFO. Cache Size: 1024." 
              },
              "reference": { 
                "title": "API Reference", 
                "filename": "reference", 
                "content": "This is a sample reference page for the documentation. Functions: getDocument(id) - Retrieves a document by ID. searchContent(query) - Searches across all content. navigateTo(path) - Navigates to a specific path. Parameters: Most functions accept the following parameters: id - The unique identifier for a document. query - A search query string. path - A navigation path." 
              },
              "default": { 
                "title": "Documentation", 
                "filename": "", 
                "content": "" 
              }
            };
            EOF
          else
            # Create a content ID mapping file
            echo "Creating content ID mapping from processed HTML files..."
            echo "// Auto-generated content ID mapping" > ./site/js/content-id-map.js
            echo "const contentIdMap = {" >> ./site/js/content-id-map.js

            find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
              filename=$(basename "$file" .html)
              id="${filename//_/-}" # Hyphenated ID for routing
              original_filename="$filename" # Keep original filename for lookup
              title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
              raw_content=$(cat "$file" | tr '\n' ' ' | sed 's/<[^>]*>//g' | sed 's/&nbsp;/ /g' | sed 's/  */ /g' | tr -d '\n\r') # Extract text for search

              # Skip if already processed (to avoid duplicates for hyphenated/underscored IDs)
              if grep -q "\"$id\":" ./site/js/content-id-map.js; then
                continue
              fi

              # If no title found, generate one from the ID
              if [ -z "$title" ]; then
                title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
              fi

              # Escape quotes in title and content
              title=$(echo "$title" | sed 's/"/\\"/g')
              raw_content=$(echo "$raw_content" | sed 's/"/\\"/g')

              # Add to content map file with raw content for search
              echo "  \"$id\": { \"title\": \"$title\", \"filename\": \"$original_filename\", \"content\": \"$raw_content\" }," >> ./site/js/content-id-map.js
            done

            # Add welcome page to content map 
            echo "  \"welcome\": { \"title\": \"Welcome\", \"filename\": \"welcome\", \"content\": \"Welcome to the documentation portal. Select a topic from the navigation menu to begin. This documentation has been generated from DITA content. It contains information about various topics organized in the left navigation menu.\" }," >> ./site/js/content-id-map.js

            # Close the mapping object
            echo "  \"default\": { \"title\": \"Documentation\", \"filename\": \"\", \"content\": \"\" }" >> ./site/js/content-id-map.js
            echo "};" >> ./site/js/content-id-map.js
          fi


      # Step 7: Generate Navigation Configuration
      - name: Generate Navigation Configuration
        run: |
          mkdir -p ./site/js ./site/css

          # Convert JSON to JavaScript navigation config
          cat > ./site/js/navigation-config.js << 'EOF'
          // Auto-generated navigation structure from DITAMAP
          const navigationConfig =
          EOF

          # Append the parsed JSON structure
          cat ./navigation-structure.json >> ./site/js/navigation-config.js
          echo ";" >> ./site/js/navigation-config.js

          echo "Navigation configuration generated from DITAMAP structure"

      # Step 8: Create SPA CSS with improved styling (based on Oxygen WebHelp)
      - name: Create SPA CSS
        run: |
          cat > ./site/css/style.css << 'EOF'
          /* General styles based on Oxygen WebHelp theme */
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            display: flex;
            height: 100vh;
            width: 100%;
            overflow: hidden;
            color: #333;
            background-color: #f8f8f8;
          }

          /* Sidebar styling */
          .sidebar {
            width: 280px;
            background-color: #e0f7f7; /* Light cyan background */
            padding: 15px;
            height: 100vh;
            overflow-y: auto;
            border-right: 1px solid #c0e0e0;
            display: flex;
            flex-direction: column;
            box-shadow: 2px 0 5px rgba(0,0,0,0.05);
          }

          .main-content {
            flex: 1;
            padding: 30px;
            height: 100vh;
            overflow-y: auto;
            background-color: #ffffff;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.02);
          }

          .sidebar h2 {
            font-weight: 500;
            margin-top: 0;
            margin-bottom: 15px;
            color: #00747a; /* Teal color for headings */
            border-bottom: 2px solid #80cbc4;
            padding-bottom: 10px;
            font-size: 1.4em;
          }

          /* Navigation styling */
          .sidebar-nav {
            flex: 1;
            overflow-y: auto;
            margin-top: 15px;
          }

          .sidebar ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 5px;
          }

          .sidebar ul ul {
            padding-left: 20px;
            margin-top: 5px;
            margin-bottom: 0;
          }

          .sidebar li {
            margin-bottom: 6px;
            position: relative;
          }

          /* Toggle arrow styling */
          .sidebar .toggle-arrow {
            display: inline-block;
            width: 18px;
            height: 18px;
            position: absolute;
            left: 0;
            top: 4px;
            cursor: pointer;
            z-index: 10;
            color: #00747a;
          }

          .sidebar .toggle-arrow:before {
            content: "▶";
            display: inline-block;
            font-size: 10px;
            transition: transform 0.2s;
          }

          .sidebar li.expanded > .toggle-arrow:before {
            transform: rotate(90deg);
          }

          .sidebar li.has-children > ul {
            display: none;
          }

          .sidebar li.has-children.expanded > ul {
            display: block;
          }

          .sidebar a {
            color: #00747a;
            text-decoration: none;
            display: block;
            padding: 6px 5px 6px 22px;
            border-radius: 4px;
            transition: background-color 0.2s, color 0.2s;
            cursor: pointer;
            font-size: 0.95em;
          }

          .sidebar a:hover {
            background-color: #e1f5fe;
            color: #006064;
          }

          .sidebar a.active {
            background-color: #80deea;
            font-weight: bold;
            color: #006064;
            box-shadow: inset 3px 0 0 #00acc1;
          }

          /* Search Bar Styling */
          .search-container {
            margin-bottom: 15px;
            display: flex;
            gap: 5px;
            width: 100%;
            position: relative;
          }

          .search-container input[type="text"] {
            flex-grow: 1;
            min-width: 0;
            padding: 8px 10px;
            border: 1px solid #b0e0e6;
            border-radius: 5px;
            font-size: 0.9em;
            outline: none;
            transition: border-color 0.3s, box-shadow 0.3s;
          }

          .search-container input[type="text"]:focus {
            border-color: #4dd0e1;
            box-shadow: 0 0 5px rgba(0, 188, 212, 0.3);
          }

          .search-container button {
            padding: 8px 10px;
            background-color: #00acc1;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            white-space: nowrap;
            min-width: 60px;
            font-weight: normal;
          }

          .search-container button:hover {
            background-color: #0097a7;
          }

          /* Search Results Styling */
          .search-results {
            list-style-type: none;
            padding: 0;
            margin-top: 15px;
            border-top: 1px solid #e0e0e0;
            padding-top: 15px;
            max-height: 300px;
            overflow-y: auto;
          }

          .search-results li {
            margin-bottom: 10px;
            padding: 8px 0;
            border-bottom: 1px dashed #e0e0e0;
          }

          .search-results li:last-child {
            border-bottom: none;
          }

          .search-results a {
            color: #0097a7;
            text-decoration: none;
            font-weight: bold;
          }

          .search-results p {
            font-size: 0.9em;
            color: #555;
            margin-top: 5px;
          }

          .highlight {
            background-color: #fff9c4;
            font-weight: bold;
          }

          /* Content styling */
          .main-content h1, .main-content h2, .main-content h3, .main-content h4 {
            font-weight: 500;
            margin-top: 1.5em;
            margin-bottom: 0.8em;
            color: #00838f;
          }
          .main-content h1 {
            font-size: 2em;
            border-bottom: 1px solid #e0e0e0;
            padding-bottom: 10px;
            margin-top: 0;
          }
          .main-content h2 { font-size: 1.5em; }
          .main-content h3 { font-size: 1.3em; }
          .main-content h4 { font-size: 1.1em; }

          .main-content p {
            margin-bottom: 1em;
            line-height: 1.6;
          }

          .main-content img {
            max-width: 100%;
            height: auto;
            display: block;
            margin: 1em auto;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
          }

          /* Table styling */
          .main-content table {
            width: 100%;
            border-collapse: collapse;
            margin: 1.5em 0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            font-size: 0.95em;
          }
          
          .main-content th, .main-content td {
            border: 1px solid #b2dfdb;
            padding: 10px;
            text-align: left;
          }
          
          .main-content th {
            background-color: #e0f2f1;
            font-weight: bold;
            color: #00796b;
          }
          
          .main-content tr:nth-child(even) {
            background-color: #f5f9f9;
          }
          
          .main-content tr:hover {
            background-color: #e1f5fe;
          }
          
          .table-container {
            overflow-x: auto;
            margin-bottom: 1.5em;
          }

          .main-content ul, .main-content ol {
            margin-left: 2em;
            margin-bottom: 1em;
          }
          
          .main-content li {
            margin-bottom: 0.5em;
          }

          /* Welcome screen styling */
          .welcome-screen {
            text-align: center;
            padding: 40px 20px;
            color: #00838f;
          }

          .welcome-screen h2 {
            margin-bottom: 20px;
            font-size: 2em;
          }

          /* Loading state */
          #loading {
            display: none;
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
          }

          .loading #loading {
            display: block;
          }

          /* Error state */
          .error {
            background-color: #ffebee;
            border-left: 4px solid #f44336;
            padding: 15px;
            margin-bottom: 20px;
            color: #333;
          }

          .error h2 {
            color: #d32f2f;
            margin-top: 0;
          }

          /* Header styling similar to Oxygen WebHelp */
          .navbar {
            background-color: #00838f;
            color: white;
            padding: 10px 0;
            margin-bottom: 20px;
          }

          .navbar-default {
            border: none;
          }

          /* Print button */
          .wh_print_link {
            display: inline-block;
            margin-left: 15px;
          }

          .wh_print_link button {
            background: transparent;
            border: none;
            color: #00838f;
            cursor: pointer;
          }

          /* Responsive design */
          @media (max-width: 768px) {
            body {
              flex-direction: column;
              height: auto;
            }

            .sidebar {
              width: 100%;
              height: auto;
              max-height: 40vh;
              border-right: none;
              border-bottom: 1px solid #b2ebf2;
            }

            .main-content {
              height: auto;
              min-height: 60vh;
            }
          }
          EOF

      # Step 9: Debug SPA Application
      - name: Create SPA Application with Debug
        run: |
          cat > ./site/js/app.js << 'EOF'
          // SPA Application with dynamic navigation and search from DITAMAP
          // With enhanced debugging and error handling

          // DOM Elements
          const contentEl = document.getElementById('content');
          const contentTitleEl = document.getElementById('content-title');
          const navigationEl = document.getElementById('navigation');
          const searchInput = document.getElementById('searchInput');
          const searchButton = document.getElementById('searchButton');
          const searchResultsEl = document.getElementById('searchResults');

          // Base path handling for GitHub Pages
          const getBasePath = () => {
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) {
                return '/' + pathSegments[1];
              }
            }
            return '';
          };

          // Current state
          window.currentPage = null; // Make it available globally
          const basePath = getBasePath();

          // Enhanced debug logging
          function debug(message, data) {
            console.log(`[DITA-SPA] ${message}`, data || '');
            // Also show messages in page during initialization for visibility
            if (document.getElementById('debug-log')) {
              const logEl = document.getElementById('debug-log');
              const entry = document.createElement('div');
              entry.textContent = `${message} ${data ? JSON.stringify(data) : ''}`;
              logEl.appendChild(entry);
            }
          }

          // Initialize the application
          function initApp() {
            debug('Initializing app with base path:', basePath);
            
            try {
              // Add debug logging area to page temporarily
              contentEl.innerHTML += '<div id="debug-log" style="font-family: monospace; padding: 10px; background: #f5f5f5; border: 1px solid #ddd; margin-top: 20px; max-height: 200px; overflow: auto;"><strong>Debug Log:</strong></div>';
              
              // Check if navigation config exists
              if (!window.navigationConfig) {
                debug('ERROR: Navigation configuration is missing!');
                showErrorContent('initialization', 'Navigation configuration could not be loaded. Please check the console for errors.');
                return;
              }
              
              debug('Navigation config found with items:', navigationConfig.length);
              
              // Render navigation
              renderNavigation(navigationConfig);
              debug('Navigation rendered successfully');

              // Set up event listeners
              window.addEventListener('popstate', handlePopState);
              if (searchButton && searchInput) {
                searchButton.addEventListener('click', performSearch);
                searchInput.addEventListener('keypress', (e) => {
                  if (e.key === 'Enter') {
                    performSearch();
                  }
                });
                debug('Search event listeners attached');
              }

              // Add print functionality
              const printBtn = document.querySelector('.wh_print_link button');
              if (printBtn) {
                printBtn.addEventListener('click', (e) => {
                  e.preventDefault();
                  window.print();
                });
                debug('Print functionality attached');
              }

              // Check if we have a hash in the URL
              const initialPageId = getPageIdFromUrl();
              debug('Initial page ID from URL:', initialPageId);

              if (initialPageId) {
                // If we have a page ID in the URL, load that page
                navigateToPage(initialPageId, false);
              } else {
                // Otherwise, show a welcome screen
                showWelcomeScreen();
              }
              
              // Remove debug log after 10 seconds
              setTimeout(() => {
                const debugLog = document.getElementById('debug-log');
                if (debugLog) {
                  debugLog.remove();
                }
              }, 10000);
              
            } catch (error) {
              console.error('Error during initialization:', error);
              showErrorContent('initialization', `Error initializing app: ${error.message}. Check the console for more details.`);
            }
          }

          // Function to show welcome screen
          function showWelcomeScreen() {
            debug('Showing welcome screen');
            contentTitleEl.textContent = 'Documentation';
            document.title = 'Documentation';

            contentEl.innerHTML = `
              <div class="welcome-screen">
                <h2>Welcome to Documentation</h2>
                <p>Please select a topic from the navigation menu or use the search bar.</p>
                <div id="nav-debug">
                  <p>Navigation items loaded: <strong>${navigationConfig ? navigationConfig.length : 0}</strong></p>
                </div>
              </div>
            `;

            document.body.classList.remove('loading');
            debug('Welcome screen displayed');
          }

          // Render the navigation menu with hierarchy
          function renderNavigation(items, parentEl = navigationEl) {
            if (!items || !Array.isArray(items) || items.length === 0) {
              debug('WARNING: No navigation items to render');
              return;
            }
            
            debug(`Rendering ${items.length} navigation items`);
            const ul = document.createElement('ul');
            ul.setAttribute('role', 'menu');

            items.forEach(item => {
              const li = document.createElement('li');
              li.setAttribute('role', 'presentation');

              // Add class if item has children
              if (item.children && item.children.length > 0) {
                li.classList.add('has-children');

                // Create a toggle arrow element
                const toggle = document.createElement('span');
                toggle.className = 'toggle-arrow';
                toggle.addEventListener('click', (e) => {
                  e.stopPropagation();
                  li.classList.toggle('expanded');
                });
                li.appendChild(toggle);
              }

              const a = document.createElement('a');
              a.setAttribute('role', 'menuitem');
              a.textContent = item.title || 'Untitled';
              a.setAttribute('data-id', item.id || '');
              a.href = `#${item.id || ''}`;

              // Click handler for navigation items
              a.addEventListener('click', (e) => {
                e.preventDefault();

                // If this is a parent item with children, toggle expansion
                if (item.children && item.children.length > 0) {
                  li.classList.toggle('expanded');
                }

                // Always navigate to the page
                if (item.id) {
                  navigateToPage(item.id);
                  // Clear search results when navigating
                  if (searchResultsEl) searchResultsEl.innerHTML = '';
                  if (searchInput) searchInput.value = '';
                } else {
                  debug('WARNING: Navigation item clicked with no ID');
                }
              });

              li.appendChild(a);

              // Recursively render children if any
              if (item.children && item.children.length > 0) {
                renderNavigation(item.children, li);
              }

              ul.appendChild(li);
            });

            parentEl.appendChild(ul);
          }

          // Expand navigation path to the current page
          function expandNavigationTo(pageId) {
            debug('Expanding navigation to:', pageId);
            // Helper to search for a page in the navigation tree
            function findPageInNavigation(items, id, path = []) {
              for (let i = 0; i < items.length; i++) {
                const item = items[i];
                const currentPath = [...path, item];

                if (item.id === id) {
                  return currentPath;
                }

                if (item.children && item.children.length > 0) {
                  const result = findPageInNavigation(item.children, id, currentPath);
                  if (result) {
                    return result;
                  }
                }
              }

              return null;
            }

            // Find the path to the page
            const path = findPageInNavigation(navigationConfig, pageId);
            if (!path) {
              debug('WARNING: Could not find navigation path for:', pageId);
              return;
            }

            // Expand all parent items in the path
            for (let i = 0; i < path.length - 1; i++) {
              const item = path[i];
              const li = document.querySelector(`.sidebar li a[data-id="${item.id}"]`)?.parentElement;
              if (li) {
                li.classList.add('expanded');
              }
            }
          }

          // Navigate to a specific page
          function navigateToPage(pageId, pushState = true) {
            debug('Navigating to page:', pageId);

            // Show loading indicator
            document.body.classList.add('loading');

            try {
              // Update active state in navigation
              updateActiveNavItem(pageId);

              // Expand navigation to show the current page
              expandNavigationTo(pageId);

              // Update the URL
              if (pushState) {
                history.pushState({ pageId }, '', `#${pageId}`);
              }

              // Update current page
              window.currentPage = pageId;

              // Get filename from ID (using contentIdMap if available)
              let contentFileName = pageId;
              if (window.contentIdMap && contentIdMap[pageId] && contentIdMap[pageId].filename) {
                contentFileName = contentIdMap[pageId].filename;
                debug('Found content filename from map:', contentFileName);
              }

              // Try to load content
              loadContent(pageId)
                .then(content => {
                  // Update title
                  const title = getPageTitle(pageId);
                  contentTitleEl.textContent = title;
                  document.title = title;

                  // Update content
                  contentEl.innerHTML = content;

                  // Add OxygenXML classes to tables if present
                  enhanceTables();

                  // Hide loading indicator
                  document.body.classList.remove('loading');
                  debug('Content loaded successfully');
                })
                .catch(error => {
                  debug('Error loading content with ID, trying original filename:', contentFileName);
                  // Try with original filename if different from ID
                  if (contentFileName !== pageId) {
                    loadContent(contentFileName)
                      .then(content => {
                        contentTitleEl.textContent = getPageTitle(pageId);
                        document.title = getPageTitle(pageId);
                        contentEl.innerHTML = content;
                        enhanceTables();
                        document.body.classList.remove('loading');
                        debug('Content loaded from original filename');
                      })
                      .catch(altError => {
                        debug('ERROR: Both content loads failed:', altError);
                        showErrorContent(pageId, 'Content could not be loaded. The file may not exist.');
                      });
                  } else {
                    debug('ERROR: Content load failed:', error);
                    showErrorContent(pageId, 'Content could not be loaded. The file may not exist.');
                  }
                });
            } catch (error) {
              debug('ERROR: Navigation error:', error);
              showErrorContent(pageId, `Error during navigation: ${error.message}`);
            }
          }

          // Enhance tables with OxygenXML-like styling
          function enhanceTables() {
            const tables = document.querySelectorAll('#content table');
            debug(`Enhancing ${tables.length} tables found in content`);
            tables.forEach(table => {
              // Add OxygenXML-like classes
              if (!table.className.includes('table')) {
                table.classList.add('table');
              }
              
              // Wrap tables in container for responsive design
              if (!table.parentElement.className.includes('table-container')) {
                const wrapper = document.createElement('div');
                wrapper.className = 'table-container';
                table.parentNode.insertBefore(wrapper, table);
                wrapper.appendChild(table);
              }
            });
          }

          // Show error content when page cannot be loaded
          function showErrorContent(pageId, message = null) {
            console.error('Error showing content for:', pageId);
            document.body.classList.remove('loading');
            contentEl.innerHTML = `
              <div class="error">
                <h2>Content Not Found</h2>
                <p>${message || `The requested content "${pageId}" could not be loaded.`}</p>
                <p>Please select another topic from the navigation menu.</p>
                <div class="technical-details">
                  <p><strong>Technical Details:</strong></p>
                  <p>Base Path: ${basePath}</p>
                  <p>Current Page: ${pageId}</p>
                  <p>Content Map Available: ${window.contentIdMap ? 'Yes' : 'No'}</p>
                  <p>Navigation Config Available: ${window.navigationConfig ? 'Yes' : 'No'}</p>
                </div>
              </div>
            `;
          }

          // Load content for a page
          async function loadContent(pageId) {
            const contentPath = `${basePath}/content/${pageId}.html`;
            debug('Fetching from URL:', contentPath);

            const response = await fetch(contentPath);
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.text();
          }

          // Update active state in navigation
          function updateActiveNavItem(pageId) {
            // Remove active class from all nav items
            const allNavItems = document.querySelectorAll('.sidebar a');
            allNavItems.forEach(item => item.classList.remove('active'));

            // Add active class to current page nav item
            const activeItem = document.querySelector(`.sidebar a[data-id="${pageId}"]`);
            if (activeItem) {
              activeItem.classList.add('active');

              // Make sure the parents are expanded
              let parent = activeItem.parentElement;
              while (parent && !parent.classList.contains('sidebar')) {
                if (parent.classList.contains('has-children')) {
                  parent.classList.add('expanded');
                }
                parent = parent.parentElement;
              }
            } else {
              debug('WARNING: No navigation item found for:', pageId);
            }
          }

          // Handle popstate event (browser back/forward)
          function handlePopState(event) {
            const pageId = event.state?.pageId || getPageIdFromUrl() || (navigationConfig[0] && navigationConfig[0].id);
            debug('Popstate event, loading page:', pageId);
            if (pageId) {
              navigateToPage(pageId, false);
            } else {
              showWelcomeScreen();
            }
          }

          // Get page ID from URL hash
          function getPageIdFromUrl() {
            return window.location.hash.substring(1) || null;
          }

          // Get page title from content manifest
          function getPageTitle(pageId) {
            // First try contentIdMap
            if (window.contentIdMap && contentIdMap[pageId]) {
              return contentIdMap[pageId].title;
            }

            // Then try navigation config
            function findTitleInNav(items, id) {
              for (const item of items) {
                if (item.id === id) {
                  return item.title;
                }
                if (item.children && item.children.length > 0) {
                  const title = findTitleInNav(item.children, id);
                  if (title) return title;
                }
              }
              return null;
            }

            const navTitle = findTitleInNav(navigationConfig, pageId);
            if (navTitle) return navTitle;

            // Fallback: generate title from ID
            return pageId.split(/-|_/).map(word =>
              word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
          }

          // --- Search Functionality ---
          function performSearch() {
              const query = searchInput.value.toLowerCase().trim();
              searchResultsEl.innerHTML = ''; // Clear previous results

              if (query.length < 2) { // Require at least 2 characters for search
                  if (query.length > 0) {
                      searchResultsEl.innerHTML = '<li><p>Please enter at least 2 characters to search.</p></li>';
                  }
                  return;
              }

              debug('Performing search for:', query);

              if (!window.contentIdMap) {
                searchResultsEl.innerHTML = '<li><p>Search index not available. Content map is missing.</p></li>';
                return;
              }

              const results = [];
              for (const id in contentIdMap) {
                  if (contentIdMap.hasOwnProperty(id) && id !== 'default') {
                      const item = contentIdMap[id];
                      const title = item.title.toLowerCase();
                      const content = item.content ? item.content.toLowerCase() : '';

                      let snippet = '';
                      let matchCount = 0;

                      // Check for title match
                      if (title.includes(query)) {
                          matchCount += 10; // Higher weight for title match
                          snippet = `Found in title: "${highlightMatch(item.title, query)}"`;
                      }

                      // Check for content match
                      const contentMatches = content.split(query).length - 1;
                      if (contentMatches > 0) {
                          matchCount += contentMatches; // Add weight for each content match
                          const matchIndex = content.indexOf(query);
                          const start = Math.max(0, matchIndex - 50);
                          const end = Math.min(content.length, matchIndex + query.length + 50);
                          const context = item.content.substring(start, end);
                          snippet += (snippet ? '<br>' : '') + `...${highlightMatch(context, query)}...`;
                      }

                      if (matchCount > 0) {
                          results.push({ id: item.id, title: item.title, snippet: snippet, score: matchCount });
                      }
                  }
              }

              // Sort results by score (most relevant first)
              results.sort((a, b) => b.score - a.score);

              if (results.length === 0) {
                  searchResultsEl.innerHTML = '<li><p>No results found for your query.</p></li>';
              } else {
                  results.forEach(result => {
                      const li = document.createElement('li');
                      const link = document.createElement('a');
                      link.href = `#${result.id}`;
                      link.textContent = result.title;
                      link.addEventListener('click', (e) => {
                          e.preventDefault();
                          navigateToPage(result.id);
                          // Clear search results after navigating
                          searchResultsEl.innerHTML = '';
                          searchInput.value = '';
                      });
                      li.appendChild(link);
                      if (result.snippet) {
                          const p = document.createElement('p');
                          p.innerHTML = result.snippet;
                          li.appendChild(p);
                      }
                      searchResultsEl.appendChild(li);
                  });
              }
          }

          function highlightMatch(text, query) {
              const regex = new RegExp(`(${query})`, 'gi');
              return text.replace(regex, '<span class="highlight">$1</span>');
          }

          // Make navigateToPage available globally
          window.navigateToPage = navigateToPage;

          // Initialize the app when DOM is ready
          window.addEventListener('DOMContentLoaded', initApp);
          
          // Add fallback for loading timeout
          window.addEventListener('load', function() {
            // If still in loading state after 5 seconds, something might be wrong
            setTimeout(() => {
              if (document.body.classList.contains('loading')) {
                debug('WARNING: Still in loading state after 5 seconds');
                document.body.classList.remove('loading');
                
                if (!window.navigationLoaded) {
                  showErrorContent('timeout', 'Navigation failed to load. Please check the console for errors.');
                }
              }
            }, 5000);
          });
          EOF

      # Step 10: Create index.html (Updated for Search Bar)
      - name: Create Index HTML
        run: |
          cat > ./site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
            <meta http-equiv="Pragma" content="no-cache">
            <meta http-equiv="Expires" content="0">

            <script>
              // Set base path for GitHub Pages
              if (location.hostname.includes('github.io')) {
                const pathSegments = location.pathname.split('/');
                if (pathSegments.length > 1) {
                  const basePath = '/' + pathSegments[1];
                  document.write('<base href="' + basePath + '/">');
                  console.log('Base path set to:', basePath);
                }
              }
            </script>

            <title>Automotive Documentation</title>
            <link rel="stylesheet" href="css/style.css">
          </head>
          <body>
            <div class="sidebar">
              <div class="sidebar-header">
                <h2>Navigation</h2>
          <!-- Update search container HTML for better space utilization -->
                <div class="search-container">
                    <input type="text" id="searchInput" placeholder="Search...">
                    <button id="searchButton">Search</button>
                </div>
              </div>
              <div class="sidebar-nav">
                <div id="navigation"></div>
                <ul id="searchResults" class="search-results"></ul>
              </div>
            </div>

            <div class="main-content">
              <h1 id="content-title">Loading...</h1>
              <div id="loading">Loading content...</div>
              <div id="content">
                <div class="initial-loading">
                  <p>Initializing documentation viewer...</p>
                </div>
              </div>
            </div>

            <script src="js/navigation-config.js"></script>
            <script src="js/content-id-map.js"></script>
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF

      # Step 11: Create 404.html for SPA routing
      - name: Create 404 Page
        run: |
          cat > ./site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redirecting...</title>
            <script>
              // Store the requested URL for processing after redirect
              sessionStorage.redirect = location.href;

              // Determine the correct base path
              function getBasePath() {
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    return '/' + pathSegments[1];
                  }
                }
                return '';
              }

              // Redirect to the main site
              const basePath = getBasePath();
              window.location.href = basePath + '/';
            </script>
          </head>
          <body>
            <div style="text-align: center; font-family: Arial, sans-serif; margin-top: 100px;">
              <h1>Redirecting to documentation...</h1>
              <p>If you are not redirected automatically, <a href="/">click here</a>.</p>
            </div>
          </body>
          </html>
          EOF

      # Step 12: Create default content for container nodes
      - name: Create Default Content
        run: |
          # Create content directory if it doesn't exist
          mkdir -p ./site/content

          # Extract container nodes from navigation
          grep -o '"id": "[^"]*".*"children"' ./navigation-structure.json |
          sed 's/"id": "\([^"]*\)".*/\1/' > container-nodes.txt

          # Create default content for container nodes
          while IFS= read -r id || [ -n "$id" ]; do
            if [ ! -f "./site/content/$id.html" ]; then
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')

              echo "Creating default content for container node: $id ($title)"
              cat > "./site/content/$id.html" << EOF
          <h1>${title}</h1>
          <p>This section contains information about ${title}.</p>
          <p>Use the navigation menu to explore topics within this section.</p>
          EOF
            fi
          done < container-nodes.txt

          # Create default containers if none found
          if [ ! -s container-nodes.txt ]; then
            echo "No container nodes found in navigation. Creating default containers."

            # Create default containers
            for id in automotive-information basic-maintenance major-vehicle-components; do
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')

              echo "Creating default container: $id ($title)"
              cat > "./site/content/$id.html" << EOF
          <h1>${title}</h1>
          <p>This section contains information about ${title}.</p>
          <p>Use the navigation menu to explore topics within this section.</p>
          EOF
            done
          fi

      # Step 13: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true