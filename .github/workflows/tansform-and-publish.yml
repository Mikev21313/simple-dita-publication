name: DITA to SPA Transformation with Auto-Generated Navigation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 1: Checkout repository 
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install DITA-OT and required tools
      - name: Set up DITA-OT and XML tools
        run: |
          # Install XML tools
          sudo apt-get update
          sudo apt-get install -y libxml2-utils xsltproc

          # Install DITA-OT
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # Step 4: Parse DITAMAP to generate navigation structure
      - name: Parse DITAMAP Structure
        run: |
          echo "Parsing DITAMAP structure from dita-source/automotive.ditamap"
          
          # Create an XSLT file to transform DITAMAP to JSON navigation structure
          cat > extract-nav.xsl << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            <xsl:output method="text"/>
            
            <!-- Start of the JSON array -->
            <xsl:template match="/">
              [
                <xsl:apply-templates select="//topicref[not(ancestor::topicref)]"/>
              ]
            </xsl:template>
            
            <!-- Process each top-level topicref -->
            <xsl:template match="topicref">
              <xsl:variable name="href" select="@href"/>
              <xsl:variable name="filename">
                <xsl:choose>
                  <xsl:when test="contains($href, '/')">
                    <xsl:value-of select="substring-after(substring-before($href, '.'), '/')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="substring-before($href, '.')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              
              <xsl:variable name="id">
                <xsl:choose>
                  <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                  <xsl:otherwise><xsl:value-of select="translate($filename, '_', '-')"/></xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              
              <xsl:variable name="title">
                <xsl:choose>
                  <xsl:when test="@navtitle"><xsl:value-of select="@navtitle"/></xsl:when>
                  <xsl:when test="topicmeta/navtitle"><xsl:value-of select="topicmeta/navtitle"/></xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="translate(translate($id, '-', ' '), '_', ' ')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              
              {
                "id": "<xsl:value-of select="$id"/>",
                "title": "<xsl:value-of select="$title"/>",
                "filename": "<xsl:value-of select="$filename"/>",
                "href": "<xsl:value-of select="$href"/>"
                <xsl:if test="topicref">
                  ,
                  "children": [
                    <xsl:apply-templates select="topicref"/>
                  ]
                </xsl:if>
              }<xsl:if test="following-sibling::topicref">,</xsl:if>
            </xsl:template>
          </xsl:stylesheet>
          EOF
          
          # Apply XSLT to extract navigation from DITAMAP
          xsltproc extract-nav.xsl dita-source/automotive.ditamap > ./navigation-structure.json
          
          # Fix any JSON syntax issues
          sed -i 's/\\n//g; s/\\t//g; s/\\"//g; s/\\//g; s/  / /g' ./navigation-structure.json
          
          # Create a shell script to handle filename to id mapping
          cat > ./generate-id-map.sh << 'EOF'
          #!/bin/bash
          
          # Function to convert underscore filenames to hyphenated ids
          function filename_to_id() {
            local filename=$1
            echo "${filename//_/-}"
          }
          
          # Function to generate a title from an ID
          function id_to_title() {
            local id=$1
            # Replace hyphens with spaces and capitalize each word
            echo "$id" | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g'
          }
          
          # Ensure directory exists
          mkdir -p ./site/js
          
          # Generate ID to title mapping as JavaScript
          echo "// Auto-generated content ID mapping" > ./site/js/content-id-map.js
          echo "const contentIdMap = {" >> ./site/js/content-id-map.js
          
          # Process each HTML file in the site directory
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            filename=$(basename "$file" .html)
            id=$(filename_to_id "$filename")
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            
            # If no title found, generate one from the ID
            if [ -z "$title" ]; then
              title=$(id_to_title "$id")
            fi
            
            # Handle special characters for shell safety
            title=$(echo "$title" | sed 's/"/\\"/g')
            
            # Add to content map file directly
            echo "  \"$id\": { \"title\": \"$title\", \"filename\": \"$filename\" }," >> ./site/js/content-id-map.js
          done
          
          # Close the mapping object
          echo "  \"default\": { \"title\": \"Automotive Documentation\" }" >> ./site/js/content-id-map.js
          echo "};" >> ./site/js/content-id-map.js
          EOF
          
          chmod +x ./generate-id-map.sh
          
          echo "DITAMAP parsing complete"
          cat ./navigation-structure.json

      # Step 5: Transform DITA to HTML and prepare images with extensive debugging
      - name: Transform DITA to HTML and Prepare Images
        run: |
          # Using HTML5 format with parameters for better output
          ./dita-ot-4.0.2/bin/dita --input=dita-source/automotive.ditamap --format=html5 --output=./site
          echo "DITA transformation complete"
          
          # Create content directory for SPA fragments
          mkdir -p ./site/content
          mkdir -p ./site/images
          
          # List all DITA source content for debugging
          echo "Full content of dita-source directory:"
          find ./dita-source -type f | sort
          
          # Look for explicit image references in DITA files
          echo "Image references in DITA files:"
          grep -r "image href" ./dita-source --include="*.dita" || echo "No image hrefs found in DITA files"
          grep -r "<image" ./dita-source --include="*.dita" || echo "No image tags found in DITA files"
          
          # Extract image file information from DITA source
          echo "Extracting image references from DITA files:"
          grep -r "image href" ./dita-source --include="*.dita" | sed -E 's/.*href="([^"]*).*/\1/' > image-references.txt
          cat image-references.txt || echo "No image references extracted"
          
          # Copy all image files from dita-source to the images directory
          echo "Copying all potential image files from dita-source:"
          find ./dita-source -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -exec cp -v {} ./site/images/ \;
          
          # Also look for images in subdirectories
          find ./dita-source -type d -name "*images*" -o -name "*img*" | while read dir; do
            echo "Copying from image directory: $dir"
            cp -rv $dir/* ./site/images/ || echo "No files in $dir"
          done
          
          # Also handle images that might be in the output HTML
          echo "Finding image references in HTML output:"
          grep -r "img src" ./site --include="*.html" || echo "No direct img tags found"
          grep -r "image href" ./site --include="*.html" || echo "No image hrefs found"
          
          # Extract image paths from HTML output
          echo "Extracting image references from HTML files:"
          grep -r "img src" ./site --include="*.html" | sed -E 's/.*src="([^"]*).*/\1/' > html-image-refs.txt
          grep -r "image href" ./site --include="*.html" | sed -E 's/.*href="([^"]*).*/\1/' >> html-image-refs.txt
          cat html-image-refs.txt || echo "No HTML image references extracted"
          
          # Copy images from HTML output to images directory
          cat html-image-refs.txt | while read imgpath; do
            # Extract just the filename if it's a path
            filename=$(basename "$imgpath")
            # Find the source file
            find ./site -name "$filename" -exec cp -v {} ./site/images/ \;
          done
          
          # Find any image references in the HTML output and copy them
          find ./site -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -not -path "./site/images/*" -exec cp -v {} ./site/images/ \;
          
          # Also copy any files from potential 'img' directories
          if [ -d "./site/img" ]; then
            cp -rv ./site/img/* ./site/images/ || echo "No files in img directory"
          fi
          
          # Check any other potential image directories
          for imgdir in ./site/images ./site/img ./site/graphics ./site/assets; do
            if [ -d "$imgdir" ]; then
              echo "Contents of $imgdir:"
              ls -la $imgdir/
            fi
          done
          
          # Try to locate the specific images from the document
          echo "Looking for image files named 2.jpg and 3.jpg:"
          find . -name "2.jpg" -o -name "3.jpg" | sort
          
          # Create placeholder images for testing if no images are found
          if [ ! "$(ls -A ./site/images 2>/dev/null)" ]; then
            echo "Creating placeholder test images"
            # Use base64 encoded 1x1 pixel transparent PNG
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > ./site/images/test.png
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > ./site/images/2.jpg
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > ./site/images/3.jpg
          fi
          
          # Correct image file permissions
          chmod -R 644 ./site/images/* || echo "No files to change permissions"
          
          # List files in the images directory
          echo "Files in images directory:"
          ls -la ./site/images/ || echo "No files in images directory"
          
          # List all generated files
          echo "All generated files:"
          find ./site -type f | sort

      # Step 6: Process HTML files with improved image handling
      - name: Process HTML Content
        run: |
          # Create content directory for SPA fragments
          mkdir -p ./site/content
          mkdir -p ./site/js
          
          # Create a folder to store folder-based content
          mkdir -p ./site/content/folders
          
          # Dump HTML files to see what we're working with
          echo "HTML file samples for debugging:"
          find ./site -name "*.html" | head -n 1 | xargs cat | grep -A 5 -B 5 "img" || echo "No img tags found in sample"
          find ./site -name "*.html" | head -n 1 | xargs cat | grep -A 5 -B 5 "image" || echo "No image tags found in sample"

          # Process each HTML file to extract content
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            # Skip processing if this is the index.html we'll create later
            if [[ "$file" == "./site/index.html" ]]; then
              continue
            fi
            
            filename=$(basename "$file")
            id="${filename%.html}"
            hyphenated_id="${id//_/-}"
            echo "Processing $filename (ID: $id, Hyphenated ID: $hyphenated_id)"
            
            # Extract content from file 
            content=$(sed -n '/<body/,/<\/body>/p' "$file" | 
                     sed '/<body/d;/<\/body>/d' | 
                     sed '/<header/,/<\/header>/d' | 
                     sed '/<nav/,/<\/nav>/d' | 
                     sed '/<footer/,/<\/footer>/d')
            
            # Log original image references for debugging
            echo "Original image references in $filename:"
            echo "$content" | grep -o '<img [^>]*src="[^"]*"[^>]*>' || echo "No img tags found"
            echo "$content" | grep -o '<image [^>]*href="[^"]*"[^>]*>' || echo "No image tags found"
            
            # First convert DITA <image> tags to standard HTML <img> tags
            content=$(echo "$content" | sed -E 's/<image([^>]*)href="([^"]*)"([^>]*)>/<img\1src="\2"\3>/gi')
            
            # Fix various image paths to use base SPA image directory
            # 1. First handle img tags with more permissive regex
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="[^"]*\/([^\/"]*)\.([a-zA-Z0-9]+)"/<img\1src="images\/\2.\3"/gi')
            
            # 2. Fix remaining img paths that might just be filenames
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="([^\/:"]*)\.(jpg|jpeg|png|gif|svg)"/<img\1src="images\/\2.\3"/gi')
            
            # 3. Also handle images that might already have been correctly fixed
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="\/images\//<img\1src="images\//gi')
            
            # Log transformed image references
            echo "Transformed image references in $filename:"
            echo "$content" | grep -o '<img [^>]*src="[^"]*"[^>]*>' || echo "No img tags found after transformation"
            
            # Get title from the original file
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '_-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi
            
            # Determine parent folder (if any)
            parent_dir=$(dirname "$file" | xargs basename)
            if [[ "$parent_dir" != "site" ]]; then
              echo "File is in subdirectory: $parent_dir"
              # Create folder content path to handle nested structure
              mkdir -p "./site/content/$parent_dir"
              echo "$content" > "./site/content/$parent_dir/$id.html"
              echo "Created folder-based content: ./site/content/$parent_dir/$id.html"
              
              # Also create a path mapping entry
              echo "  \"$hyphenated_id\": { \"path\": \"$parent_dir/$id.html\" }," >> ./site/js/path-mapping.tmp
            fi
            
            # Create content file with original filename
            echo "$content" > "./site/content/$id.html"
            
            # Also create a hyphenated version
            if [[ "$id" != "$hyphenated_id" ]]; then
              echo "$content" > "./site/content/$hyphenated_id.html"
              echo "Created mapping: $id.html → $hyphenated_id.html"
            fi
          done
          
          # Create a mapping file directly
          echo "// Auto-generated content ID mapping" > ./site/js/content-id-map.js
          echo "const contentIdMap = {" >> ./site/js/content-id-map.js
          
          # Process each HTML file for the mapping
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            filename=$(basename "$file" .html)
            id="${filename//_/-}"
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            
            # Skip if already processed
            if grep -q "\"$id\":" ./site/js/content-id-map.js; then
              continue
            fi
            
            # If no title found, generate one from the ID
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi
            
            # Escape quotes in title
            title=$(echo "$title" | sed 's/"/\\"/g')
            
            echo "  \"$id\": { \"title\": \"$title\", \"filename\": \"$filename\" }," >> ./site/js/content-id-map.js
          done
          
          # Close the mapping object
          echo "  \"default\": { \"title\": \"Automotive Documentation\" }" >> ./site/js/content-id-map.js
          echo "};" >> ./site/js/content-id-map.js
          
          # Create path mapping if needed
          if [ -f "./site/js/path-mapping.tmp" ]; then
            echo "// Auto-generated path mapping" > ./site/js/path-mapping.js
            echo "const pathMapping = {" >> ./site/js/path-mapping.js
            cat ./site/js/path-mapping.tmp >> ./site/js/path-mapping.js
            echo "  \"default\": { \"path\": \"\" }" >> ./site/js/path-mapping.js
            echo "};" >> ./site/js/path-mapping.js
            rm ./site/js/path-mapping.tmp
          else
            echo "// Auto-generated path mapping" > ./site/js/path-mapping.js
            echo "const pathMapping = { \"default\": { \"path\": \"\" } };" >> ./site/js/path-mapping.js
          fi

      # Step 7: Generate Navigation Configuration
      - name: Generate Navigation Configuration
        run: |
          mkdir -p ./site/js ./site/css
          
          # Convert JSON to JavaScript navigation config
          cat > ./site/js/navigation-config.js << 'EOF'
          // Auto-generated navigation structure from DITAMAP
          const navigationConfig = 
          EOF
          
          # Append the parsed JSON structure
          cat ./navigation-structure.json >> ./site/js/navigation-config.js
          echo ";" >> ./site/js/navigation-config.js
          
          echo "Navigation configuration generated from DITAMAP structure"

      # Step 8: Create SPA CSS with improved navigation styling and search UI
      - name: Create SPA CSS
        run: |
          cat > ./site/css/style.css << 'EOF'
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            display: flex;
            height: 100vh;
            width: 100%;
            overflow: hidden;
          }
          
          .sidebar {
            width: 250px;
            background-color: #f5f5f5;
            padding: 20px;
            height: 100vh;
            overflow-y: auto;
            border-right: 1px solid #ddd;
            display: flex;
            flex-direction: column;
          }
          
          .main-content {
            flex: 1;
            padding: 20px;
            height: 100vh;
            overflow-y: auto;
          }
          
          .sidebar h2 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
          }
          
          /* Search bar styling */
          .search-container {
            margin-bottom: 20px;
            position: relative;
          }
          
          .search-input-wrap {
            position: relative;
            display: flex;
            margin-bottom: 5px;
          }
          
          #search-input {
            width: calc(100% - 90px);
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px 0 0 4px;
            font-size: 14px;
          }
          
          #search-button {
            padding: 8px 12px;
            background-color: #4a90e2;
            color: white;
            border: none;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
            margin-left: -1px;
            min-width: 70px;
            transition: all 0.2s ease;
          }
          
          #search-button:hover {
            background-color: #357abf;
          }
          
          #search-input:focus {
            outline: none;
            border-color: #ffd600;
            box-shadow: 0 0 0 2px rgba(255, 214, 0, 0.2);
          }
          
          .search-scope {
            display: flex;
            align-items: center;
            font-size: 12px;
            color: #666;
            margin-bottom: 10px;
          }
          
          .search-scope input {
            margin-right: 5px;
          }
          
          #search-results {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            max-height: 300px;
            overflow-y: auto;
            z-index: 100;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: none;
          }
          
          .search-result-item {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
          }
          
          .search-result-item:hover {
            background-color: #f5f5f5;
          }
          
          .search-result-item h4 {
            font-size: 14px;
            margin-bottom: 5px;
            color: #2c3e50;
          }
          
          .search-result-item p {
            font-size: 12px;
            color: #666;
            margin: 0;
          }
          
          .search-result-item strong {
            background-color: rgba(255, 230, 0, 0.4);
            font-weight: normal;
          }
          
          .search-no-results {
            padding: 15px;
            text-align: center;
            color: #666;
            font-style: italic;
          }
          
          /* Improved navigation styling for hierarchy */
          .sidebar-nav {
            flex: 1;
            overflow-y: auto;
          }
          
          .sidebar ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 5px;
          }
          
          .sidebar ul ul {
            padding-left: 20px;
            margin-top: 5px;
            margin-bottom: 0;
          }
          
          .sidebar li {
            margin-bottom: 5px;
            position: relative;
          }
          
          /* Toggle arrow styling */
          .sidebar .toggle-arrow {
            display: inline-block;
            width: 16px;
            height: 16px;
            position: absolute;
            left: 0;
            top: 5px;
            cursor: pointer;
            z-index: 10;
          }
          
          .sidebar .toggle-arrow:before {
            content: "▶";
            display: inline-block;
            font-size: 10px;
            transition: transform 0.2s;
          }
          
          .sidebar li.expanded > .toggle-arrow:before {
            transform: rotate(90deg);
          }
          
          .sidebar li.has-children > ul {
            display: none;
          }
          
          .sidebar li.has-children.expanded > ul {
            display: block;
          }
          
          .sidebar a {
            color: #2c3e50;
            text-decoration: none;
            display: block;
            padding: 5px 5px 5px 20px; /* Add left padding for arrow */
            border-radius: 4px;
            transition: background-color 0.2s;
            cursor: pointer;
            position: relative;
            transition: all 0.2s ease-out;
          }
          
          .sidebar a:hover {
            background-color: #e0e0e0;
          }
          
          .sidebar a.active {
            background-color: #dbeafe;
            font-weight: bold;
          }
          
          /* Content styling */
          .main-content h1, .main-content h2, .main-content h3 {
            margin-top: 1em;
            margin-bottom: 0.5em;
          }
          
          .main-content p {
            margin-bottom: 1em;
          }
          
          .main-content img {
            max-width: 100%;
            height: auto;
          }
          
          /* Fix for duplicate headings */
          .main-content h1:first-child + h1 {
            display: none;
          }
          
          /* Loading state */
          #loading {
            display: none;
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
          }
          
          .loading #loading {
            display: block;
          }
          
          /* Error state */
          .error {
            background-color: #fff8f8;
            border-left: 4px solid #e74c3c;
            padding: 15px;
            margin-bottom: 20px;
            color: #333;
          }
          
          .error h2 {
            color: #e74c3c;
            margin-top: 0;
          }
          
          /* Welcome screen styling */
          .welcome-screen {
            text-align: center;
            padding: 40px 20px;
          }
          
          .welcome-screen h2 {
            margin-bottom: 20px;
          }
          
          /* Search results in main content area */
          .search-results-container {
            padding: 10px 0;
            max-width: 800px;
            margin: 0 auto;
          }
          
          .search-results-count {
            margin-bottom: 20px;
            color: #666;
            font-style: italic;
          }
          
          .search-results-list {
            display: flex;
            flex-direction: column;
            gap: 20px;
          }
          
          .content-search-result {
            padding: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            transition: all 0.2s ease;
            margin-bottom: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
          }
          
          .content-search-result:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
            border-color: #ccc;
          }
          
          .content-search-result h3 {
            margin-top: 0;
            margin-bottom: 10px;
          }
          
          .content-search-result a {
            color: #4a90e2;
            text-decoration: none;
          }
          
          .content-search-result a:hover {
            text-decoration: underline;
          }
          
          .search-result-excerpt {
            color: #555;
            font-size: 14px;
            line-height: 1.5;
            margin-top: 8px;
          }
          
          .search-result-excerpt strong {
            background-color: #fff59d;
            padding: 2px 0;
            font-weight: bold;
            border-radius: 2px;
          }
          
          /* Loading indicator for search index */
          .loading-indicator {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 20px 0;
          }
          
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
          
          .loading-indicator div {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #eee;
            border-radius: 50%;
            border-top-color: #4a90e2;
            animation: spin 1s linear infinite;
          }
          
          /* Search feedback notification */
          .search-feedback {
            position: fixed;
            bottom: 20px;
            left: 20px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 10px 15px;
            border-radius: 4px;
            font-size: 14px;
            z-index: 1000;
            max-width: 250px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            display: none;
            animation: fadeInOut 3s ease-in-out;
          }
          
          @keyframes fadeInOut {
            0% { opacity: 0; }
            10% { opacity: 1; }
            90% { opacity: 1; }
            100% { opacity: 0; }
          }
          
          /* Loading indicator for background processing */
          .search-status-indicator {
            display: inline-block;
            margin-left: 8px;
            font-size: 11px;
            color: #777;
            margin-top: 10px;
          }
          
          .search-status-indicator .dot {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: #4a90e2;
            margin-right: 4px;
            animation: pulse 1.5s infinite;
          }
          
          /* Throbber animation for loading */
          @keyframes pulse {
            0% { opacity: 0.2; transform: scale(0.8); }
            50% { opacity: 1; transform: scale(1); }
            100% { opacity: 0.2; transform: scale(0.8); }
          }
          
          /* Make sidebar items stand out more during search */
          .sidebar a.quick-match {
            background-color: #fffde7;
            border-left: 3px solid #ffd600;
            padding-left: 17px;
            margin-left: -3px;
            animation: highlight-pulse 2s infinite;
          }
          
          .sidebar a.quick-match:hover {
            background-color: #fff8c4;
          }
          
          /* Item highlight animation */
          @keyframes highlight-pulse {
            0% { background-color: #fffde7; }
            50% { background-color: #fff8c4; }
            100% { background-color: #fffde7; }
          }
          
          /* Highlighted match text */
          .highlight-match {
            background-color: #fff59d;
            padding: 2px 0;
            font-weight: bold;
            border-radius: 2px;
            box-shadow: 0 0 0 2px #fff59d;
          }
          
          /* Active search styling */
          .sidebar a.active.quick-match {
            background-color: #fff8e1 !important;
            border-left: 3px solid #ffd600 !important;
          }
          
          /* Show more prominent loading indicator in search status */
          #search-status {
            position: relative;
            padding: 10px;
            border-radius: 4px;
            margin-top: 15px;
            background-color: #f0f4f8;
            border-left: 3px solid #4a90e2;
          }
          
          /* Responsive design for mobile */
          @media (max-width: 768px) {
            body {
              flex-direction: column;
              height: auto;
            }
            
            .sidebar {
              width: 100%;
              height: auto;
              max-height: 40vh;
            }
            
            .main-content {
              height: auto;
              min-height: 60vh;
            }
            
            #search-results {
              position: fixed;
              top: auto;
              left: 10px;
              right: 10px;
              max-height: 50vh;
            }
          }
          EOF

      # Step 9: Create SPA JavaScript Application with auto-generated navigation
      - name: Create SPA Application
        run: |
          cat > ./site/js/app.js << 'EOF'
          // SPA Application with dynamic navigation from DITAMAP
          
          // DOM Elements
          const contentEl = document.getElementById('content');
          const contentTitleEl = document.getElementById('content-title');
          const navigationEl = document.getElementById('navigation');
          
          // Base path handling for GitHub Pages
          const getBasePath = () => {
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) {
                return '/' + pathSegments[1];
              }
            }
            return '';
          };
          
          // Current state
          window.currentPage = null; // Make it available globally
          const basePath = getBasePath();
          
          // Debug logging function
          function debug(message, data) {
            console.log(`[DITA-SPA] ${message}`, data || '');
          }
          
          // Initialize the application
          function initApp() {
            debug('Initializing app with base path:', basePath);
            
            // Render navigation
            renderNavigation(navigationConfig);
            
            // Set up event listeners
            window.addEventListener('popstate', handlePopState);
            
            // Check if we have a hash in the URL
            const initialPageId = getPageIdFromUrl();
            
            if (initialPageId) {
              // If we have a page ID in the URL, load that page
              navigateToPage(initialPageId, false);
            } else {
              // Otherwise, show a welcome screen
              showWelcomeScreen();
            }
          }
          
          // Function to show welcome screen
          function showWelcomeScreen() {
            contentTitleEl.textContent = 'Documentation';
            document.title = 'Automotive Documentation';
            
            contentEl.innerHTML = `
              <div class="welcome-screen">
                <h2>Welcome to Automotive Documentation</h2>
                <p>Please select a topic from the navigation menu or use the search bar to find specific information.</p>
              </div>
            `;
            
            document.body.classList.remove('loading');
          }
          
          // Render the navigation menu with hierarchy
          function renderNavigation(items, parentEl = navigationEl) {
            const ul = document.createElement('ul');
            
            items.forEach(item => {
              const li = document.createElement('li');
              
              // Add class if item has children
              if (item.children && item.children.length > 0) {
                li.classList.add('has-children');
                
                // Create a toggle arrow element
                const toggle = document.createElement('span');
                toggle.className = 'toggle-arrow';
                toggle.addEventListener('click', (e) => {
                  e.stopPropagation();
                  li.classList.toggle('expanded');
                });
                li.appendChild(toggle);
              }
              
              const a = document.createElement('a');
              a.textContent = item.title;
              a.setAttribute('data-id', item.id);
              a.href = `#${item.id}`;
              
              // Click handler for navigation items
              a.addEventListener('click', (e) => {
                e.preventDefault();
                
                // If this is a parent item with children, toggle expansion
                if (item.children && item.children.length > 0) {
                  li.classList.toggle('expanded');
                }
                
                // Always navigate to the page
                navigateToPage(item.id);
              });
              
              li.appendChild(a);
              
              // Recursively render children if any
              if (item.children && item.children.length > 0) {
                renderNavigation(item.children, li);
              }
              
              ul.appendChild(li);
            });
            
            parentEl.appendChild(ul);
          }
          
          // Expand navigation path to the current page
          function expandNavigationTo(pageId) {
            // Helper to search for a page in the navigation tree
            function findPageInNavigation(items, id, path = []) {
              for (let i = 0; i < items.length; i++) {
                const item = items[i];
                const currentPath = [...path, item];
                
                if (item.id === id) {
                  return currentPath;
                }
                
                if (item.children && item.children.length > 0) {
                  const result = findPageInNavigation(item.children, id, currentPath);
                  if (result) {
                    return result;
                  }
                }
              }
              
              return null;
            }
            
            // Find the path to the page
            const path = findPageInNavigation(navigationConfig, pageId);
            if (!path) return;
            
            // Expand all parent items in the path
            for (let i = 0; i < path.length - 1; i++) {
              const item = path[i];
              const li = document.querySelector(`.sidebar li a[data-id="${item.id}"]`).parentElement;
              li.classList.add('expanded');
            }
          }
          
          // Navigate to a specific page
          function navigateToPage(pageId, pushState = true) {
            debug('Navigating to page:', pageId);
            
            // Update active state in navigation
            updateActiveNavItem(pageId);
            
            // Expand navigation to show the current page
            expandNavigationTo(pageId);
            
            // Update the URL
            if (pushState) {
              history.pushState({ pageId }, '', `#${pageId}`);
            }
            
            // Show loading indicator
            document.body.classList.add('loading');
            
            // Update current page
            window.currentPage = pageId;
            
            // Get filename from ID (using contentIdMap if available)
            let contentFileName = pageId;
            if (window.contentIdMap && contentIdMap[pageId] && contentIdMap[pageId].filename) {
              contentFileName = contentIdMap[pageId].filename;
            }
            
            // Try both hyphenated and underscore versions
            loadContent(pageId)
              .then(content => {
                // Update title
                const title = getPageTitle(pageId);
                contentTitleEl.textContent = title;
                document.title = title;
                
                // Fix for duplicate headings
                if (content.includes(`<h1>${title}</h1>`)) {
                  content = content.replace(`<h1>${title}</h1>`, '');
                }
                
                // Update content
                contentEl.innerHTML = content;
                
                // Hide loading indicator
                document.body.classList.remove('loading');
                debug('Content loaded successfully');
              })
              .catch(error => {
                debug('Error loading with ID, trying original filename:', contentFileName);
                // Try with original filename if different from ID
                if (contentFileName !== pageId) {
                  loadContent(contentFileName)
                    .then(content => {
                      contentTitleEl.textContent = getPageTitle(pageId);
                      document.title = getPageTitle(pageId);
                      contentEl.innerHTML = content;
                      document.body.classList.remove('loading');
                      debug('Content loaded from original filename');
                    })
                    .catch(altError => {
                      showErrorContent(pageId);
                    });
                } else {
                  showErrorContent(pageId);
                }
              });
          }
          
          // Show error content when page cannot be loaded
          function showErrorContent(pageId) {
            console.error('Failed to load content:', pageId);
            contentEl.innerHTML = `
              <div class="error">
                <h2>Content Not Found</h2>
                <p>The requested content "${pageId}" could not be loaded.</p>
                <p>Please select another topic from the navigation menu.</p>
              </div>
            `;
            document.body.classList.remove('loading');
          }
          
          // Load content for a page
          async function loadContent(pageId) {
            const contentPath = `${basePath}/content/${pageId}.html`;
            debug('Fetching from URL:', contentPath);
            
            const response = await fetch(contentPath);
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return await response.text();
          }
          
          // Update active state in navigation
          function updateActiveNavItem(pageId) {
            // Remove active class from all nav items
            const allNavItems = document.querySelectorAll('.sidebar a');
            allNavItems.forEach(item => item.classList.remove('active'));
            
            // Add active class to current page nav item
            const activeItem = document.querySelector(`.sidebar a[data-id="${pageId}"]`);
            if (activeItem) {
              activeItem.classList.add('active');
              
              // Make sure the parents are expanded
              let parent = activeItem.parentElement;
              while (parent && !parent.classList.contains('sidebar')) {
                if (parent.classList.contains('has-children')) {
                  parent.classList.add('expanded');
                }
                parent = parent.parentElement;
              }
            }
          }
          
          // Handle popstate event (browser back/forward)
          function handlePopState(event) {
            const pageId = event.state?.pageId || getPageIdFromUrl() || navigationConfig[0].id;
            debug('Popstate event, loading page:', pageId);
            navigateToPage(pageId, false);
          }
          
          // Get page ID from URL hash
          function getPageIdFromUrl() {
            return window.location.hash.substring(1) || null;
          }
          
          // Get page title from content manifest
          function getPageTitle(pageId) {
            // First try contentIdMap
            if (window.contentIdMap && contentIdMap[pageId]) {
              return contentIdMap[pageId].title;
            }
            
            // Then try navigation config
            function findTitleInNav(items, id) {
              for (const item of items) {
                if (item.id === id) {
                  return item.title;
                }
                if (item.children && item.children.length > 0) {
                  const title = findTitleInNav(item.children, id);
                  if (title) return title;
                }
              }
              return null;
            }
            
            const navTitle = findTitleInNav(navigationConfig, pageId);
            if (navTitle) return navTitle;
            
            // Fallback: generate title from ID
            return pageId.split(/-|_/).map(word => 
              word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
          }
          
          // Make navigateToPage available globally
          window.navigateToPage = navigateToPage;
          
          // Initialize the app when DOM is ready
          document.addEventListener('DOMContentLoaded', initApp);
          EOF

      # Step 10: Create Search JavaScript
      - name: Create Search JavaScript
        run: |
          cat > ./site/js/search-index.js << 'EOF'
          // This file will be populated at runtime by the search.js script
          const searchIndexData = {};
          EOF
          
          cat > ./site/js/search.js << 'EOF'
          // Lightweight Search Implementation for DITA SPA
          let searchIndex = {};
          let searchIndexReady = true; // Always ready because we use titles first

          // Initialize search functionality
          function initSearch() {
            const searchInput = document.getElementById('search-input');
            const searchButton = document.getElementById('search-button');
            
            console.log('[DITA-SPA] Initializing lightweight search');
            
            // Add event listeners
            searchInput.addEventListener('keydown', function(e) {
              if (e.key === 'Enter') {
                performSearch();
              }
            });
            
            searchInput.addEventListener('input', function() {
              highlightNavigationMatches(this.value.trim());
            });
            
            searchButton.addEventListener('click', performSearch);
            
            // Update welcome screen to show search is active
            updateWelcomeScreen();
            
            // Create lightweight search index just from navigation
            createLightweightIndex();
            
            // Start content indexing in the background with low priority
            setTimeout(() => {
              // This will run after the UI is responsive
              enhanceSearchIndexInBackground();
            }, 2000);
          }

          // Update welcome screen with search info
          function updateWelcomeScreen() {
            const contentEl = document.getElementById('content');
            if (!contentEl) return;
            
            const welcomeScreen = contentEl.querySelector('.welcome-screen');
            if (welcomeScreen) {
              const statusDiv = document.createElement('div');
              statusDiv.id = 'search-status';
              statusDiv.innerHTML = `
                <p>Search is ready! Type to highlight matches in navigation, press Enter or click Search to view full results.</p>
                <div class="search-status-indicator">
                  <span>Full content indexing in progress</span>
                  <span class="dot"></span>
                  <span class="dot"></span>
                  <span class="dot"></span>
                </div>
              `;
              welcomeScreen.appendChild(statusDiv);
            }
          }

          // Create a lightweight search index just from navigation items
          function createLightweightIndex() {
            if (!window.navigationConfig || !Array.isArray(window.navigationConfig)) {
              console.error('[DITA-SPA] Navigation configuration missing');
              return;
            }
            
            function processItems(items) {
              items.forEach(item => {
                if (!item || !item.id) return;
                
                // Create a simple index entry with just the title
                searchIndex[item.id] = {
                  id: item.id,
                  title: item.title || 'Untitled',
                  content: item.title || 'Untitled', // Initially just title
                  filename: item.filename || item.id
                };
                
                // Process children recursively
                if (item.children && item.children.length > 0) {
                  processItems(item.children);
                }
              });
            }
            
            // Process all navigation items
            processItems(window.navigationConfig);
            console.log(`[DITA-SPA] Lightweight index created with ${Object.keys(searchIndex).length} items`);
          }

          // Highlight matching items in the navigation panel
          function highlightNavigationMatches(term) {
            if (!term) {
              // Clear all highlights if term is empty
              clearNavigationHighlights();
              return;
            }
            
            const navItems = document.querySelectorAll('.sidebar a');
            let matches = 0;
            
            // First clear existing highlights
            clearNavigationHighlights();
            
            // Then add new highlights
            navItems.forEach(item => {
              const title = item.textContent.toLowerCase();
              
              if (title.includes(term.toLowerCase())) {
                matches++;
                // Add highlight class
                item.classList.add('quick-match');
                
                // Highlight the matching text portion
                try {
                  const regex = new RegExp(`(${escapeRegExp(term)})`, 'gi');
                  item.innerHTML = item.textContent.replace(
                    regex, 
                    '<span class="highlight-match">$1</span>'
                  );
                } catch (e) {
                  // Fall back to simple class-based highlighting if regex fails
                  console.warn('Regex highlight failed:', e);
                }
                
                // Expand parent folders
                expandParents(item);
              }
            });
            
            // Show feedback
            if (matches > 0) {
              showFeedback(`Found ${matches} matching topics`);
            } else {
              showFeedback('No matching topics found');
            }
          }

          // Helper function to escape regex special characters
          function escapeRegExp(string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, '\\# Step 10: Create Search JavaScript
      - name: Create Search JavaScript
        run: |
          cat > ./site/js/search-index.js << 'EOF'
          // This file will be populated at runtime by the search.js script
          const searchIndexData = {};
          EOF
          
          cat > ./site/js/search.js << 'EOF'
          // Search functionality for DITA SPA
          let searchIndex = {};
          let contentCache = {};
          let searchIndexReady = false;
          let searchIndexError = false;

          // Initialize search functionality
          function initSearch() {
            const searchInput = document.getElementById('search-input');
            const searchButton = document.getElementById('search-button');
            
            // Log initialization
            console.log('[DITA-SPA] Initializing search functionality');
            
            // Add event listeners
            searchInput.addEventListener('keydown', function(e) {
              if (e.key === 'Enter') {
                performSearch();
              }
            });
            
            searchButton.addEventListener('click', performSearch);
            
            // Status indicator for debugging
            const contentEl = document.getElementById('content');
            const statusHtml = `
              <div class="welcome-screen">
                <h2>Welcome to Automotive Documentation</h2>
                <p>Please select a topic from the navigation menu or use the search bar to find specific information.</p>
                <div id="search-status" style="margin-top: 20px; font-size: 12px; color: #666;">
                  <p>Search index is building... This may take a moment.</p>
                </div>
              </div>
            `;
            
            // Only update if we're on the welcome screen
            if (contentEl.querySelector('.welcome-screen')) {
              contentEl.innerHTML = statusHtml;
            }
            
            // Create search index from navigation structure
            createSearchIndexFromNavigation();
          }

          // Create a basic search index from navigation structure with better error handling
          function createSearchIndexFromNavigation() {
            console.log('[DITA-SPA] Starting to build search index from navigation');
            
            if (!window.navigationConfig || !Array.isArray(window.navigationConfig)) {
              console.error('[DITA-SPA] Navigation configuration is missing or invalid');
              searchIndexError = true;
              updateSearchStatus('Search index failed: Navigation data is missing');
              return;
            }
            
            try {
              // Process items recursively
              function processItems(items) {
                items.forEach(item => {
                  if (!item || !item.id) {
                    console.warn('[DITA-SPA] Invalid navigation item:', item);
                    return;
                  }
                  
                  // Add item to search index
                  searchIndex[item.id] = {
                    id: item.id,
                    title: item.title || 'Untitled',
                    content: item.title || 'Untitled', // Initially just use title as content
                    filename: item.filename || item.id
                  };
                  
                  // Log item added
                  console.log(`[DITA-SPA] Added to search index: ${item.id} - ${item.title}`);
                  
                  // Process children if any
                  if (item.children && item.children.length > 0) {
                    processItems(item.children);
                  }
                });
              }
              
              // Process all navigation items
              processItems(window.navigationConfig);
              
              // Update status
              console.log(`[DITA-SPA] Navigation processed, found ${Object.keys(searchIndex).length} items`);
              updateSearchStatus(`Processing ${Object.keys(searchIndex).length} content items...`);
              
              // Pre-fetch content for search indexing
              prefetchContent();
            } catch (error) {
              console.error('[DITA-SPA] Error building search index:', error);
              searchIndexError = true;
              updateSearchStatus('Search index failed: ' + error.message);
            }
          }

          // Update search status display
          function updateSearchStatus(message) {
            const statusEl = document.getElementById('search-status');
            if (statusEl) {
              statusEl.innerHTML = `<p>${message}</p>`;
            }
          }

          // Load content for a page with improved error handling
          async function fetchContentForSearch(pageId) {
            try {
              const basePath = getBasePathForSearch();
              const contentPath = `${basePath}/content/${pageId}.html`;
              
              console.log(`[DITA-SPA] Fetching content for search index: ${contentPath}`);
              
              const response = await fetch(contentPath);
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status} for ${contentPath}`);
              }
              
              return await response.text();
            } catch (error) {
              console.warn(`[DITA-SPA] Failed to fetch content for ${pageId}:`, error);
              // Return empty string instead of null to prevent further errors
              return "";
            }
          }

          // Get base path helper function
          function getBasePathForSearch() {
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) {
                return '/' + pathSegments[1];
              }
            }
            return '';
          }

          // Pre-fetch content for search indexing with improved error handling and progress tracking
          async function prefetchContent() {
            const ids = Object.keys(searchIndex);
            console.log(`[DITA-SPA] Starting content prefetch for ${ids.length} items`);
            
            let completed = 0;
            const updateProgress = () => {
              completed++;
              if (completed % 5 === 0 || completed === ids.length) {
                const percentage = Math.round((completed / ids.length) * 100);
                updateSearchStatus(`Building search index: ${percentage}% complete (${completed}/${ids.length})`);
                console.log(`[DITA-SPA] Search index build progress: ${percentage}%`);
              }
            };
            
            // Process in batches to avoid overwhelming the browser
            const batchSize = 5;
            let indexSize = 0;
            
            for (let i = 0; i < ids.length; i += batchSize) {
              const batch = ids.slice(i, i + batchSize);
              await Promise.all(batch.map(async (id) => {
                try {
                  const content = await fetchContentForSearch(id);
                  
                  // Store in cache
                  contentCache[id] = content;
                  
                  // Skip if content is empty
                  if (!content) {
                    console.warn(`[DITA-SPA] Empty content for ${id}, using title only`);
                    updateProgress();
                    return;
                  }
                  
                  // Extract text content for search
                  const tempDiv = document.createElement('div');
                  tempDiv.innerHTML = content;
                  const textContent = tempDiv.textContent || tempDiv.innerText || '';
                  
                  // Calculate content size for logging
                  indexSize += textContent.length;
                  
                  // Update search index with actual content
                  searchIndex[id].content = textContent;
                  console.log(`[DITA-SPA] Added content for ${id}: ${textContent.length} characters`);
                } catch (error) {
                  console.error(`[DITA-SPA] Error processing content for ${id}:`, error);
                } finally {
                  updateProgress();
                }
              }));
            }
            
            searchIndexReady = true;
            console.log(`[DITA-SPA] Search index created with ${Object.keys(searchIndex).length} entries, total size: ${Math.round(indexSize / 1024)}KB`);
            updateSearchStatus(`Search index complete with ${Object.keys(searchIndex).length} articles`);
            
            // Trigger an initial search if there's a value in the search box
            const searchInput = document.getElementById('search-input');
            if (searchInput && searchInput.value.trim()) {
              performSearch();
            }
          }

          // Perform the search with better error handling
          function performSearch() {
            const searchInput = document.getElementById('search-input');
            const searchTerm = searchInput.value.trim().toLowerCase();
            
            console.log(`[DITA-SPA] Search requested for: "${searchTerm}"`);
            
            if (!searchTerm) {
              console.log('[DITA-SPA] Empty search term, ignoring');
              return;
            }
            
            // Check if search index is ready
            if (!searchIndexReady) {
              console.log('[DITA-SPA] Search index not ready yet, showing message');
              displaySearchResults([], searchTerm, true);
              return;
            }
            
            // Capture search scope setting
            const searchScope = document.getElementById('search-toggle').checked;
            console.log(`[DITA-SPA] Search scope: ${searchScope ? 'current article only' : 'all content'}`);
            
            try {
              // If search scope is checked, only search current article
              if (searchScope && window.currentPage) {
                console.log(`[DITA-SPA] Searching only current page: ${window.currentPage}`);
                const results = searchInPage(window.currentPage, searchTerm);
                if (results) {
                  displaySearchResults([results], searchTerm);
                } else {
                  displaySearchResults([], searchTerm);
                }
              } else {
                // Search all content
                console.log('[DITA-SPA] Searching all content');
                const results = searchAllContent(searchTerm);
                console.log(`[DITA-SPA] Found ${results.length} results`);
                displaySearchResults(results, searchTerm);
              }
            } catch (error) {
              console.error('[DITA-SPA] Error during search:', error);
              displaySearchError(searchTerm, error);
            }
          }

          // Search within a specific page
          function searchInPage(pageId, term) {
            if (!searchIndex[pageId]) {
              console.warn(`[DITA-SPA] Page not found in search index: ${pageId}`);
              return null;
            }
            
            const item = searchIndex[pageId];
            const titleLower = (item.title || '').toLowerCase();
            const contentLower = (item.content || '').toLowerCase();
            
            if (contentLower.includes(term) || titleLower.includes(term)) {
              return {
                id: item.id,
                title: item.title,
                score: calculateScore(item, term),
                excerpt: generateExcerpt(contentLower, term)
              };
            }
            
            return null;
          }

          // Search all content with improved error handling
          function searchAllContent(term) {
            const results = [];
            const searchKeys = Object.keys(searchIndex);
            
            console.log(`[DITA-SPA] Searching across ${searchKeys.length} items for "${term}"`);
            
            let matchCount = 0;
            for (const id of searchKeys) {
              const item = searchIndex[id];
              const titleLower = (item.title || '').toLowerCase();
              const contentLower = (item.content || '').toLowerCase();
              
              if (contentLower.includes(term) || titleLower.includes(term)) {
                matchCount++;
                results.push({
                  id: item.id,
                  title: item.title,
                  score: calculateScore(item, term),
                  excerpt: generateExcerpt(contentLower, term)
                });
              }
            }
            
            // Sort results by score
            results.sort((a, b) => b.score - a.score);
            
            console.log(`[DITA-SPA] Found ${matchCount} matches for "${term}"`);
            return results;
          }

          // Calculate search relevance score
          function calculateScore(item, term) {
            let score = 0;
            const titleLower = (item.title || '').toLowerCase();
            const contentLower = (item.content || '').toLowerCase();
            
            // Higher score for title matches
            if (titleLower === term) {
              score += 100;
            } else if (titleLower.includes(term)) {
              score += 50;
            }
            
            // Score based on content matches
            const contentMatches = (contentLower.split(term).length - 1) || 0;
            score += contentMatches;
            
            return score;
          }

          // Generate a search result excerpt with improved error handling
          function generateExcerpt(content, term) {
            if (!content || typeof content !== 'string') {
              return 'No content preview available';
            }
            
            const index = content.indexOf(term);
            if (index === -1) return 'Content match found but context not available';
            
            const start = Math.max(0, index - 50);
            const end = Math.min(content.length, index + term.length + 50);
            let excerpt = content.substring(start, end);
            
            if (start > 0) excerpt = '...' + excerpt;
            if (end < content.length) excerpt += '...';
            
            // Highlight the search term
            try {
              return excerpt.replace(new RegExp(term, 'gi'), match => `<strong>${match}</strong>`);
            } catch (error) {
              console.warn('[DITA-SPA] Error highlighting search term:', error);
              return excerpt;
            }
          }

          // Display search error
          function displaySearchError(searchTerm, error) {
            const contentEl = document.getElementById('content');
            const contentTitleEl = document.getElementById('content-title');
            
            contentTitleEl.textContent = `Search Error`;
            document.title = `Search Error`;
            
            contentEl.innerHTML = `
              <div class="error">
                <h2>Search Error</h2>
                <p>An error occurred while searching for "${searchTerm}".</p>
                <p>Error details: ${error.message}</p>
                <p>Please try a different search term or browse topics from the navigation menu.</p>
              </div>
            `;
          }

          // Display search results in the main content area with improved error handling
          function displaySearchResults(results, searchTerm, stillIndexing = false) {
            const contentEl = document.getElementById('content');
            const contentTitleEl = document.getElementById('content-title');
            
            // Update page title
            contentTitleEl.textContent = `Search Results for "${searchTerm}"`;
            document.title = `Search Results - ${searchTerm}`;
            
            // If still indexing
            if (stillIndexing) {
              contentEl.innerHTML = `
                <div class="search-results-container">
                  <p class="search-results-count">Building search index, please wait...</p>
                  <p>The search index is still being built. Your search will be processed as soon as it's ready.</p>
                  <div class="loading-indicator" style="text-align: center; margin: 20px 0;">
                    <div style="display: inline-block; width: 20px; height: 20px; border: 3px solid #ddd; border-radius: 50%; border-top-color: #4a90e2; animation: spin 1s linear infinite;"></div>
                  </div>
                  <style>@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }</style>
                </div>
              `;
              return;
            }
            
            // If search index had errors
            if (searchIndexError) {
              contentEl.innerHTML = `
                <div class="search-results-container">
                  <p class="search-no-results">Unable to search: The search index could not be built correctly.</p>
                  <p>Please browse topics from the navigation menu instead, or reload the page to try again.</p>
                </div>
              `;
              return;
            }
            
            // Log result count
            console.log(`[DITA-SPA] Displaying ${results.length} search results for "${searchTerm}"`);
            
            // Filter out null results
            const validResults = results.filter(result => result !== null);
            
            // No results found
            if (validResults.length === 0) {
              contentEl.innerHTML = `
                <div class="search-results-container">
                  <p class="search-no-results">No results found for "${searchTerm}".</p>
                  <p>Try a different search term or browse topics from the navigation menu.</p>
                  <ul style="margin-top: 20px; margin-left: 20px;">
                    <li>Check your spelling</li>
                    <li>Try more general keywords</li>
                    <li>Try different keywords</li>
                  </ul>
                </div>
              `;
              return;
            }
            
            // Build HTML for search results
            try {
              let resultsHtml = `
                <div class="search-results-container">
                  <p class="search-results-count">Found ${validResults.length} result${validResults.length !== 1 ? 's' : ''} for "${searchTerm}"</p>
                  <div class="search-results-list">
              `;
              
              validResults.forEach(result => {
                resultsHtml += `
                  <div class="content-search-result" data-id="${result.id}">
                    <h3><a href="#${result.id}" class="search-result-link">${result.title || 'Untitled'}</a></h3>
                    <p class="search-result-excerpt">${result.excerpt || 'No preview available'}</p>
                  </div>
                `;
              });
              
              resultsHtml += `
                  </div>
                </div>
              `;
              
              contentEl.innerHTML = resultsHtml;
              
              // Add click handlers to search result links
              document.querySelectorAll('.search-result-link').forEach(link => {
                link.addEventListener('click', function(e) {
                  e.preventDefault();
                  const id = this.closest('.content-search-result').getAttribute('data-id');
                  console.log(`[DITA-SPA] Search result clicked: ${id}`);
                  
                  if (typeof window.navigateToPage === 'function') {
                    window.navigateToPage(id);
                  } else {
                    // Fallback if function isn't available
                    console.warn('[DITA-SPA] navigateToPage function not available, using location.hash fallback');
                    window.location.hash = id;
                  }
                });
              });
            } catch (error) {
              console.error('[DITA-SPA] Error rendering search results:', error);
              contentEl.innerHTML = `
                <div class="error">
                  <h2>Error Displaying Results</h2>
                  <p>An error occurred while displaying search results.</p>
                  <p>Error details: ${error.message}</p>
                </div>
              `;
            }
          }

          // Initialize search when DOM is ready
          document.addEventListener('DOMContentLoaded', function() {
            console.log('[DITA-SPA] DOM loaded, initializing search');
            initSearch();
          });
          EOF');
          }

          // Clear all navigation highlights
          function clearNavigationHighlights() {
            const navItems = document.querySelectorAll('.sidebar a');
            navItems.forEach(item => {
              item.classList.remove('quick-match');
              // Restore original text content
              const text = item.textContent;
              item.innerHTML = text;
            });
          }

          // Expand all parent folders of a navigation item
          function expandParents(item) {
            let parent = item.parentElement;
            while (parent && !parent.classList.contains('sidebar')) {
              if (parent.classList.contains('has-children')) {
                parent.classList.add('expanded');
              }
              parent = parent.parentElement;
            }
          }

          // Show user feedback
          function showFeedback(message) {
            let feedback = document.getElementById('search-feedback');
            if (!feedback) {
              feedback = document.createElement('div');
              feedback.id = 'search-feedback';
              feedback.className = 'search-feedback';
              document.body.appendChild(feedback);
            }
            
            feedback.textContent = message;
            feedback.style.display = 'block';
            
            // Hide after 3 seconds
            setTimeout(() => {
              feedback.style.display = 'none';
            }, 3000);
          }

          // Perform search based on the current search term
          function performSearch() {
            const searchInput = document.getElementById('search-input');
            const searchTerm = searchInput.value.trim();
            
            if (!searchTerm) return;
            
            console.log(`[DITA-SPA] Searching for: ${searchTerm}`);
            
            // Check if we're only searching current page
            const searchScope = document.getElementById('search-toggle').checked;
            
            // Get all matches from the search index
            const results = [];
            
            if (searchScope && window.currentPage) {
              // Search only in current page
              const id = window.currentPage;
              const item = searchIndex[id];
              
              if (item && (item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                  item.content.toLowerCase().includes(searchTerm.toLowerCase()))) {
                  
                // Add the single result
                results.push(buildSearchResult(id, item, searchTerm));
              }
            } else {
              // Search all content
              for (const id in searchIndex) {
                const item = searchIndex[id];
                if (item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    item.content.toLowerCase().includes(searchTerm.toLowerCase())) {
                  
                  // Add this result  
                  results.push(buildSearchResult(id, item, searchTerm));
                }
              }
            }
            
            // Sort results by score
            results.sort((a, b) => b.score - a.score);
            
            // Display results
            displaySearchResults(results, searchTerm);
          }

          // Build a search result object
          function buildSearchResult(id, item, searchTerm) {
            // Calculate a basic relevance score
            let score = 0;
            if (item.title.toLowerCase().includes(searchTerm.toLowerCase())) {
              score += 10; // Title matches are higher priority
            }
            if (item.content.toLowerCase().includes(searchTerm.toLowerCase())) {
              score += 1;
            }
            
            // Create excerpt
            let excerpt = '';
            const content = item.content.toLowerCase();
            const index = content.indexOf(searchTerm.toLowerCase());
            if (index !== -1) {
              const start = Math.max(0, index - 40);
              const end = Math.min(content.length, index + searchTerm.length + 40);
              excerpt = '...' + content.substring(start, end) + '...';
              // Highlight the search term
              excerpt = excerpt.replace(
                new RegExp(escapeRegExp(searchTerm), 'gi'), 
                match => `<strong>${match}</strong>`
              );
            } else {
              excerpt = item.title;
            }
            
            return {
              id: id,
              title: item.title,
              excerpt: excerpt,
              score: score
            };
          }

          // Display search results in the main content area
          function displaySearchResults(results, searchTerm) {
            const contentEl = document.getElementById('content');
            const titleEl = document.getElementById('content-title');
            
            titleEl.textContent = `Search Results for "${searchTerm}"`;
            document.title = `Search Results - ${searchTerm}`;
            
            if (results.length === 0) {
              contentEl.innerHTML = `
                <div class="search-results-container">
                  <p class="search-no-results">No results found for "${searchTerm}".</p>
                  <p>Try a different search term or browse topics from the navigation menu.</p>
                  <ul style="margin-top: 20px; margin-left: 20px;">
                    <li>Check your spelling</li>
                    <li>Try more general keywords</li>
                    <li>Try different keywords</li>
                  </ul>
                  <p style="margin-top: 20px; font-size: 12px; color: #666;">
                    Note: Full content search is still indexing. More results may appear for future searches.
                  </p>
                </div>
              `;
              return;
            }
            
            // Build results HTML
            let html = `
              <div class="search-results-container">
                <p class="search-results-count">Found ${results.length} result${results.length !== 1 ? 's' : ''} for "${searchTerm}"</p>
                <div class="search-results-list">
            `;
            
            // Add each result
            results.forEach(result => {
              html += `
                <div class="content-search-result" data-id="${result.id}">
                  <h3><a href="#${result.id}" class="search-result-link">${result.title}</a></h3>
                  <p class="search-result-excerpt">${result.excerpt}</p>
                </div>
              `;
            });
            
            html += `
                </div>
                <p style="margin-top: 20px; font-size: 12px; color: #666;">
                  Tip: Full content search is still building. Future searches may find more matches.
                </p>
              </div>
            `;
            
            contentEl.innerHTML = html;
            
            // Add click handlers to results
            document.querySelectorAll('.search-result-link').forEach(link => {
              link.addEventListener('click', function(e) {
                e.preventDefault();
                const id = this.closest('.content-search-result').getAttribute('data-id');
                if (typeof window.navigateToPage === 'function') {
                  window.navigateToPage(id);
                } else {
                  window.location.hash = id;
                }
              });
            });
          }

          // Enhance the search index in the background with low priority
          function enhanceSearchIndexInBackground() {
            console.log('[DITA-SPA] Starting background index enhancement');
            
            const ids = Object.keys(searchIndex);
            let processedCount = 0;
            
            // Process one item at a time with significant pauses to avoid UI freezing
            function processNextItem(index) {
              if (index >= ids.length) {
                console.log('[DITA-SPA] Background indexing complete');
                // Update status indicator when complete
                updateIndexingStatus(true);
                return;
              }
              
              const id = ids[index];
              
              // Fetch and process content for this ID
              fetchContentForId(id).then(() => {
                processedCount++;
                
                // Log progress occasionally
                if (processedCount % 10 === 0 || processedCount === ids.length) {
                  const percentage = Math.round(processedCount/ids.length*100);
                  console.log(`[DITA-SPA] Background indexing: ${processedCount}/${ids.length} (${percentage}%)`);
                  updateIndexingStatus(false, percentage);
                }
                
                // Continue with next item after a delay
                setTimeout(() => {
                  processNextItem(index + 1);
                }, 300); // Significant delay to keep UI responsive
              });
            }
            
            // Start processing
            processNextItem(0);
          }

          // Update the indexing status display
          function updateIndexingStatus(isComplete, percentage) {
            const statusEl = document.getElementById('search-status');
            if (!statusEl) return;
            
            if (isComplete) {
              statusEl.innerHTML = `
                <p>Search index is complete! All content is now searchable.</p>
              `;
              return;
            }
            
            if (percentage) {
              const indicator = statusEl.querySelector('.search-status-indicator');
              if (indicator) {
                indicator.innerHTML = `
                  <span>Full content indexing: ${percentage}% complete</span>
                  <span class="dot"></span>
                  <span class="dot"></span>
                `;
              }
            }
          }

          // Fetch content for a single ID
          async function fetchContentForId(id) {
            try {
              const basePath = getBasePathForSearch();
              const contentPath = `${basePath}/content/${id}.html`;
              
              // Use AbortController to set a timeout
              const controller = new AbortController();
              const timeoutId = setTimeout(() => controller.abort(), 3000);
              
              const response = await fetch(contentPath, { 
                signal: controller.signal,
                cache: 'force-cache'
              });
              clearTimeout(timeoutId);
              
              if (!response.ok) return;
              
              const html = await response.text();
              
              // Extract plain text and add to index
              const text = extractTextFromHtml(html);
              if (text) {
                searchIndex[id].content = text;
              }
            } catch (error) {
              // Silently fail for background processing
              console.debug(`[DITA-SPA] Background fetch failed for ${id}`);
            }
          }

          // Fast HTML text extraction using regex instead of DOM
          function extractTextFromHtml(html) {
            if (!html) return '';
            
            // Remove all scripts and styles
            let text = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, ' ');
            text = text.replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, ' ');
            
            // Remove all HTML tags
            text = text.replace(/<\/?[^>]+(>|$)/g, ' ');
            
            // Decode HTML entities
            text = text.replace(/&nbsp;/g, ' ')
                       .replace(/&amp;/g, '&')
                       .replace(/&lt;/g, '<')
                       .replace(/&gt;/g, '>')
                       .replace(/&quot;/g, '"')
                       .replace(/&#39;/g, "'");
            
            // Remove extra whitespace
            text = text.replace(/\s+/g, ' ').trim();
            
            return text;
          }

          // Get base path helper function
          function getBasePathForSearch() {
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) {
                return '/' + pathSegments[1];
              }
            }
            return '';
          }

          // Initialize search when DOM is ready
          document.addEventListener('DOMContentLoaded', function() {
            initSearch();
          });
          EOF

      # Step 11: Update Index HTML with Search
      - name: Update Index HTML with Search
        run: |
          cat > ./site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
            <meta http-equiv="Pragma" content="no-cache">
            <meta http-equiv="Expires" content="0">
            
            <!-- Base path handling for GitHub Pages -->
            <script>
              // Dynamically set the base href based on deployment environment
              (function() {
                // For GitHub Pages repository sites
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    const basePath = '/' + pathSegments[1];
                    document.write('<base href="' + basePath + '/">');
                    console.log('Base path set to:', basePath);
                  }
                }
              })();
            </script>
            
            <title>Automotive Documentation</title>
            <link rel="stylesheet" href="css/style.css">
          </head>
          <body>
            <div class="sidebar">
              <div class="search-container">
                <div class="search-input-wrap">
                  <input type="text" id="search-input" placeholder="Search documentation...">
                  <button id="search-button" aria-label="Search">Search</button>
                </div>
                <div class="search-scope">
                  <input type="checkbox" id="search-toggle">
                  <label for="search-toggle">Search only current article</label>
                </div>
                <div id="search-results"></div>
              </div>
              
              <div class="sidebar-nav">
                <h2>Navigation</h2>
                <div id="navigation"></div>
              </div>
            </div>
            
            <div class="main-content">
              <h1 id="content-title">Loading...</h1>
              <div id="loading">Loading content...</div>
              <div id="content">
                <!-- Content will load here -->
                <div class="initial-loading">
                  <p>Initializing documentation viewer...</p>
                </div>
              </div>
            </div>
            
            <!-- Load JavaScript files -->
            <script src="js/navigation-config.js"></script>
            <script src="js/content-id-map.js"></script>
            <script src="js/path-mapping.js"></script>
            <script src="js/search-index.js"></script>
            <script src="js/search.js"></script>
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF

      # Step 12: Create 404.html page for SPA routing
      - name: Create 404 Page for SPA Routing
        run: |
          cat > ./site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redirecting...</title>
            <script>
              // Store the requested URL for processing after redirect
              sessionStorage.redirect = location.href;
              
              // Dynamically determine the correct base path
              function getBasePath() {
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    return '/' + pathSegments[1];
                  }
                }
                return '';
              }
              
              // Redirect to the main site with the correct base path
              const basePath = getBasePath();
              window.location.href = basePath + '/';
            </script>
          </head>
          <body>
            <div style="text-align: center; font-family: Arial, sans-serif; margin-top: 100px;">
              <h1>Redirecting to documentation...</h1>
              <p>If you are not redirected automatically, <a href="/">click here</a>.</p>
            </div>
          </body>
          </html>
          EOF

      # Step 13: Create default content for navigation containers
      - name: Create Default Content
        run: |
          # Create content directory if it doesn't exist
          mkdir -p ./site/content

          # Extract container nodes from navigation structure
          if command -v jq >/dev/null 2>&1; then
            # Use jq if available
            jq -r '.[] | select(.children != null) | .id' ./navigation-structure.json > container-nodes.txt
          else
            # Fallback to grep and sed
            grep -o '"id": "[^"]*".*"children"' ./navigation-structure.json | 
            sed 's/"id": "\([^"]*\)".*/\1/' > container-nodes.txt
          fi
          
          # Create default content for container nodes
          while IFS= read -r id || [ -n "$id" ]; do
            if [ ! -f "./site/content/$id.html" ]; then
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
              
              echo "Creating default content for container node: $id ($title)"
              cat > "./site/content/$id.html" << EOF
          <h1>${title}</h1>
          <p>This section contains information about ${title}.</p>
          <p>Use the navigation menu to explore topics within this section.</p>
          EOF
            fi
          done < container-nodes.txt
          
          # Handle error if no container nodes were found
          if [ ! -s container-nodes.txt ]; then
            echo "No container nodes found in navigation. Creating default containers."
            
            # Create default containers
            for id in automotive-information basic-maintenance major-vehicle-components; do
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
              
              echo "Creating default container: $id ($title)"
              cat > "./site/content/$id.html" << EOF
          <h1>${title}</h1>
          <p>This section contains information about ${title}.</p>
          <p>Use the navigation menu to explore topics within this section.</p>
          EOF
            done
          fi

      # Step 14: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true