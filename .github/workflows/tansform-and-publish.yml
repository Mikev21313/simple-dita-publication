name: DITA to SPA Transformation with Supabase Comments Side Cart Review System

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install DITA-OT and required tools
      - name: Set up DITA-OT and XML tools
        run: |
          # Install XML tools
          sudo apt-get update
          sudo apt-get install -y libxml2-utils xsltproc

          # Install DITA-OT
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # Step 4: Initialize Supabase Database Schema
      - name: Setup Supabase Database Schema
        run: |
          # Create SQL schema for comments system
          cat > supabase-schema.sql << 'EOF'
          -- Create comments table
          CREATE TABLE IF NOT EXISTS comments (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            page_id TEXT NOT NULL,
            comment_type TEXT NOT NULL CHECK (comment_type IN ('comment', 'suggestion')),
            comment_text TEXT,
            selected_text TEXT,
            selection_type TEXT CHECK (selection_type IN ('text', 'image')),
            image_src TEXT,
            image_alt TEXT,
            position_x DECIMAL,
            position_y DECIMAL,
            resolved BOOLEAN DEFAULT FALSE,
            resolved_timestamp TIMESTAMPTZ,
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW(),
            session_id TEXT,
            user_agent TEXT
          );

          -- Create uploaded_images table for comment attachments
          CREATE TABLE IF NOT EXISTS uploaded_images (
            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
            comment_id UUID REFERENCES comments(id) ON DELETE CASCADE,
            filename TEXT NOT NULL,
            file_data TEXT NOT NULL,
            file_size INTEGER,
            file_type TEXT,
            created_at TIMESTAMPTZ DEFAULT NOW()
          );

          -- Create indexes for better performance
          CREATE INDEX IF NOT EXISTS idx_comments_page_id ON comments(page_id);
          CREATE INDEX IF NOT EXISTS idx_comments_created_at ON comments(created_at);
          CREATE INDEX IF NOT EXISTS idx_comments_resolved ON comments(resolved);
          CREATE INDEX IF NOT EXISTS idx_uploaded_images_comment_id ON uploaded_images(comment_id);

          -- Enable Row Level Security
          ALTER TABLE comments ENABLE ROW LEVEL SECURITY;
          ALTER TABLE uploaded_images ENABLE ROW LEVEL SECURITY;

          -- Create policies (allow all operations for now)
          DROP POLICY IF EXISTS "Enable all operations for comments" ON comments;
          CREATE POLICY "Enable all operations for comments" ON comments FOR ALL USING (true);
          DROP POLICY IF EXISTS "Enable all operations for uploaded_images" ON uploaded_images;
          CREATE POLICY "Enable all operations for uploaded_images" ON uploaded_images FOR ALL USING (true);

          -- Create updated_at trigger function
          CREATE OR REPLACE FUNCTION update_updated_at_column()
          RETURNS TRIGGER AS $$
          BEGIN
            NEW.updated_at = NOW();
            RETURN NEW;
          END;
          $$ language 'plpgsql';

          -- Create trigger for comments table
          DROP TRIGGER IF EXISTS update_comments_updated_at ON comments;
          CREATE TRIGGER update_comments_updated_at BEFORE UPDATE ON comments
            FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
          EOF

          # Apply schema using curl to REST API
          echo "Applying database schema to Supabase..."
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -H "Content-Type: application/sql" \
            -d @supabase-schema.sql \
            "https://oiluavgeyngmkqozzmnz.supabase.co/rest/v1/rpc/exec" || echo "Schema application completed (may already exist)"

        env:
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}

      # Step 5: Parse DITAMAP to generate navigation structure
      - name: Parse DITAMAP Structure
        run: |
          echo "Parsing DITAMAP structure from dita-source/automotive.ditamap"

          # Create an XSLT file to transform DITAMAP to JSON navigation structure
          cat > extract-nav.xsl << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            <xsl:output method="text"/>

            <xsl:template match="/">
              [
                <xsl:apply-templates select="//topicref[not(ancestor::topicref)]"/>
              ]
            </xsl:template>

            <xsl:template match="topicref">
              <xsl:variable name="href" select="@href"/>
              <xsl:variable name="filename">
                <xsl:choose>
                  <xsl:when test="contains($href, '/')">
                    <xsl:value-of select="substring-after(substring-before($href, '.'), '/')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="substring-before($href, '.')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              <xsl:variable name="id">
                <xsl:choose>
                  <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                  <xsl:otherwise><xsl:value-of select="translate($filename, '_', '-')"/></xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              <xsl:variable name="title">
                <xsl:choose>
                  <xsl:when test="@navtitle"><xsl:value-of select="@navtitle"/></xsl:when>
                  <xsl:when test="topicmeta/navtitle"><xsl:value-of select="topicmeta/navtitle"/></xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="translate(translate($id, '-', ' '), '_', ' ')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              {
                "id": "<xsl:value-of select="$id"/>",
                "title": "<xsl:value-of select="$title"/>",
                "filename": "<xsl:value-of select="$filename"/>",
                "href": "<xsl:value-of select="$href"/>"
                <xsl:if test="topicref">
                  ,
                  "children": [
                    <xsl:apply-templates select="topicref"/>
                  ]
                </xsl:if>
              }<xsl:if test="following-sibling::topicref">,</xsl:if>
            </xsl:template>
          </xsl:stylesheet>
          EOF

          # Apply XSLT to extract navigation from DITAMAP
          xsltproc extract-nav.xsl dita-source/automotive.ditamap > ./navigation-structure.json || echo "[]" > ./navigation-structure.json

          # Fix any JSON syntax issues
          sed -i 's/\\n//g; s/\\t//g; s/\\"//g; s/\\//g; s/  / /g' ./navigation-structure.json

          echo "DITAMAP parsing complete"
          cat ./navigation-structure.json

      # Step 6: Transform DITA to HTML and prepare images
      - name: Transform DITA to HTML and Prepare Images
        run: |
          # Using HTML5 format with parameters for better output
          ./dita-ot-4.0.2/bin/dita --input=dita-source/automotive.ditamap --format=html5 --output=./site || echo "DITA transformation completed with warnings"
          echo "DITA transformation complete"

          # Create content directory for SPA fragments
          mkdir -p ./site/content
          mkdir -p ./site/images

          # Copy all image files from dita-source to the images directory
          echo "Copying all potential image files from dita-source:"
          find ./dita-source -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -exec cp -v {} ./site/images/ \; || echo "No images found to copy"

          # Create placeholder images if no images are found
          if [ ! "$(ls -A ./site/images 2>/dev/null)" ]; then
            echo "Creating placeholder test images"
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > ./site/images/test.png
          fi

          echo "Files in images directory:"
          ls -la ./site/images/ || echo "No files in images directory"

      # Step 7: Process HTML files
      - name: Process HTML Content
        run: |
          # Create content directory for SPA fragments
          mkdir -p ./site/content
          mkdir -p ./site/js

          # Process each HTML file to extract content
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            if [[ "$file" == "./site/index.html" ]]; then
              continue
            fi

            filename=$(basename "$file")
            id="${filename%.html}"
            hyphenated_id="${id//_/-}"
            echo "Processing $filename (ID: $id, Hyphenated ID: $hyphenated_id)"

            # Extract content from file
            content=$(sed -n '/<body/,/<\/body>/p' "$file" | sed '/<body/d;/<\/body>/d' | sed '/<header/,/<\/header>/d' | sed '/<nav/,/<\/nav>/d' | sed '/<footer/,/<\/footer>/d')

            # Fix image paths
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="[^"]*\/([^\/"]*)\.([a-zA-Z0-9]+)"/<img\1src="images\/\2.\3"/gi')
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="([^\/:"]*)\.(jpg|jpeg|png|gif|svg)"/<img\1src="images\/\2.\3"/gi')

            # Get title from the original file
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '_-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi

            # Create content file with original filename
            echo "$content" > "./site/content/$id.html"

            # Also create a hyphenated version
            if [[ "$id" != "$hyphenated_id" ]]; then
              echo "$content" > "./site/content/$hyphenated_id.html"
            fi
          done

          # Create a content ID mapping file
          echo "// Auto-generated content ID mapping" > ./site/js/content-id-map.js
          echo "const contentIdMap = {" >> ./site/js/content-id-map.js

          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            filename=$(basename "$file" .html)
            id="${filename//_/-}"
            original_filename="$filename"
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            raw_content=$(cat "$file" | tr '\n' ' ' | sed 's/<[^>]*>//g' | sed 's/&nbsp;/ /g' | sed 's/  */ /g' | tr -d '\n\r')

            if grep -q "\"$id\":" ./site/js/content-id-map.js; then
              continue
            fi

            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi

            title=$(echo "$title" | sed 's/"/\\"/g')
            raw_content=$(echo "$raw_content" | sed 's/"/\\"/g')

            echo "  \"$id\": { \"title\": \"$title\", \"filename\": \"$original_filename\", \"content\": \"$raw_content\" }," >> ./site/js/content-id-map.js
          done

          echo "  \"default\": { \"title\": \"Automotive Documentation\", \"filename\": \"\", \"content\": \"\" }" >> ./site/js/content-id-map.js
          echo "};" >> ./site/js/content-id-map.js

      # Step 8: Generate Navigation Configuration
      - name: Generate Navigation Configuration
        run: |
          mkdir -p ./site/js ./site/css

          # Convert JSON to JavaScript navigation config
          cat > ./site/js/navigation-config.js << 'EOF'
          // Auto-generated navigation structure from DITAMAP
          const navigationConfig =
          EOF

          # Append the parsed JSON structure
          cat ./navigation-structure.json >> ./site/js/navigation-config.js
          echo ";" >> ./site/js/navigation-config.js

          echo "Navigation configuration generated from DITAMAP structure"

      # Step 9: Create Supabase Configuration
      - name: Create Supabase Configuration
        run: |
          cat > ./site/js/supabase-config.js << 'EOF'
          // Supabase configuration and client setup
          const SUPABASE_URL = 'https://oiluavgeyngmkqozzmnz.supabase.co';
          const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9pbHVhdmdleW5nbWtxb3p6bW56Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzI4MzIyMzUsImV4cCI6MjA0ODQwODIzNX0.B5h7wjPvKHLHNu7sTq4C7QoKjLFgJWgKyftLPJgIh6E';

          // Supabase client class for comments system
          class SupabaseClient {
            constructor() {
              this.baseUrl = SUPABASE_URL;
              this.headers = {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'apikey': SUPABASE_ANON_KEY
              };
            }

            async request(endpoint, options = {}) {
              const url = `${this.baseUrl}/rest/v1/${endpoint}`;
              const config = {
                headers: this.headers,
                ...options
              };

              try {
                const response = await fetch(url, config);
                if (!response.ok) {
                  throw new Error(`HTTP error! status: ${response.status}`);
                }
                return await response.json();
              } catch (error) {
                console.error('Supabase request failed:', error);
                throw error;
              }
            }

            async getComments(pageId) {
              try {
                const comments = await this.request(`comments?page_id=eq.${encodeURIComponent(pageId)}&order=created_at.desc`);
                
                const commentsWithImages = await Promise.all(
                  comments.map(async (comment) => {
                    const images = await this.request(`uploaded_images?comment_id=eq.${comment.id}`);
                    return {
                      ...comment,
                      uploadedImages: images.map(img => ({
                        id: img.id,
                        name: img.filename,
                        data: img.file_data,
                        size: img.file_size,
                        type: img.file_type
                      }))
                    };
                  })
                );

                return commentsWithImages;
              } catch (error) {
                console.error('Failed to fetch comments:', error);
                return [];
              }
            }

            async saveComment(commentData) {
              try {
                const comment = {
                  page_id: commentData.pageId,
                  comment_type: commentData.type,
                  comment_text: commentData.text,
                  selected_text: commentData.selectedText,
                  selection_type: commentData.selectionType,
                  image_src: commentData.imageSrc,
                  image_alt: commentData.imageAlt,
                  position_x: commentData.position?.x,
                  position_y: commentData.position?.y,
                  session_id: this.getSessionId(),
                  user_agent: navigator.userAgent
                };

                const [savedComment] = await this.request('comments', {
                  method: 'POST',
                  body: JSON.stringify(comment)
                });

                if (commentData.uploadedImages && commentData.uploadedImages.length > 0) {
                  const imagePromises = commentData.uploadedImages.map(image => 
                    this.request('uploaded_images', {
                      method: 'POST',
                      body: JSON.stringify({
                        comment_id: savedComment.id,
                        filename: image.name,
                        file_data: image.data,
                        file_size: image.size,
                        file_type: image.type
                      })
                    })
                  );

                  await Promise.all(imagePromises);
                }

                return savedComment;
              } catch (error) {
                console.error('Failed to save comment:', error);
                throw error;
              }
            }

            async updateComment(commentId, updates) {
              try {
                const [updatedComment] = await this.request(`comments?id=eq.${commentId}`, {
                  method: 'PATCH',
                  body: JSON.stringify(updates)
                });
                return updatedComment;
              } catch (error) {
                console.error('Failed to update comment:', error);
                throw error;
              }
            }

            async deleteComment(commentId) {
              try {
                await this.request(`comments?id=eq.${commentId}`, {
                  method: 'DELETE'
                });
                return true;
              } catch (error) {
                console.error('Failed to delete comment:', error);
                throw error;
              }
            }

            async clearAllComments() {
              try {
                await this.request('uploaded_images', {
                  method: 'DELETE'
                });
                await this.request('comments', {
                  method: 'DELETE'
                });
                return true;
              } catch (error) {
                console.error('Failed to clear all comments:', error);
                throw error;
              }
            }

            getSessionId() {
              let sessionId = localStorage.getItem('reviewSessionId');
              if (!sessionId) {
                sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                localStorage.setItem('reviewSessionId', sessionId);
              }
              return sessionId;
            }
          }

          // Initialize Supabase client
          window.supabaseClient = new SupabaseClient();
          EOF

      # Step 10: Create Enhanced SPA CSS
      - name: Create Enhanced SPA CSS
        run: |
          cat > ./site/css/style.css << 'EOF'
          /* Enhanced SPA CSS with Comments Side Cart */
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            display: flex;
            height: 100vh;
            width: 100%;
            overflow: hidden;
            color: #333;
            background-color: #f8f8f8;
            position: relative;
          }

          .sidebar {
            width: 280px;
            background-color: #e0f7f7;
            padding: 15px;
            height: 100vh;
            overflow-y: auto;
            border-right: 1px solid #c0e0e0;
            display: flex;
            flex-direction: column;
            box-shadow: 2px 0 5px rgba(0,0,0,0.05);
            z-index: 100;
          }

          .main-content {
            flex: 1;
            padding: 30px;
            height: 100vh;
            overflow-y: auto;
            background-color: #ffffff;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.02);
            position: relative;
            transition: margin-right 0.3s ease;
          }

          .sidebar h2 {
            font-weight: 500;
            margin-top: 0;
            margin-bottom: 15px;
            color: #00747a;
            border-bottom: 2px solid #80cbc4;
            padding-bottom: 10px;
            font-size: 1.4em;
          }

          .sidebar-nav {
            flex: 1;
            overflow-y: auto;
            margin-top: 15px;
          }

          .sidebar ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 5px;
          }

          .sidebar ul ul {
            padding-left: 20px;
            margin-top: 5px;
            margin-bottom: 0;
          }

          .sidebar li {
            margin-bottom: 6px;
            position: relative;
          }

          .sidebar .toggle-arrow {
            display: inline-block;
            width: 18px;
            height: 18px;
            position: absolute;
            left: 0;
            top: 4px;
            cursor: pointer;
            z-index: 10;
            color: #00747a;
          }

          .sidebar .toggle-arrow:before {
            content: "▶";
            display: inline-block;
            font-size: 10px;
            transition: transform 0.2s;
          }

          .sidebar li.expanded > .toggle-arrow:before {
            transform: rotate(90deg);
          }

          .sidebar li.has-children > ul {
            display: none;
          }

          .sidebar li.has-children.expanded > ul {
            display: block;
          }

          .sidebar a {
            color: #00747a;
            text-decoration: none;
            display: block;
            padding: 6px 5px 6px 22px;
            border-radius: 4px;
            transition: background-color 0.2s, color 0.2s;
            cursor: pointer;
            font-size: 0.95em;
          }

          .sidebar a:hover {
            background-color: #e1f5fe;
            color: #006064;
          }

          .sidebar a.active {
            background-color: #80deea;
            font-weight: bold;
            color: #006064;
            box-shadow: inset 3px 0 0 #00acc1;
          }

          .review-controls {
            border-top: 2px solid #80cbc4;
            padding-top: 15px;
            margin-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
          }

          .review-controls h3 {
            color: #00747a;
            font-size: 1.1em;
            margin-bottom: 10px;
          }

          .review-mode-toggle {
            display: flex;
            gap: 5px;
          }

          .review-btn {
            padding: 8px 12px;
            border: 1px solid #00acc1;
            background: linear-gradient(135deg, #00acc1, #0097a7);
            color: white;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
            transition: all 0.3s;
            text-align: center;
            flex: 1;
          }

          .review-btn:hover {
            background: linear-gradient(135deg, #0097a7, #00838f);
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
          }

          .review-btn.active {
            background: linear-gradient(135deg, #ff6f00, #e65100);
            border-color: #ff6f00;
          }

          .review-btn.secondary {
            background: linear-gradient(135deg, #546e7a, #455a64);
            border-color: #546e7a;
            font-size: 0.85em;
            padding: 6px 10px;
          }

          .review-btn.danger {
            background: linear-gradient(135deg, #f44336, #d32f2f);
            border-color: #f44336;
            font-size: 0.85em;
            padding: 6px 10px;
          }

          .review-btn.danger:hover {
            background: linear-gradient(135deg, #d32f2f, #c62828);
          }

          .search-container {
            margin-bottom: 15px;
            display: flex;
            gap: 5px;
            width: 100%;
            position: relative;
          }

          .search-container input[type="text"] {
            flex-grow: 1;
            min-width: 0;
            padding: 8px 10px;
            border: 1px solid #b0e0e6;
            border-radius: 5px;
            font-size: 0.9em;
            outline: none;
            transition: border-color 0.3s, box-shadow 0.3s;
          }

          .search-container input[type="text"]:focus {
            border-color: #4dd0e1;
            box-shadow: 0 0 5px rgba(0, 188, 212, 0.3);
          }

          .search-container button {
            padding: 8px 10px;
            background-color: #00acc1;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            white-space: nowrap;
            min-width: 60px;
            font-weight: normal;
          }

          .search-container button:hover {
            background-color: #0097a7;
          }

          .search-results {
            list-style-type: none;
            padding: 0;
            margin-top: 15px;
            margin-bottom: 15px;
            border-top: 1px solid #e0e0e0;
            border-bottom: 1px solid #e0e0e0;
            padding-top: 10px;
            padding-bottom: 10px;
            max-height: 300px;
            overflow-y: auto;
            width: 100%;
            background-color: #f5f9f9;
          }

          .search-results li {
            margin-bottom: 10px;
            padding: 8px;
            border-bottom: 1px dashed #e0e0e0;
          }

          .search-results li:last-child {
            border-bottom: none;
            margin-bottom: 0;
          }

          .search-results a {
            color: #0097a7;
            text-decoration: none;
            font-weight: bold;
            display: block;
            padding: 4px 0;
          }

          .search-results a:hover {
            background-color: #e1f5fe;
            border-radius: 4px;
          }

          .highlight {
            background-color: #fff9c4;
            font-weight: bold;
          }

          .main-content h1, .main-content h2, .main-content h3, .main-content h4 {
            font-weight: 500;
            margin-top: 1.5em;
            margin-bottom: 0.8em;
            color: #00838f;
          }

          .main-content h1 {
            font-size: 2em;
            border-bottom: 1px solid #e0e0e0;
            padding-bottom: 10px;
            margin-top: 0;
          }

          .main-content h2 { font-size: 1.5em; }
          .main-content h3 { font-size: 1.3em; }
          .main-content h4 { font-size: 1.1em; }

          .main-content p {
            margin-bottom: 1em;
            line-height: 1.6;
          }

          .main-content img {
            max-width: 100%;
            height: auto;
            display: block;
            margin: 1em auto;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
          }

          .main-content table {
            width: 100%;
            border-collapse: collapse;
            margin: 1.5em 0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            font-size: 0.95em;
          }

          .main-content th, .main-content td {
            border: 1px solid #b2dfdb;
            padding: 10px;
            text-align: left;
          }

          .main-content th {
            background-color: #e0f2f1;
            font-weight: bold;
            color: #00796b;
          }

          .main-content tr:nth-child(even) {
            background-color: #f5f9f9;
          }

          .main-content tr:hover {
            background-color: #e1f5fe;
          }

          .main-content ul, .main-content ol {
            margin-left: 2em;
            margin-bottom: 1em;
          }

          .main-content li {
            margin-bottom: 0.5em;
          }

          .welcome-screen {
            text-align: center;
            padding: 40px 20px;
            color: #00838f;
          }

          .welcome-screen h2 {
            margin-bottom: 20px;
            font-size: 2em;
          }

          #loading {
            display: none;
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
          }

          .loading #loading {
            display: block;
          }

          .error {
            background-color: #ffebee;
            border-left: 4px solid #f44336;
            padding: 15px;
            margin-bottom: 20px;
            color: #333;
          }

          .error h2 {
            color: #d32f2f;
            margin-top: 0;
          }

          .connection-status {
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            padding: 8px 16px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: bold;
            z-index: 2000;
            transition: all 0.3s;
          }

          .connection-status.connected {
            background: #4caf50;
            color: white;
          }

          .connection-status.disconnected {
            background: #f44336;
            color: white;
          }

          .connection-status.hidden {
            opacity: 0;
            pointer-events: none;
          }

          /* Review Mode Styles */
          .review-mode .main-content {
            background-color: #fffbf0;
          }

          /* Responsive design */
          @media (max-width: 768px) {
            body {
              flex-direction: column;
              height: auto;
            }

            .sidebar {
              width: 100%;
              height: auto;
              max-height: 40vh;
              border-right: none;
              border-bottom: 1px solid #b2ebf2;
            }

            .main-content {
              height: auto;
              min-height: 60vh;
            }
          }
          EOF

      # Step 11: Create Complete SPA JavaScript with ALL Functions
      - name: Create Complete SPA JavaScript with All Functions
        run: |
          cat > ./site/js/app.js << 'EOF'
          // Enhanced SPA Application with Supabase integration

          // DOM Elements
          const contentEl = document.getElementById('content');
          const contentTitleEl = document.getElementById('content-title');
          const navigationEl = document.getElementById('navigation');
          const searchInput = document.getElementById('searchInput');
          const searchButton = document.getElementById('searchButton');
          const searchResultsEl = document.getElementById('searchResults');

          // Review System Elements
          const reviewToggleBtn = document.getElementById('reviewToggle');
          const startReviewBtn = document.getElementById('startReview');
          const clearReviewBtn = document.getElementById('clearReview');

          // Base path handling
          const getBasePath = () => {
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) {
                return '/' + pathSegments[1];
              }
            }
            return '';
          };

          // Current state
          window.currentPage = null;
          window.reviewMode = false;
          window.reviewData = {};
          const basePath = getBasePath();
          let connectionStatus = 'connected';

          // Debug logging
          function debug(message, data) {
            console.log(`[DITA-SPA] ${message}`, data || '');
          }

          // Show connection status
          function showConnectionStatus(status, message) {
            let statusEl = document.getElementById('connectionStatus');
            if (!statusEl) {
              statusEl = document.createElement('div');
              statusEl.id = 'connectionStatus';
              statusEl.className = 'connection-status';
              document.body.appendChild(statusEl);
            }
            
            statusEl.className = `connection-status ${status}`;
            statusEl.textContent = message;
            
            if (status === 'connected') {
              setTimeout(() => {
                statusEl.classList.add('hidden');
              }, 3000);
            } else {
              statusEl.classList.remove('hidden');
            }
          }

          // Test Supabase Connection
          async function testSupabaseConnection() {
            try {
              await window.supabaseClient.request('comments?limit=1');
              connectionStatus = 'connected';
              showConnectionStatus('connected', '🟢 Connected to Supabase');
              debug('Supabase connection successful');
            } catch (error) {
              connectionStatus = 'disconnected';
              showConnectionStatus('disconnected', '🔴 Supabase connection failed');
              debug('Supabase connection failed:', error);
            }
          }

          // Initialize the application
          function initApp() {
            debug('Initializing app with base path:', basePath);

            // Test Supabase connection
            if (window.supabaseClient) {
              testSupabaseConnection();
            }

            // Render navigation
            renderNavigation(navigationConfig);

            // Set up event listeners
            window.addEventListener('popstate', handlePopState);
            if (searchButton && searchInput) {
                searchButton.addEventListener('click', performSearch);
                searchInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        performSearch();
                    }
                });
            }

            // Review system event listeners
            if (reviewToggleBtn) {
              reviewToggleBtn.addEventListener('click', toggleReviewMode);
            }
            if (startReviewBtn) {
              startReviewBtn.addEventListener('click', startReviewSession);
            }
            if (clearReviewBtn) {
              clearReviewBtn.addEventListener('click', promptClearReviewData);
            }

            // Print functionality
            const printBtn = document.querySelector('.wh_print_link button');
            if (printBtn) {
              printBtn.addEventListener('click', (e) => {
                e.preventDefault();
                window.print();
              });
            }

            // Update review button states
            updateReviewButtons();

            // Check if we have a hash in the URL
            const initialPageId = getPageIdFromUrl();

            if (initialPageId) {
              navigateToPage(initialPageId, false);
            } else {
              showWelcomeScreen();
            }
          }

          // Toggle Review Mode
          function toggleReviewMode() {
            window.reviewMode = !window.reviewMode;
            
            if (window.reviewMode) {
              document.body.classList.add('review-mode');
              debug('Review mode activated');
            } else {
              document.body.classList.remove('review-mode');
              debug('Review mode deactivated');
            }
            
            updateReviewButtons();
          }

          // Start Review Session
          function startReviewSession() {
            if (!window.currentPage) {
              alert('Please select a document to review first.');
              return;
            }
            
            if (!window.reviewMode) {
              toggleReviewMode();
            }
            
            alert(`Review session started for "${getPageTitle(window.currentPage)}".`);
          }

          // Prompt Clear Review Data
          function promptClearReviewData() {
            if (confirm('Are you sure you want to clear all review data? This cannot be undone.')) {
              clearReviewData();
            }
          }

          // Clear Review Data
          async function clearReviewData() {
            try {
              if (window.supabaseClient) {
                await window.supabaseClient.clearAllComments();
              }
              
              window.reviewData = {};
              alert('All review data has been cleared successfully.');
              
            } catch (error) {
              debug('Error clearing review data:', error);
              alert('Failed to clear review data. Please try again.');
            }
          }

          // Update Review Buttons
          function updateReviewButtons() {
            if (reviewToggleBtn) {
              reviewToggleBtn.textContent = window.reviewMode ? 'Exit Review' : 'Review Mode';
              reviewToggleBtn.classList.toggle('active', window.reviewMode);
            }
            
            const reviewControls = document.querySelectorAll('.review-btn:not(#reviewToggle)');
            reviewControls.forEach(btn => {
              btn.style.display = window.reviewMode ? 'block' : 'none';
            });
          }

          // Show welcome screen
          function showWelcomeScreen() {
            contentTitleEl.textContent = 'Documentation';
            document.title = 'Documentation';

            contentEl.innerHTML = `
              <div class="welcome-screen">
                <h2>Welcome to Documentation</h2>
                <p>Please select a topic from the navigation menu or use the search bar.</p>
                <p><strong>Review Mode:</strong> Click "Review Mode" to enable collaborative commenting and suggestions.</p>
                <p><strong>Supabase Integration:</strong> All comments are now saved to a persistent database.</p>
              </div>
            `;

            document.body.classList.remove('loading');
          }

          // Render navigation
          function renderNavigation(items, parentEl = navigationEl) {
            const ul = document.createElement('ul');
            ul.setAttribute('role', 'menu');

            items.forEach(item => {
              const li = document.createElement('li');
              li.setAttribute('role', 'presentation');

              if (item.children && item.children.length > 0) {
                li.classList.add('has-children');

                const toggle = document.createElement('span');
                toggle.className = 'toggle-arrow';
                toggle.addEventListener('click', (e) => {
                  e.stopPropagation();
                  li.classList.toggle('expanded');
                });
                li.appendChild(toggle);
              }

              const a = document.createElement('a');
              a.setAttribute('role', 'menuitem');
              a.textContent = item.title;
              a.setAttribute('data-id', item.id);
              a.href = `#${item.id}`;

              a.addEventListener('click', (e) => {
                e.preventDefault();

                if (item.children && item.children.length > 0) {
                  li.classList.toggle('expanded');
                }

                navigateToPage(item.id);
                if (searchResultsEl) searchResultsEl.innerHTML = '';
                if (searchInput) searchInput.value = '';
              });

              li.appendChild(a);

              if (item.children && item.children.length > 0) {
                renderNavigation(item.children, li);
              }

              ul.appendChild(li);
            });

            parentEl.appendChild(ul);
          }

          // Navigate to page
          function navigateToPage(pageId, pushState = true) {
            debug('Navigating to page:', pageId);
            
            if (!pageId) {
              console.error('Invalid pageId - cannot navigate to undefined page');
              showErrorContent('undefined');
              return;
            }

            updateActiveNavItem(pageId);
            expandNavigationTo(pageId);

            if (pushState) {
              history.pushState({ pageId }, '', `#${pageId}`);
            }

            document.body.classList.add('loading');
            window.currentPage = pageId;

            loadContent(pageId)
              .then(content => {
                const title = getPageTitle(pageId);
                contentTitleEl.textContent = title;
                document.title = title;

                contentEl.innerHTML = content;
                enhanceTables();
                
                document.body.classList.remove('loading');
                debug('Content loaded successfully for:', pageId);
              })
              .catch(error => {
                showErrorContent(pageId);
              });
          }

          // Load content
          async function loadContent(pageId) {
            const contentPath = `${basePath}/content/${pageId}.html`;
            debug('Fetching from URL:', contentPath);

            try {
              const response = await fetch(contentPath);
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status} for ${contentPath}`);
              }
              return await response.text();
            } catch (error) {
              debug('Content fetch error:', error.message);
              throw error;
            }
          }

          // Update active navigation item
          function updateActiveNavItem(pageId) {
            const allNavItems = document.querySelectorAll('.sidebar a');
            allNavItems.forEach(item => item.classList.remove('active'));

            const activeItem = document.querySelector(`.sidebar a[data-id="${pageId}"]`);
            if (activeItem) {
              activeItem.classList.add('active');

              let parent = activeItem.parentElement;
              while (parent && !parent.classList.contains('sidebar')) {
                if (parent.classList.contains('has-children')) {
                  parent.classList.add('expanded');
                }
                parent = parent.parentElement;
              }
            }
          }

          // Expand navigation to page
          function expandNavigationTo(pageId) {
            function findPageInNavigation(items, id, path = []) {
              for (let i = 0; i < items.length; i++) {
                const item = items[i];
                const currentPath = [...path, item];

                if (item.id === id) {
                  return currentPath;
                }

                if (item.children && item.children.length > 0) {
                  const result = findPageInNavigation(item.children, id, currentPath);
                  if (result) {
                    return result;
                  }
                }
              }
              return null;
            }

            const path = findPageInNavigation(navigationConfig, pageId);
            if (!path) return;

            for (let i = 0; i < path.length - 1; i++) {
              const item = path[i];
              const li = document.querySelector(`.sidebar li a[data-id="${item.id}"]`).parentElement;
              li.classList.add('expanded');
            }
          }

          // Handle popstate
          function handlePopState(event) {
            const pageId = event.state?.pageId || getPageIdFromUrl() || navigationConfig[0]?.id;
            debug('Popstate event, loading page:', pageId);
            navigateToPage(pageId, false);
          }

          // Get page ID from URL
          function getPageIdFromUrl() {
            return window.location.hash.substring(1) || null;
          }

          // Get page title
          function getPageTitle(pageId) {
            if (window.contentIdMap && contentIdMap[pageId]) {
              return contentIdMap[pageId].title;
            }

            function findTitleInNav(items, id) {
              for (const item of items) {
                if (item.id === id) {
                  return item.title;
                }
                if (item.children && item.children.length > 0) {
                  const title = findTitleInNav(item.children, id);
                  if (title) return title;
                }
              }
              return null;
            }

            const navTitle = findTitleInNav(navigationConfig, pageId);
            if (navTitle) return navTitle;

            return pageId.split(/-|_/).map(word =>
              word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
          }

          // Show error content
          function showErrorContent(pageId) {
            console.error('Failed to load content:', pageId);
            contentEl.innerHTML = `
              <div class="error">
                <h2>Content Not Found</h2>
                <p>The requested content "${pageId}" could not be loaded.</p>
                <p>Please select another topic from the navigation menu.</p>
              </div>
            `;
            document.body.classList.remove('loading');
          }

          // Enhance tables
          function enhanceTables() {
            const tables = document.querySelectorAll('#content table');
            tables.forEach(table => {
              if (!table.className.includes('table')) {
                table.classList.add('table');
              }
              
              if (!table.parentElement.className.includes('table-container')) {
                const wrapper = document.createElement('div');
                wrapper.className = 'table-container';
                table.parentNode.insertBefore(wrapper, table);
                wrapper.appendChild(table);
              }
            });
          }

          // Search functionality
          function performSearch() {
            const query = searchInput.value.toLowerCase().trim();
            searchResultsEl.innerHTML = '';

            if (query.length < 2) {
              if (query.length > 0) {
                searchResultsEl.innerHTML = '<li><p>Please enter at least 2 characters to search.</p></li>';
              }
              return;
            }

            debug('Performing search for:', query);

            const results = [];
            for (const id in contentIdMap) {
              if (contentIdMap.hasOwnProperty(id) && id !== 'default') {
                const item = contentIdMap[id];
                const title = item.title.toLowerCase();
                const content = item.content ? item.content.toLowerCase() : '';

                let snippet = '';
                let matchCount = 0;

                if (title.includes(query)) {
                  matchCount += 10;
                  snippet = `Found in title: "${highlightMatch(item.title, query)}"`;
                }

                const contentMatches = content.split(query).length - 1;
                if (contentMatches > 0) {
                  matchCount += contentMatches;
                  const matchIndex = content.indexOf(query);
                  const start = Math.max(0, matchIndex - 50);
                  const end = Math.min(content.length, matchIndex + query.length + 50);
                  const context = item.content.substring(start, end);
                  snippet += (snippet ? '<br>' : '') + `...${highlightMatch(context, query)}...`;
                }

                if (matchCount > 0) {
                  results.push({ id: id, title: item.title, snippet: snippet, score: matchCount });
                }
              }
            }

            results.sort((a, b) => b.score - a.score);

            if (results.length === 0) {
              searchResultsEl.innerHTML = '<li><p>No results found for your query.</p></li>';
            } else {
              results.forEach(result => {
                const li = document.createElement('li');
                const link = document.createElement('a');
                link.href = `#${result.id}`;
                link.textContent = result.title;
                link.addEventListener('click', (e) => {
                  e.preventDefault();
                  debug('Search result clicked for ID:', result.id);
                  
                  if (!result.id || !contentIdMap[result.id]) {
                    debug('Invalid content ID in search result:', result.id);
                    alert('Error: Content not found. Please try another search result.');
                    return;
                  }
                  
                  navigateToPage(result.id);
                  searchResultsEl.innerHTML = '';
                  searchInput.value = '';
                });
                
                li.appendChild(link);
                if (result.snippet) {
                  const p = document.createElement('p');
                  p.innerHTML = result.snippet;
                  li.appendChild(p);
                }
                searchResultsEl.appendChild(li);
              });
            }
          }

          // Highlight match in search results
          function highlightMatch(text, query) {
            const regex = new RegExp(`(${query})`, 'gi');
            return text.replace(regex, '<span class="highlight">$1</span>');
          }

          // Make functions available globally
          window.toggleReviewMode = toggleReviewMode;
          window.startReviewSession = startReviewSession;
          window.promptClearReviewData = promptClearReviewData;
          window.navigateToPage = navigateToPage;

          // Initialize when DOM is ready
          document.addEventListener('DOMContentLoaded', initApp);
          EOF

      # Step 12: Create default content for container nodes
      - name: Create Default Content
        run: |
          mkdir -p ./site/content

          # Create some default content files
          cat > ./site/content/getting-started-with-cars.html << 'EOF'
          <h1>Getting Started With Cars</h1>
          <p>Welcome to the comprehensive automotive guide. This section covers the basics of car ownership and maintenance.</p>
          <ul>
            <li>Understanding your vehicle</li>
            <li>Basic maintenance schedules</li>
            <li>Emergency procedures</li>
          </ul>
          EOF

          cat > ./site/content/car-types.html << 'EOF'
          <h1>Car Types</h1>
          <p>Learn about different types of vehicles and their characteristics.</p>
          <h2>Sedan</h2>
          <p>Four-door passenger car with a separate trunk.</p>
          <h2>SUV</h2>
          <p>Sport Utility Vehicle with higher ground clearance.</p>
          EOF

          cat > ./site/content/basic-maintenance.html << 'EOF'
          <h1>Basic Maintenance</h1>
          <p>Regular maintenance is crucial for vehicle longevity and safety.</p>
          <h2>Oil Changes</h2>
          <p>Change engine oil every 3,000-5,000 miles.</p>
          <h2>Tire Care</h2>
          <p>Check tire pressure monthly and rotate tires regularly.</p>
          EOF

      # Step 13: Create Enhanced index.html
      - name: Create Enhanced Index HTML
        run: |
          cat > ./site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">

            <script>
              if (location.hostname.includes('github.io')) {
                const pathSegments = location.pathname.split('/');
                if (pathSegments.length > 1) {
                  const basePath = '/' + pathSegments[1];
                  document.write('<base href="' + basePath + '/">');
                }
              }
            </script>

            <title>Automotive Documentation - Enhanced with Supabase</title>
            <link rel="stylesheet" href="css/style.css">
          </head>
          <body>
            <div class="sidebar">
              <div class="sidebar-header">
                <h2>Navigation</h2>
                <div class="search-container">
                  <input type="text" id="searchInput" placeholder="Search...">
                  <button id="searchButton">Search</button>
                </div>
                <ul id="searchResults" class="search-results"></ul>
              </div>
              
              <div class="review-controls">
                <h3>Review System</h3>
                <div class="review-mode-toggle">
                  <button id="reviewToggle" class="review-btn">Review Mode</button>
                </div>
                <button id="startReview" class="review-btn secondary">Start Review</button>
                <button id="clearReview" class="review-btn danger">Clear All</button>
              </div>
              
              <div class="sidebar-nav">
                <div id="navigation"></div>
              </div>
            </div>

            <div class="main-content">
              <h1 id="content-title">Loading...</h1>
              <div id="loading">Loading content...</div>
              <div id="content">
                <div class="initial-loading">
                  <p>Initializing enhanced documentation viewer with Supabase...</p>
                </div>
              </div>
            </div>

            <div class="wh_print_link" style="position: fixed; top: 10px; right: 10px; z-index: 999;">
              <button title="Print page">🖨️ Print</button>
            </div>

            <script src="js/supabase-config.js"></script>
            <script src="js/navigation-config.js"></script>
            <script src="js/content-id-map.js"></script>
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF

      # Step 14: Create 404.html
      - name: Create 404 Page
        run: |
          cat > ./site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redirecting...</title>
            <script>
              sessionStorage.redirect = location.href;
              function getBasePath() {
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    return '/' + pathSegments[1];
                  }
                }
                return '';
              }
              const basePath = getBasePath();
              window.location.href = basePath + '/';
            </script>
          </head>
          <body>
            <div style="text-align: center; font-family: Arial, sans-serif; margin-top: 100px;">
              <h1>Redirecting...</h1>
              <p>If you are not redirected automatically, <a href="/">click here</a>.</p>
            </div>
          </body>
          </html>
          EOF

      # Step 15: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true

    env:
      SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}