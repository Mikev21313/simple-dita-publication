name: DITA to SPA Transformation with Auto-Generated Navigation and Review System

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install DITA-OT and required tools
      - name: Set up DITA-OT and XML tools
        run: |
          # Install XML tools
          sudo apt-get update
          sudo apt-get install -y libxml2-utils xsltproc

          # Install DITA-OT
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # Step 4: Parse DITAMAP to generate navigation structure
      - name: Parse DITAMAP Structure
        run: |
          echo "Parsing DITAMAP structure from dita-source/automotive.ditamap"

          # Create an XSLT file to transform DITAMAP to JSON navigation structure
          cat > extract-nav.xsl << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            <xsl:output method="text"/>

            <xsl:template match="/">
              [
                <xsl:apply-templates select="//topicref[not(ancestor::topicref)]"/>
              ]
            </xsl:template>

            <xsl:template match="topicref">
              <xsl:variable name="href" select="@href"/>
              <xsl:variable name="filename">
                <xsl:choose>
                  <xsl:when test="contains($href, '/')">
                    <xsl:value-of select="substring-after(substring-before($href, '.'), '/')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="substring-before($href, '.')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              <xsl:variable name="id">
                <xsl:choose>
                  <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                  <xsl:otherwise><xsl:value-of select="translate($filename, '_', '-')"/></xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              <xsl:variable name="title">
                <xsl:choose>
                  <xsl:when test="@navtitle"><xsl:value-of select="@navtitle"/></xsl:when>
                  <xsl:when test="topicmeta/navtitle"><xsl:value-of select="topicmeta/navtitle"/></xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="translate(translate($id, '-', ' '), '_', ' ')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              {
                "id": "<xsl:value-of select="$id"/>",
                "title": "<xsl:value-of select="$title"/>",
                "filename": "<xsl:value-of select="$filename"/>",
                "href": "<xsl:value-of select="$href"/>"
                <xsl:if test="topicref">
                  ,
                  "children": [
                    <xsl:apply-templates select="topicref"/>
                  ]
                </xsl:if>
              }<xsl:if test="following-sibling::topicref">,</xsl:if>
            </xsl:template>
          </xsl:stylesheet>
          EOF

          # Apply XSLT to extract navigation from DITAMAP
          xsltproc extract-nav.xsl dita-source/automotive.ditamap > ./navigation-structure.json

          # Fix any JSON syntax issues
          sed -i 's/\\n//g; s/\\t//g; s/\\"//g; s/\\//g; s/  / /g' ./navigation-structure.json

          # Create a shell script to handle filename to id mapping
          cat > ./generate-id-map.sh << 'EOF'
          #!bin/bash

          # Function to convert underscore filenames to hyphenated ids
          function filename_to_id() {
            local filename=$1
            echo "${filename//_/-}"
          }

          # Function to generate a title from an ID
          function id_to_title() {
            local id=$1
            # Replace hyphens with spaces and capitalize each word
            echo "$id" | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g'
          }

          # Ensure directory exists
          mkdir -p ./site/js

          # Generate ID to title mapping as JavaScript
          echo "// Auto-generated content ID mapping" > ./site/js/content-id-map.js
          echo "const contentIdMap = {" >> ./site/js/content-id-map.js

          # Process each HTML file in the site directory
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            filename=$(basename "$file" .html)
            id=$(filename_to_id "$filename")
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)

            # If no title found, generate one from the ID
            if [ -z "$title" ]; then
              title=$(id_to_title "$id")
            fi

            # Handle special characters for shell safety
            title=$(echo "$title" | sed 's/"/\\"/g')

            # Add to content map file directly
            echo "  \"$id\": { \"title\": \"$title\", \"filename\": \"$filename\" }," >> ./site/js/content-id-map.js
          done

          # Close the mapping object
          echo "  \"default\": { \"title\": \"Automotive Documentation\" }" >> ./site/js/content-id-map.js
          echo "};" >> ./site/js/content-id-map.js
          EOF

          chmod +x ./generate-id-map.sh

          echo "DITAMAP parsing complete"
          cat ./navigation-structure.json

      # Step 5: Transform DITA to HTML and prepare images
      - name: Transform DITA to HTML and Prepare Images
        run: |
          # Using HTML5 format with parameters for better output
          ./dita-ot-4.0.2/bin/dita --input=dita-source/automotive.ditamap --format=html5 --output=./site
          echo "DITA transformation complete"

          # Create content directory for SPA fragments
          mkdir -p ./site/content
          mkdir -p ./site/images

          # List all DITA source content for debugging
          echo "Full content of dita-source directory:"
          find ./dita-source -type f | sort

          # Copy all image files from dita-source to the images directory
          echo "Copying all potential image files from dita-source:"
          find ./dita-source -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -exec cp -v {} ./site/images/ \;

          # Also look for images in subdirectories
          find ./dita-source -type d -name "*images*" -o -name "*img*" | while read dir; do
            echo "Copying from image directory: $dir"
            cp -rv $dir/* ./site/images/ || echo "No files in $dir"
          done

          # Extract image paths from HTML output
          echo "Extracting image references from HTML files:"
          grep -r "img src" ./site --include="*.html" | sed -E 's/.*src="([^"]*).*/\1/' > html-image-refs.txt
          grep -r "image href" ./site --include="*.html" | sed -E 's/.*href="([^"]*).*/\1/' >> html-image-refs.txt

          # Copy any image references found to the images directory
          cat html-image-refs.txt | while read imgpath; do
            # Extract just the filename if it's a path
            filename=$(basename "$imgpath")
            # Find the source file
            find ./site -name "$filename" -exec cp -v {} ./site/images/ \;
          done

          # Find any image references in the HTML output and copy them
          find ./site -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -not -path "./site/images/*" -exec cp -v {} ./site/images/ \;

          # Create placeholder images if no images are found
          if [ ! "$(ls -A ./site/images 2>/dev/null)" ]; then
            echo "Creating placeholder test images"
            # Use base64 encoded 1x1 pixel transparent PNG
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > ./site/images/test.png
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > ./site/images/2.jpg
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > ./site/images/3.jpg
          fi

          # Correct image file permissions
          chmod -R 644 ./site/images/* || echo "No files to change permissions"

          # List files in the images directory
          echo "Files in images directory:"
          ls -la ./site/images/ || echo "No files in images directory"

      # Step 6: Process HTML files
      - name: Process HTML Content
        run: |
          # Create content directory for SPA fragments
          mkdir -p ./site/content
          mkdir -p ./site/js

          # Process each HTML file to extract content
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            # Skip processing if this is the index.html we'll create later
            if [[ "$file" == "./site/index.html" ]]; then
              continue
            fi

            filename=$(basename "$file")
            id="${filename%.html}"
            hyphenated_id="${id//_/-}"
            echo "Processing $filename (ID: $id, Hyphenated ID: $hyphenated_id)"

            # Extract content from file
            content=$(sed -n '/<body/,/<\/body>/p' "$file" |
                      sed '/<body/d;/<\/body>/d' |
                      sed '/<header/,/<\/header>/d' |
                      sed '/<nav/,/<\/nav>/d' |
                      sed '/<footer/,/<\/footer>/d')

            # Fix image paths to use base SPA image directory
            # 1. First convert DITA <image> tags to standard HTML <img> tags
            content=$(echo "$content" | sed -E 's/<image([^>]*)href="([^"]*)"([^>]*)>/<img\1src="\2"\3>/gi')

            # 2. Fix various image paths to use base SPA image directory
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="[^"]*\/([^\/"]*)\.([a-zA-Z0-9]+)"/<img\1src="images\/\2.\3"/gi')

            # 3. Fix remaining img paths that might just be filenames
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="([^\/:"]*)\.(jpg|jpeg|png|gif|svg)"/<img\1src="images\/\2.\3"/gi')

            # 4. Also handle images that might already have been correctly fixed
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="\/images\//<img\1src="images\//gi')

            # Get title from the original file
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '_-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi

            # Create content file with original filename
            echo "$content" > "./site/content/$id.html"

            # Also create a hyphenated version
            if [[ "$id" != "$hyphenated_id" ]]; then
              echo "$content" > "./site/content/$hyphenated_id.html"
              echo "Created mapping: $id.html → $hyphenated_id.html"
            fi
          done

          # Create a content ID mapping file (this block is repeated, but essential for the search)
          echo "// Auto-generated content ID mapping" > ./site/js/content-id-map.js
          echo "const contentIdMap = {" >> ./site/js/content-id-map.js

          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            filename=$(basename "$file" .html)
            id="${filename//_/-}" # Hyphenated ID for routing
            original_filename="$filename" # Keep original filename for lookup
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            raw_content=$(cat "$file" | tr '\n' ' ' | sed 's/<[^>]*>//g' | sed 's/&nbsp;/ /g' | sed 's/  */ /g' | tr -d '\n\r') # Extract text for search

            # Skip if already processed (to avoid duplicates for hyphenated/underscored IDs)
            if grep -q "\"$id\":" ./site/js/content-id-map.js; then
              continue
            fi

            # If no title found, generate one from the ID
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi

            # Escape quotes in title and content
            title=$(echo "$title" | sed 's/"/\\"/g')
            raw_content=$(echo "$raw_content" | sed 's/"/\\"/g')

            # Add to content map file with raw content for search
            echo "  \"$id\": { \"title\": \"$title\", \"filename\": \"$original_filename\", \"content\": \"$raw_content\" }," >> ./site/js/content-id-map.js
          done

          # Close the mapping object
          echo "  \"default\": { \"title\": \"Automotive Documentation\", \"filename\": \"\", \"content\": \"\" }" >> ./site/js/content-id-map.js
          echo "};" >> ./site/js/content-id-map.js


      # Step 7: Generate Navigation Configuration
      - name: Generate Navigation Configuration
        run: |
          mkdir -p ./site/js ./site/css

          # Convert JSON to JavaScript navigation config
          cat > ./site/js/navigation-config.js << 'EOF'
          // Auto-generated navigation structure from DITAMAP
          const navigationConfig =
          EOF

          # Append the parsed JSON structure
          cat ./navigation-structure.json >> ./site/js/navigation-config.js
          echo ";" >> ./site/js/navigation-config.js

          echo "Navigation configuration generated from DITAMAP structure"

      # Step 8: Create SPA CSS with improved styling and review system (ENHANCED)
      - name: Create Enhanced SPA CSS with Review System
        run: |
          cat > ./site/css/style.css << 'EOF'
          /* General styles based on Oxygen WebHelp theme with Review System */
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            display: flex;
            height: 100vh;
            width: 100%;
            overflow: hidden;
            color: #333;
            background-color: #f8f8f8;
          }

          /* Sidebar styling */
          .sidebar {
            width: 280px;
            background-color: #e0f7f7; /* Light cyan background */
            padding: 15px;
            height: 100vh;
            overflow-y: auto;
            border-right: 1px solid #c0e0e0;
            display: flex;
            flex-direction: column;
            box-shadow: 2px 0 5px rgba(0,0,0,0.05);
          }

          .main-content {
            flex: 1;
            padding: 30px;
            height: 100vh;
            overflow-y: auto;
            background-color: #ffffff;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.02);
            position: relative;
          }

          .sidebar h2 {
            font-weight: 500;
            margin-top: 0;
            margin-bottom: 15px;
            color: #00747a; /* Teal color for headings */
            border-bottom: 2px solid #80cbc4;
            padding-bottom: 10px;
            font-size: 1.4em;
          }

          /* Navigation styling */
          .sidebar-nav {
            flex: 1;
            overflow-y: auto;
            margin-top: 15px;
          }

          .sidebar ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 5px;
          }

          .sidebar ul ul {
            padding-left: 20px;
            margin-top: 5px;
            margin-bottom: 0;
          }

          .sidebar li {
            margin-bottom: 6px;
            position: relative;
          }

          /* Toggle arrow styling */
          .sidebar .toggle-arrow {
            display: inline-block;
            width: 18px;
            height: 18px;
            position: absolute;
            left: 0;
            top: 4px;
            cursor: pointer;
            z-index: 10;
            color: #00747a;
          }

          .sidebar .toggle-arrow:before {
            content: "▶";
            display: inline-block;
            font-size: 10px;
            transition: transform 0.2s;
          }

          .sidebar li.expanded > .toggle-arrow:before {
            transform: rotate(90deg);
          }

          .sidebar li.has-children > ul {
            display: none;
          }

          .sidebar li.has-children.expanded > ul {
            display: block;
          }

          .sidebar a {
            color: #00747a;
            text-decoration: none;
            display: block;
            padding: 6px 5px 6px 22px;
            border-radius: 4px;
            transition: background-color 0.2s, color 0.2s;
            cursor: pointer;
            font-size: 0.95em;
          }

          .sidebar a:hover {
            background-color: #e1f5fe;
            color: #006064;
          }

          .sidebar a.active {
            background-color: #80deea;
            font-weight: bold;
            color: #006064;
            box-shadow: inset 3px 0 0 #00acc1;
          }

          /* Review Controls Section */
          .review-controls {
            border-top: 2px solid #80cbc4;
            padding-top: 15px;
            margin-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
          }

          .review-controls h3 {
            color: #00747a;
            font-size: 1.1em;
            margin-bottom: 10px;
          }

          .review-mode-toggle {
            display: flex;
            gap: 5px;
          }

          .review-btn {
            padding: 8px 12px;
            border: 1px solid #00acc1;
            background: linear-gradient(135deg, #00acc1, #0097a7);
            color: white;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9em;
            transition: all 0.3s;
            text-align: center;
            flex: 1;
          }

          .review-btn:hover {
            background: linear-gradient(135deg, #0097a7, #00838f);
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
          }

          .review-btn.active {
            background: linear-gradient(135deg, #ff6f00, #e65100);
            border-color: #ff6f00;
          }

          .review-btn.secondary {
            background: linear-gradient(135deg, #546e7a, #455a64);
            border-color: #546e7a;
            font-size: 0.85em;
            padding: 6px 10px;
          }

          /* Search Bar Styling */
          .search-container {
            margin-bottom: 15px;
            display: flex;
            gap: 5px;
            width: 100%;
            position: relative;
          }

          .search-container input[type="text"] {
            flex-grow: 1;
            min-width: 0;
            padding: 8px 10px;
            border: 1px solid #b0e0e6;
            border-radius: 5px;
            font-size: 0.9em;
            outline: none;
            transition: border-color 0.3s, box-shadow 0.3s;
          }

          .search-container input[type="text"]:focus {
            border-color: #4dd0e1;
            box-shadow: 0 0 5px rgba(0, 188, 212, 0.3);
          }

          .search-container button {
            padding: 8px 10px;
            background-color: #00acc1;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
            white-space: nowrap;
            min-width: 60px;
            font-weight: normal;
          }

          .search-container button:hover {
            background-color: #0097a7;
          }

          /* Search Results Styling */
          .search-results {
            list-style-type: none;
            padding: 0;
            margin-top: 15px;
            margin-bottom: 15px;
            border-top: 1px solid #e0e0e0;
            border-bottom: 1px solid #e0e0e0;
            padding-top: 10px;
            padding-bottom: 10px;
            max-height: 300px;
            overflow-y: auto;
            width: 100%;
            background-color: #f5f9f9;
          }

          .search-results li {
            margin-bottom: 10px;
            padding: 8px;
            border-bottom: 1px dashed #e0e0e0;
          }

          .search-results li:last-child {
            border-bottom: none;
            margin-bottom: 0;
          }

          .search-results a {
            color: #0097a7;
            text-decoration: none;
            font-weight: bold;
            display: block;
            padding: 4px 0;
          }

          .search-results a:hover {
            background-color: #e1f5fe;
            border-radius: 4px;
          }

          .highlight {
            background-color: #fff9c4;
            font-weight: bold;
          }

          /* Review Mode Restrictions - Hide all review UI in normal mode */
          body:not(.review-mode) .review-toolbar,
          body:not(.review-mode) .comment-panel,
          body:not(.review-mode) .comment-dialog,
          body:not(.review-mode) .dialog-overlay,
          body:not(.review-mode) .image-modal,
          body:not(.review-mode) [data-comment-id],
          body:not(.review-mode) .review-comment-highlight,
          body:not(.review-mode) .review-suggestion-highlight,
          body:not(.review-mode) .image-comment-marker,
          body:not(.review-mode) .comment-tooltip {
            display: none !important;
            visibility: hidden !important;
            opacity: 0 !important;
          }

          /* Ensure clean main content in normal mode */
          body:not(.review-mode) .main-content {
            background-color: #ffffff;
            padding-right: 30px;
          }

          /* Remove any potential review artifacts from normal mode */
          body:not(.review-mode) *[class*="review-"],
          body:not(.review-mode) *[class*="comment-"],
          body:not(.review-mode) *[class*="annotation-"] {
            display: none !important;
          }

          /* Override any review mode styling in normal mode */
          body:not(.review-mode) {
            background: #f8f8f8 !important;
          }

          /* Print button integration into main interface */
          .main-print-button {
            position: fixed;
            top: 15px;
            right: 15px;
            background: linear-gradient(135deg, #00acc1, #0097a7);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9em;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            transition: all 0.3s;
            z-index: 999;
            display: flex;
            align-items: center;
            gap: 8px;
          }

          .main-print-button:hover {
            background: linear-gradient(135deg, #0097a7, #00838f);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
          }

          /* Review mode print integration */
          .review-mode .main-print-button {
            top: 70px; /* Move down when review toolbar is present */
            background: linear-gradient(135deg, #ff9800, #f57c00);
          }

          .review-mode .main-print-button:hover {
            background: linear-gradient(135deg, #f57c00, #ef6c00);
          }

          /* Comment Panel Integration */
          .comment-panel {
            position: static !important;
            width: 100%;
            max-width: none;
            right: auto;
            top: auto;
            transform: none;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            margin: 20px 0;
            padding: 20px;
            box-shadow: none;
          }

          .review-mode .comment-panel {
            display: block;
          }

          .comment-panel h3 {
            color: #495057;
            margin-bottom: 15px;
            font-size: 1.2em;
            border-bottom: 2px solid #007bff;
            padding-bottom: 8px;
          }

          /* Remove floating comment panel toggle */
          .comment-panel-toggle {
            display: none !important;
          }

          /* Ensure comment panel is integrated into main content flow */
          .review-mode .main-content {
            background-color: #fffbf0;
            display: flex;
            flex-direction: column;
            gap: 20px;
          }

          .review-mode .content-area {
            order: 1;
          }

          .review-mode .comment-panel {
            order: 2;
            position: relative;
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
          }

          /* Clean review toolbar styling */
          .review-mode .review-toolbar {
            background: rgba(255, 193, 7, 0.1);
            border: 1px solid #ffc107;
            border-radius: 6px;
            padding: 12px 20px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
          }

          .review-mode .review-toolbar h3 {
            color: #856404;
            margin: 0;
            font-size: 1.1em;
          }

          /* Hide any floating review artifacts */
          .floating-review-controls,
          .review-overlay-buttons,
          .review-mode .review-toolbar-btn,
          .review-mode .review-toolbar-actions {
            display: none !important;
            visibility: hidden !important;
          }

          /* Remove fixed positioned review elements */
          .review-mode [style*="position: fixed"]:not(.main-print-button),
          .review-mode [style*="position:fixed"]:not(.main-print-button) {
            position: static !important;
          }

          /* Clean up any absolute positioned review artifacts */
          .review-mode .review-controls-overlay,
          .review-mode .floating-controls {
            display: none !important;
          }

          .review-toolbar {
            background: linear-gradient(135deg, #2c5aa0, #1e3a8a);
            color: white;
            padding: 10px 15px;
            margin: -30px -30px 20px -30px;
            display: none;
            align-items: center;
            gap: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
          }

          .review-mode .review-toolbar {
            display: flex;
          }

          .review-toolbar h3 {
            margin: 0;
            color: white;
          }

          .review-toolbar-actions {
            display: flex;
            gap: 10px;
            margin-left: auto;
          }

          .review-toolbar-btn {
            padding: 6px 12px;
            background: rgba(255,255,255,0.2);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.85em;
            transition: all 0.2s;
          }

          .review-toolbar-btn:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-1px);
          }

          /* Text Selection and Highlighting for Review */
          .review-mode .reviewable-text {
            cursor: text;
            user-select: text;
          }

          .review-mode .selected-text {
            background-color: #ffeb3b;
            border-radius: 2px;
            position: relative;
          }

          .review-comment-highlight {
            background-color: #e1f5fe;
            border-left: 3px solid #2196f3;
            padding: 2px 4px;
            margin: 2px 0;
            border-radius: 2px;
            position: relative;
            cursor: pointer;
          }

          .review-comment-highlight:hover {
            background-color: #bbdefb;
          }

          .review-suggestion-highlight {
            background-color: #fff3e0;
            border-left: 3px solid #ff9800;
            padding: 2px 4px;
            margin: 2px 0;
            border-radius: 2px;
            position: relative;
            cursor: pointer;
          }

          .review-suggestion-highlight:hover {
            background-color: #ffe0b2;
          }

          /* Comment Panel - Only visible in review mode */
          .comment-panel {
            position: fixed;
            right: 0;
            top: 0;
            width: 350px;
            height: 100vh;
            background: white;
            border-left: 2px solid #e0e0e0;
            padding: 20px;
            overflow-y: auto;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            z-index: 1000;
            box-shadow: -5px 0 15px rgba(0,0,0,0.1);
            display: none; /* Hidden by default */
          }

          .review-mode .comment-panel {
            display: block; /* Only show in review mode */
          }

          .review-mode.show-comments .comment-panel {
            transform: translateX(0);
          }

          .review-mode.show-comments .main-content {
            padding-right: 370px;
          }

          /* Hover Tooltip for Comments */
          .comment-tooltip {
            position: absolute;
            background: #2c5aa0;
            color: white;
            padding: 12px 15px;
            border-radius: 8px;
            font-size: 0.9em;
            max-width: 300px;
            z-index: 2000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            pointer-events: none;
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.2s ease;
            word-wrap: break-word;
          }

          .comment-tooltip.show {
            opacity: 1;
            transform: translateY(0);
            pointer-events: auto;
          }

          .comment-tooltip.suggestion {
            background: #ff9800;
          }

          .comment-tooltip::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 20px;
            border: 6px solid transparent;
            border-top-color: #2c5aa0;
          }

          .comment-tooltip.suggestion::after {
            border-top-color: #ff9800;
          }

          .tooltip-header {
            font-weight: bold;
            margin-bottom: 6px;
            font-size: 0.85em;
            opacity: 0.9;
          }

          .tooltip-text {
            line-height: 1.4;
            margin-bottom: 8px;
          }

          /* Image Comment Indicators */
          .image-comment-marker {
            position: absolute;
            width: 24px;
            height: 24px;
            background: #2196f3;
            border: 2px solid white;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 12px;
            font-weight: bold;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            z-index: 100;
            transition: all 0.2s;
          }

          .image-comment-marker.suggestion {
            background: #ff9800;
          }

          .image-comment-marker:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 12px rgba(0,0,0,0.4);
          }

          .image-comment-container {
            position: relative;
            display: inline-block;
          }

          .reviewable-image {
            cursor: crosshair;
            border: 2px dashed transparent;
            transition: border-color 0.2s;
          }

          .review-mode .reviewable-image:hover {
            border-color: #2196f3;
          }

          .comment-panel h3 {
            color: #2c5aa0;
            border-bottom: 2px solid #e1f5fe;
            padding-bottom: 10px;
            margin-bottom: 20px;
          }

          .comment-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            position: relative;
          }

          .comment-item.suggestion {
            background: #fff8e1;
            border-color: #ffcc02;
          }

          .comment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            font-size: 0.9em;
            color: #666;
          }

          .comment-type {
            background: #2196f3;
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.75em;
            font-weight: bold;
          }

          .comment-type.suggestion {
            background: #ff9800;
          }

          .comment-content {
            background: white;
            padding: 10px;
            border-radius: 4px;
            border: 1px solid #e0e0e0;
            margin-bottom: 10px;
          }

          .comment-actions {
            display: flex;
            gap: 5px;
            justify-content: flex-end;
          }

          .comment-btn {
            padding: 4px 8px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 3px;
            cursor: pointer;
            font-size: 0.8em;
            transition: all 0.2s;
          }

          .comment-btn:hover {
            background: #f5f5f5;
          }

          .comment-btn.resolve {
            background: #4caf50;
            color: white;
            border-color: #4caf50;
          }

          .comment-btn.delete {
            background: #f44336;
            color: white;
            border-color: #f44336;
          }

          /* Comment Creation Dialog */
          .comment-dialog {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border: 2px solid #2c5aa0;
            border-radius: 8px;
            padding: 20px;
            width: 400px;
            max-width: 90vw;
            z-index: 2000;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            display: none;
          }

          .comment-dialog.show {
            display: block;
          }

          .dialog-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0,0,0,0.5);
            z-index: 1999;
            display: none;
          }

          .dialog-overlay.show {
            display: block;
          }

          .comment-dialog h3 {
            color: #2c5aa0;
            margin-bottom: 15px;
          }

          .comment-dialog textarea {
            width: 100%;
            height: 100px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-family: inherit;
            font-size: 0.9em;
            resize: vertical;
          }

          .dialog-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 15px;
          }

          .dialog-btn {
            padding: 8px 16px;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
            transition: all 0.2s;
          }

          .dialog-btn.primary {
            background: #2c5aa0;
            color: white;
            border-color: #2c5aa0;
          }

          .dialog-btn.primary:hover {
            background: #1e3a8a;
          }

          .dialog-btn.secondary {
            background: #f5f5f5;
          }

          .dialog-btn.secondary:hover {
            background: #e0e0e0;
          }

          /* Content styling */
          .main-content h1, .main-content h2, .main-content h3, .main-content h4 {
            font-weight: 500;
            margin-top: 1.5em;
            margin-bottom: 0.8em;
            color: #00838f;
          }
          .main-content h1 {
            font-size: 2em;
            border-bottom: 1px solid #e0e0e0;
            padding-bottom: 10px;
            margin-top: 0;
          }
          .main-content h2 { font-size: 1.5em; }
          .main-content h3 { font-size: 1.3em; }
          .main-content h4 { font-size: 1.1em; }

          .main-content p {
            margin-bottom: 1em;
            line-height: 1.6;
          }

          .main-content img {
            max-width: 100%;
            height: auto;
            display: block;
            margin: 1em auto;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
          }

          /* Table styling */
          .main-content table {
            width: 100%;
            border-collapse: collapse;
            margin: 1.5em 0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            font-size: 0.95em;
          }
          
          .main-content th, .main-content td {
            border: 1px solid #b2dfdb;
            padding: 10px;
            text-align: left;
          }
          
          .main-content th {
            background-color: #e0f2f1;
            font-weight: bold;
            color: #00796b;
          }
          
          .main-content tr:nth-child(even) {
            background-color: #f5f9f9;
          }
          
          .main-content tr:hover {
            background-color: #e1f5fe;
          }
          
          .table-container {
            overflow-x: auto;
            margin-bottom: 1.5em;
          }

          .main-content ul, .main-content ol {
            margin-left: 2em;
            margin-bottom: 1em;
          }
          
          .main-content li {
            margin-bottom: 0.5em;
          }

          /* Welcome screen styling */
          .welcome-screen {
            text-align: center;
            padding: 40px 20px;
            color: #00838f;
          }

          .welcome-screen h2 {
            margin-bottom: 20px;
            font-size: 2em;
          }

          /* Loading state */
          #loading {
            display: none;
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
          }

          .loading #loading {
            display: block;
          }

          /* Error state */
          .error {
            background-color: #ffebee;
            border-left: 4px solid #f44336;
            padding: 15px;
            margin-bottom: 20px;
            color: #333;
          }

          .error h2 {
            color: #d32f2f;
            margin-top: 0;
          }

          /* Header styling similar to Oxygen WebHelp */
          .navbar {
            background-color: #00838f;
            color: white;
            padding: 10px 0;
            margin-bottom: 20px;
          }

          .navbar-default {
            border: none;
          }

          /* Print button */
          .wh_print_link {
            display: inline-block;
            margin-left: 15px;
          }

          .wh_print_link button {
            background: transparent;
            border: none;
            color: #00838f;
            cursor: pointer;
          }

          /* Review Export Options */
          .export-options {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #ddd;
          }

          .export-btn {
            background: linear-gradient(135deg, #4caf50, #388e3c);
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.85em;
            margin-bottom: 5px;
            width: 100%;
            transition: all 0.2s;
          }

          .export-btn:hover {
            background: linear-gradient(135deg, #388e3c, #2e7d32);
            transform: translateY(-1px);
          }

          /* Responsive design */
          @media (max-width: 768px) {
            body {
              flex-direction: column;
              height: auto;
            }

            .sidebar {
              width: 100%;
              height: auto;
              max-height: 40vh;
              border-right: none;
              border-bottom: 1px solid #b2ebf2;
            }

            .main-content {
              height: auto;
              min-height: 60vh;
            }

            .comment-panel {
              width: 100%;
              position: fixed;
              top: 0;
              right: 0;
              transform: translateY(100%);
            }

            .review-mode.show-comments .comment-panel {
              transform: translateY(0);
            }

            .review-mode.show-comments .main-content {
              padding-right: 30px;
            }
          }
          EOF

      # Step 9: Create Enhanced SPA JavaScript Application with Review System
      - name: Create Enhanced SPA Application with Review System
        run: |
          cat > ./site/js/app.js << 'EOF'
          // Enhanced SPA Application with dynamic navigation, search, and review system

          // DOM Elements
          const contentEl = document.getElementById('content');
          const contentTitleEl = document.getElementById('content-title');
          const navigationEl = document.getElementById('navigation');
          const searchInput = document.getElementById('searchInput');
          const searchButton = document.getElementById('searchButton');
          const searchResultsEl = document.getElementById('searchResults');

          // Review System Elements
          const reviewToggleBtn = document.getElementById('reviewToggle');
          const startReviewBtn = document.getElementById('startReview');
          const exportReviewBtn = document.getElementById('exportReview');
          const clearReviewBtn = document.getElementById('clearReview');

          // Base path handling for GitHub Pages
          const getBasePath = () => {
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) {
                return '/' + pathSegments[1];
              }
            }
            return '';
          };

          // Current state
          window.currentPage = null;
          window.reviewMode = false;
          window.reviewData = JSON.parse(localStorage.getItem('reviewData') || '{}');
          const basePath = getBasePath();

          // Debug logging function
          function debug(message, data) {
            console.log(`[DITA-SPA] ${message}`, data || '');
          }

          // Initialize the application
          function initApp() {
            debug('Initializing app with base path:', basePath);

            // Ensure we start in normal mode (not review mode)
            window.reviewMode = false;
            document.body.classList.remove('review-mode', 'show-comments');

            // Initialize review system 
            initReviewSystem();

            // Render navigation
            renderNavigation(navigationConfig);

            // Set up event listeners
            window.addEventListener('popstate', handlePopState);
            if (searchButton && searchInput) {
                searchButton.addEventListener('click', performSearch);
                searchInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        performSearch();
                    }
                });
            }

            // Review system event listeners
            if (reviewToggleBtn) {
              reviewToggleBtn.addEventListener('click', toggleReviewMode);
            }
            if (startReviewBtn) {
              startReviewBtn.addEventListener('click', startReviewSession);
            }
            if (exportReviewBtn) {
              exportReviewBtn.addEventListener('click', exportReviewData);
            }
            if (clearReviewBtn) {
              clearReviewBtn.addEventListener('click', clearReviewData);
            }

            // Integrated print button functionality
            const mainPrintButton = document.getElementById('mainPrintButton');
            if (mainPrintButton) {
              mainPrintButton.addEventListener('click', handleMainPrint);
            }

            // Check if we have a hash in the URL
            const initialPageId = getPageIdFromUrl();

            if (initialPageId) {
              navigateToPage(initialPageId, false);
            } else {
              showWelcomeScreen();
            }
          }

          // Handle main print button - different behavior based on mode
          function handleMainPrint() {
            if (window.reviewMode) {
              // In review mode, generate review snapshot
              saveReviewSnapshot();
            } else {
              // In normal mode, regular print
              window.print();
            }
          }

          // Initialize Review System
          function initReviewSystem() {
            debug('Initializing review system');
            
            // Create comment panel
            createCommentPanel();
            
            // Create hover tooltip
            createHoverTooltip();
            
            // Create comment input dialog (simplified)
            createCommentDialog();
            
            // Create image modal
            createImageModal();
            
            // Update review button states
            updateReviewButtons();
          }

          // Create Comment Panel (only visible in review mode)
          function createCommentPanel() {
            const commentPanel = document.createElement('div');
            commentPanel.className = 'comment-panel';
            commentPanel.id = 'commentPanel';
            commentPanel.innerHTML = `
              <h3>Review Comments</h3>
              <div id="commentList"></div>
            `;
            document.body.appendChild(commentPanel);
          }

          // Create Hover Tooltip
          function createHoverTooltip() {
            const tooltip = document.createElement('div');
            tooltip.className = 'comment-tooltip';
            tooltip.id = 'commentTooltip';
            document.body.appendChild(tooltip);
          }

          // Create Simplified Comment Dialog
          function createCommentDialog() {
            const overlay = document.createElement('div');
            overlay.className = 'dialog-overlay';
            overlay.id = 'dialogOverlay';
            
            const dialog = document.createElement('div');
            dialog.className = 'comment-dialog';
            dialog.id = 'commentDialog';
            dialog.innerHTML = `
              <h3>Add Review Comment</h3>
              <div>
                <label>
                  <input type="radio" name="commentType" value="comment" checked> Comment
                </label>
                <label style="margin-left: 15px;">
                  <input type="radio" name="commentType" value="suggestion"> Suggestion
                </label>
              </div>
              <div style="margin: 15px 0;">
                <textarea id="commentText" placeholder="Enter your comment or suggestion..."></textarea>
              </div>
              <div class="image-upload-section" id="imageUploadSection">
                <input type="file" id="imageUpload" accept="image/*" multiple>
                <div id="uploadDropZone">
                  <p>📸 Add Reference Images</p>
                  <button type="button" class="upload-btn" onclick="document.getElementById('imageUpload').click()">
                    Choose Images
                  </button>
                  <p style="font-size: 0.8em; color: #666; margin-top: 8px;">
                    Drag & drop images here or click to browse<br>
                    <em>Useful for suggesting image placements or providing visual references</em>
                  </p>
                </div>
                <div id="imagePreview" class="image-preview"></div>
              </div>
              <div class="dialog-actions">
                <button class="dialog-btn secondary" onclick="closeCommentDialog()">Cancel</button>
                <button class="dialog-btn primary" onclick="saveComment()">Save</button>
              </div>
            `;
            
            document.body.appendChild(overlay);
            document.body.appendChild(dialog);
            
            // Close dialog when clicking overlay
            overlay.addEventListener('click', closeCommentDialog);
            
            // Set up image upload functionality
            setupImageUpload();
          }

          // Create Snapshot Window
          function createSnapshotWindow() {
            const snapshotWindow = document.createElement('div');
            snapshotWindow.className = 'snapshot-window';
            snapshotWindow.id = 'snapshotWindow';
            snapshotWindow.innerHTML = `
              <div class="snapshot-content">
                <div class="snapshot-toolbar">
                  <h3>Review Snapshot</h3>
                  <div class="snapshot-actions">
                    <button class="snapshot-btn" onclick="printSnapshot()">🖨️ Print</button>
                    <button class="snapshot-btn" onclick="downloadSnapshot()">💾 Download HTML</button>
                    <button class="snapshot-btn" onclick="closeSnapshotWindow()">✕ Close</button>
                  </div>
                </div>
                <div class="snapshot-viewer" id="snapshotViewer"></div>
              </div>
            `;
            
            document.body.appendChild(snapshotWindow);
            
            // Close on background click
            snapshotWindow.addEventListener('click', (e) => {
              if (e.target === snapshotWindow) {
                closeSnapshotWindow();
              }
            });
          }

          // Create Image Modal for Full View
          function createImageModal() {
            const imageModal = document.createElement('div');
            imageModal.className = 'image-modal';
            imageModal.id = 'imageModal';
            imageModal.innerHTML = `
              <button class="close-btn" onclick="closeImageModal()">✕</button>
              <img id="modalImage" src="" alt="Full size image">
            `;
            
            document.body.appendChild(imageModal);
            
            // Close on background click
            imageModal.addEventListener('click', (e) => {
              if (e.target === imageModal) {
                closeImageModal();
              }
            });
          }

          // Setup Image Upload Functionality
          function setupImageUpload() {
            const imageUpload = document.getElementById('imageUpload');
            const dropZone = document.getElementById('uploadDropZone');
            const imagePreview = document.getElementById('imagePreview');
            const uploadSection = document.getElementById('imageUploadSection');
            
            // Store uploaded images for current comment
            window.currentCommentImages = [];
            
            // File input change handler
            imageUpload.addEventListener('change', handleImageFiles);
            
            // Drag and drop handlers
            dropZone.addEventListener('dragover', (e) => {
              e.preventDefault();
              uploadSection.classList.add('dragover');
            });
            
            dropZone.addEventListener('dragleave', (e) => {
              e.preventDefault();
              uploadSection.classList.remove('dragover');
            });
            
            dropZone.addEventListener('drop', (e) => {
              e.preventDefault();
              uploadSection.classList.remove('dragover');
              
              const files = Array.from(e.dataTransfer.files).filter(file => file.type.startsWith('image/'));
              if (files.length > 0) {
                processImageFiles(files);
              }
            });
          }

          function handleImageFiles(event) {
            const files = Array.from(event.target.files);
            processImageFiles(files);
          }

          function processImageFiles(files) {
            files.forEach(file => {
              if (file.type.startsWith('image/') && file.size < 5 * 1024 * 1024) { // 5MB limit
                const reader = new FileReader();
                reader.onload = function(e) {
                  const imageData = {
                    id: generateImageId(),
                    data: e.target.result,
                    name: file.name,
                    size: file.size,
                    type: file.type
                  };
                  
                  window.currentCommentImages.push(imageData);
                  updateImagePreview();
                };
                reader.readAsDataURL(file);
              } else if (file.size >= 5 * 1024 * 1024) {
                alert(`Image "${file.name}" is too large. Please use images smaller than 5MB.`);
              }
            });
          }

          function generateImageId() {
            return 'img_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
          }

          function updateImagePreview() {
            const imagePreview = document.getElementById('imagePreview');
            
            if (window.currentCommentImages.length === 0) {
              imagePreview.innerHTML = '';
              return;
            }
            
            imagePreview.innerHTML = window.currentCommentImages.map(img => `
              <div style="display: flex; align-items: center; margin: 8px 0; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">
                <img src="${img.data}" alt="${img.name}" class="preview-image">
                <div style="margin-left: 10px; flex: 1;">
                  <div class="image-info">
                    <strong>${img.name}</strong><br>
                    ${(img.size / 1024).toFixed(1)} KB
                  </div>
                </div>
                <button class="remove-image" onclick="removeImageFromComment('${img.id}')">Remove</button>
              </div>
            `).join('');
          }

          function removeImageFromComment(imageId) {
            window.currentCommentImages = window.currentCommentImages.filter(img => img.id !== imageId);
            updateImagePreview();
          }

          function showImageModal(imageSrc) {
            const modal = document.getElementById('imageModal');
            const modalImage = document.getElementById('modalImage');
            
            modalImage.src = imageSrc;
            modal.classList.add('show');
          }

          function closeImageModal() {
            const modal = document.getElementById('imageModal');
            modal.classList.remove('show');
          }

          // Function to show welcome screen
          function showWelcomeScreen() {
            contentTitleEl.textContent = 'Documentation';
            document.title = 'Documentation';

            contentEl.innerHTML = `
              <div class="welcome-screen">
                <h2>Welcome to Documentation</h2>
                <p>Please select a topic from the navigation menu or use the search bar.</p>
                <p><strong>Review Mode:</strong> Click "Review Mode" to enable collaborative commenting, image uploads, and print snapshots.</p>
              </div>
            `;

            document.body.classList.remove('loading');
          }

          // Render the navigation menu with hierarchy
          function renderNavigation(items, parentEl = navigationEl) {
            const ul = document.createElement('ul');
            ul.setAttribute('role', 'menu');

            items.forEach(item => {
              const li = document.createElement('li');
              li.setAttribute('role', 'presentation');

              if (item.children && item.children.length > 0) {
                li.classList.add('has-children');

                const toggle = document.createElement('span');
                toggle.className = 'toggle-arrow';
                toggle.addEventListener('click', (e) => {
                  e.stopPropagation();
                  li.classList.toggle('expanded');
                });
                li.appendChild(toggle);
              }

              const a = document.createElement('a');
              a.setAttribute('role', 'menuitem');
              a.textContent = item.title;
              a.setAttribute('data-id', item.id);
              a.href = `#${item.id}`;

              a.addEventListener('click', (e) => {
                e.preventDefault();

                if (item.children && item.children.length > 0) {
                  li.classList.toggle('expanded');
                }

                navigateToPage(item.id);
                if (searchResultsEl) searchResultsEl.innerHTML = '';
                if (searchInput) searchInput.value = '';
              });

              li.appendChild(a);

              if (item.children && item.children.length > 0) {
                renderNavigation(item.children, li);
              }

              ul.appendChild(li);
            });

            parentEl.appendChild(ul);
          }

          // Expand navigation path to the current page
          function expandNavigationTo(pageId) {
            function findPageInNavigation(items, id, path = []) {
              for (let i = 0; i < items.length; i++) {
                const item = items[i];
                const currentPath = [...path, item];

                if (item.id === id) {
                  return currentPath;
                }

                if (item.children && item.children.length > 0) {
                  const result = findPageInNavigation(item.children, id, currentPath);
                  if (result) {
                    return result;
                  }
                }
              }
              return null;
            }

            const path = findPageInNavigation(navigationConfig, pageId);
            if (!path) return;

            for (let i = 0; i < path.length - 1; i++) {
              const item = path[i];
              const li = document.querySelector(`.sidebar li a[data-id="${item.id}"]`).parentElement;
              li.classList.add('expanded');
            }
          }

          // Navigate to a specific page
          function navigateToPage(pageId, pushState = true) {
            debug('Navigating to page:', pageId);
            
            if (!pageId) {
              console.error('Invalid pageId - cannot navigate to undefined page');
              showErrorContent('undefined');
              return;
            }

            updateActiveNavItem(pageId);
            expandNavigationTo(pageId);

            if (pushState) {
              history.pushState({ pageId }, '', `#${pageId}`);
            }

            document.body.classList.add('loading');
            window.currentPage = pageId;

            let contentFileName = pageId;
            if (window.contentIdMap && contentIdMap[pageId] && contentIdMap[pageId].filename) {
              contentFileName = contentIdMap[pageId].filename;
              debug('Using filename from contentIdMap:', contentFileName);
            } else {
              debug('No contentIdMap entry found for:', pageId);
            }

            loadContent(pageId)
              .then(content => {
                const title = getPageTitle(pageId);
                contentTitleEl.textContent = title;
                document.title = title;

                contentEl.innerHTML = content;
                enhanceTables();
                
                // Only initialize review features if in review mode
                if (window.reviewMode) {
                  initializeReviewForContent();
                  loadReviewDataForPage(pageId);
                }
                
                document.body.classList.remove('loading');
                debug('Content loaded successfully for:', pageId);
              })
              .catch(error => {
                debug('Error loading with ID, trying original filename:', contentFileName);
                if (contentFileName !== pageId) {
                  loadContent(contentFileName)
                    .then(content => {
                      contentTitleEl.textContent = getPageTitle(pageId);
                      document.title = getPageTitle(pageId);
                      contentEl.innerHTML = content;
                      enhanceTables();
                      
                      if (window.reviewMode) {
                        initializeReviewForContent();
                        loadReviewDataForPage(pageId);
                      }
                      
                      document.body.classList.remove('loading');
                      debug('Content loaded from original filename:', contentFileName);
                    })
                    .catch(altError => {
                      if (pageId.includes('-')) {
                        const underscoreId = pageId.replace(/-/g, '_');
                        debug('Trying with underscore version:', underscoreId);
                        loadContent(underscoreId)
                          .then(content => {
                            contentTitleEl.textContent = getPageTitle(pageId);
                            document.title = getPageTitle(pageId);
                            contentEl.innerHTML = content;
                            enhanceTables();
                            
                            if (window.reviewMode) {
                              initializeReviewForContent();
                              loadReviewDataForPage(pageId);
                            }
                            
                            document.body.classList.remove('loading');
                            debug('Content loaded with underscore version');
                          })
                          .catch(finalError => {
                            showErrorContent(pageId);
                          });
                      } else {
                        showErrorContent(pageId);
                      }
                    });
                } else {
                  showErrorContent(pageId);
                }
              });
          }

          // Review System Functions
          function toggleReviewMode() {
            window.reviewMode = !window.reviewMode;
            
            if (window.reviewMode) {
              // Create snapshot of current content for review
              createReviewSnapshot();
              document.body.classList.add('review-mode');
              debug('Review mode activated with content snapshot');
              
              if (window.currentPage) {
                initializeReviewForContent();
                loadReviewDataForPage(window.currentPage);
              }
            } else {
              document.body.classList.remove('review-mode', 'show-comments');
              // Clear any visible highlights from main view
              clearReviewHighlights();
              
              // Close any open dialogs
              const commentDialog = document.getElementById('commentDialog');
              const dialogOverlay = document.getElementById('dialogOverlay');
              if (commentDialog) commentDialog.classList.remove('show');
              if (dialogOverlay) dialogOverlay.classList.remove('show');
              
              // Hide image modal if open
              const imageModal = document.getElementById('imageModal');
              if (imageModal) imageModal.classList.remove('show');
              
              debug('Review mode deactivated - returned to clean publication view');
            }
            
            updateReviewButtons();
          }

          function createReviewSnapshot() {
            // Store original content HTML for review mode
            window.reviewSnapshot = {
              pageId: window.currentPage,
              content: contentEl.innerHTML,
              timestamp: new Date().toISOString(),
              title: getPageTitle(window.currentPage)
            };
            
            debug('Created review snapshot for:', window.currentPage);
          }

          function clearReviewHighlights() {
            // Remove all comment highlights and image markers from the current view
            const elements = document.querySelectorAll('[data-comment-id]');
            elements.forEach(element => {
              const parent = element.parentNode;
              if (parent) {
                if (element.classList.contains('image-comment-marker')) {
                  // Remove image markers
                  parent.removeChild(element);
                } else {
                  // Remove text highlights
                  parent.insertBefore(document.createTextNode(element.textContent), element);
                  parent.removeChild(element);
                }
              }
            });
            
            // Hide tooltip if visible
            hideTooltip();
          }

          function startReviewSession() {
            if (!window.currentPage) {
              alert('Please select a document to review first.');
              return;
            }
            
            if (!window.reviewMode) {
              toggleReviewMode();
            }
            
            document.body.classList.add('show-comments');
            updateCommentPanel();
          }

          function updateReviewButtons() {
            if (reviewToggleBtn) {
              reviewToggleBtn.textContent = window.reviewMode ? 'Exit Review' : 'Review Mode';
              reviewToggleBtn.classList.toggle('active', window.reviewMode);
            }
            
            // Show/hide all review control buttons based on review mode
            const startReviewBtn = document.getElementById('startReview');
            if (startReviewBtn) {
              startReviewBtn.style.display = window.reviewMode ? 'block' : 'none';
            }
            
            const exportOptions = document.querySelector('.export-options');
            if (exportOptions) {
              exportOptions.style.display = window.reviewMode ? 'block' : 'none';
            }
            
            // Update main print button text and style based on mode
            const mainPrintButton = document.getElementById('mainPrintButton');
            if (mainPrintButton) {
              const buttonText = mainPrintButton.querySelector('span');
              if (buttonText) {
                buttonText.textContent = window.reviewMode ? 'Review Snapshot' : 'Print';
              }
              
              // Update button styling
              if (window.reviewMode) {
                mainPrintButton.style.background = 'linear-gradient(135deg, #ff9800, #f57c00)';
                mainPrintButton.title = 'Generate review snapshot with comments in new window';
              } else {
                mainPrintButton.style.background = 'linear-gradient(135deg, #00acc1, #0097a7)';
                mainPrintButton.title = 'Print current page';
              }
            }
          }

          function initializeReviewForContent() {
            if (!window.reviewMode) return;
            
            // Make all text elements selectable and add event listeners
            const textElements = contentEl.querySelectorAll('p, h1, h2, h3, h4, h5, h6, li, td, th');
            
            textElements.forEach(element => {
              element.classList.add('reviewable-text');
              
              // Add mouseup event for text selection
              element.addEventListener('mouseup', handleTextSelection);
            });
            
            // Make images commentable
            const images = contentEl.querySelectorAll('img');
            images.forEach(image => {
              image.classList.add('reviewable-image');
              
              // Wrap image in container for positioning markers
              if (!image.parentElement.classList.contains('image-comment-container')) {
                const container = document.createElement('div');
                container.className = 'image-comment-container';
                image.parentNode.insertBefore(container, image);
                container.appendChild(image);
              }
              
              // Add click event for image commenting
              image.addEventListener('click', handleImageComment);
            });
            
            // Add review toolbar
            addReviewToolbar();
          }

          function addReviewToolbar() {
            if (!window.reviewMode) return; // Only show toolbar in review mode
            
            const existingToolbar = document.querySelector('.review-toolbar');
            if (existingToolbar) {
              existingToolbar.remove();
            }
            
            const toolbar = document.createElement('div');
            toolbar.className = 'review-toolbar';
            toolbar.innerHTML = `
              <h3>📝 Review Mode Active: ${getPageTitle(window.currentPage)}</h3>
            `;
            
            contentEl.insertBefore(toolbar, contentEl.firstChild);
            
            // Show comment panel by default in review mode
            if (window.currentPage) {
              updateCommentPanel();
              document.body.classList.add('show-comments');
            }
          }

          function handleTextSelection(event) {
            if (!window.reviewMode) return;
            
            const selection = window.getSelection();
            if (selection.toString().trim().length === 0) return;
            
            const selectedText = selection.toString().trim();
            const range = selection.getRangeAt(0);
            
            // Store selection data for comment creation
            window.currentSelection = {
              type: 'text',
              text: selectedText,
              element: event.target,
              range: range.cloneRange()
            };
            
            // Show comment dialog
            setTimeout(() => showCommentDialog(), 100);
          }

          function handleImageComment(event) {
            if (!window.reviewMode) return;
            
            event.preventDefault();
            
            const image = event.target;
            const rect = image.getBoundingClientRect();
            const containerRect = image.parentElement.getBoundingClientRect();
            
            // Calculate click position relative to image
            const x = ((event.clientX - rect.left) / rect.width) * 100;
            const y = ((event.clientY - rect.top) / rect.height) * 100;
            
            // Store image selection data
            window.currentSelection = {
              type: 'image',
              element: image,
              position: { x: x, y: y },
              imageSrc: image.src,
              imageAlt: image.alt || 'Image'
            };
            
            // Show comment dialog
            showCommentDialog();
          }

          function showCommentDialog() {
            const dialog = document.getElementById('commentDialog');
            const overlay = document.getElementById('dialogOverlay');
            
            dialog.classList.add('show');
            overlay.classList.add('show');
            
            // Focus on textarea
            document.getElementById('commentText').focus();
          }

          function closeCommentDialog() {
            const dialog = document.getElementById('commentDialog');
            const overlay = document.getElementById('dialogOverlay');
            
            dialog.classList.remove('show');
            overlay.classList.remove('show');
            
            // Clear form
            document.getElementById('commentText').value = '';
            document.querySelector('input[name="commentType"]:checked').checked = false;
            document.querySelector('input[name="commentType"][value="comment"]').checked = true;
            
            // Clear uploaded images
            window.currentCommentImages = [];
            const imagePreview = document.getElementById('imagePreview');
            if (imagePreview) {
              imagePreview.innerHTML = '';
            }
            const imageUpload = document.getElementById('imageUpload');
            if (imageUpload) {
              imageUpload.value = '';
            }
            
            // Clear selection
            window.getSelection().removeAllRanges();
            window.currentSelection = null;
          }

          function saveComment() {
            if (!window.currentSelection) {
              closeCommentDialog();
              return;
            }
            
            const commentText = document.getElementById('commentText').value.trim();
            const commentType = document.querySelector('input[name="commentType"]:checked').value;
            
            if (!commentText && (!window.currentCommentImages || window.currentCommentImages.length === 0)) {
              alert('Please enter a comment or add at least one image.');
              return;
            }
            
            // Create comment object (handle both text and image comments)
            const comment = {
              id: generateCommentId(),
              pageId: window.currentPage,
              type: commentType,
              text: commentText,
              timestamp: new Date().toISOString(),
              resolved: false,
              selectionType: window.currentSelection.type,
              uploadedImages: window.currentCommentImages ? [...window.currentCommentImages] : []
            };
            
            if (window.currentSelection.type === 'text') {
              comment.selectedText = window.currentSelection.text;
            } else if (window.currentSelection.type === 'image') {
              comment.imageSrc = window.currentSelection.imageSrc;
              comment.imageAlt = window.currentSelection.imageAlt;
              comment.position = window.currentSelection.position;
              comment.selectedText = `Image: ${window.currentSelection.imageAlt}`;
            }
            
            // Store comment
            if (!window.reviewData[window.currentPage]) {
              window.reviewData[window.currentPage] = {
                comments: [],
                lastModified: new Date().toISOString()
              };
            }
            
            window.reviewData[window.currentPage].comments.push(comment);
            window.reviewData[window.currentPage].lastModified = new Date().toISOString();
            
            // Persist to localStorage
            localStorage.setItem('reviewData', JSON.stringify(window.reviewData));
            
            // Add visual indicator to document
            if (window.currentSelection.type === 'text') {
              highlightTextInDocument(window.currentSelection, comment);
            } else if (window.currentSelection.type === 'image') {
              addImageCommentMarker(window.currentSelection, comment);
            }
            
            // Update comment panel
            updateCommentPanel();
            
            // Update toolbar
            addReviewToolbar();
            
            closeCommentDialog();
            
            debug('Comment saved with images:', comment);
          }

          function highlightTextInDocument(selection, comment) {
            const span = document.createElement('span');
            span.className = comment.type === 'suggestion' ? 'review-suggestion-highlight' : 'review-comment-highlight';
            span.setAttribute('data-comment-id', comment.id);
            
            // Add hover events for tooltip (only in review mode)
            span.addEventListener('mouseenter', (e) => showTooltip(e, comment));
            span.addEventListener('mouseleave', hideTooltip);
            
            try {
              selection.range.surroundContents(span);
            } catch (e) {
              // Fallback for complex selections
              span.textContent = selection.text;
              selection.range.deleteContents();
              selection.range.insertNode(span);
            }
          }

          function addImageCommentMarker(selection, comment) {
            const image = selection.element;
            const container = image.parentElement;
            
            // Create marker element
            const marker = document.createElement('div');
            marker.className = `image-comment-marker ${comment.type}`;
            marker.setAttribute('data-comment-id', comment.id);
            marker.innerHTML = '💬';
            
            // Position marker based on click coordinates
            marker.style.left = selection.position.x + '%';
            marker.style.top = selection.position.y + '%';
            marker.style.transform = 'translate(-50%, -50%)';
            
            // Add hover events for tooltip
            marker.addEventListener('mouseenter', (e) => showTooltip(e, comment));
            marker.addEventListener('mouseleave', hideTooltip);
            
            // Add marker to container
            container.appendChild(marker);
          }

          // Hover Tooltip Functions
          function showTooltip(event, comment) {
            if (!window.reviewMode) return;
            
            const tooltip = document.getElementById('commentTooltip');
            if (!tooltip) return;
            
            // Set tooltip content (simplified - no action buttons)
            tooltip.className = `comment-tooltip ${comment.type} show`;
            tooltip.innerHTML = `
              <div class="tooltip-header">${comment.type.toUpperCase()}</div>
              <div class="tooltip-text">${comment.text}</div>
              <div class="tooltip-meta">
                Selected: "${comment.selectedText}"<br>
                ${new Date(comment.timestamp).toLocaleString()}
                ${comment.resolved ? '<br>✓ Resolved' : ''}
              </div>
            `;
            
            // Position tooltip
            positionTooltip(tooltip, event.target);
          }

          function hideTooltip() {
            const tooltip = document.getElementById('commentTooltip');
            if (tooltip) {
              tooltip.classList.remove('show');
            }
          }

          function positionTooltip(tooltip, targetElement) {
            const rect = targetElement.getBoundingClientRect();
            const tooltipRect = tooltip.getBoundingClientRect();
            
            // Position above the highlighted text
            let top = rect.top - tooltipRect.height - 10;
            let left = rect.left;
            
            // Adjust if tooltip would go off screen
            if (top < 10) {
              top = rect.bottom + 10; // Position below instead
            }
            
            if (left + tooltipRect.width > window.innerWidth - 20) {
              left = window.innerWidth - tooltipRect.width - 20;
            }
            
            if (left < 10) {
              left = 10;
            }
            
            tooltip.style.top = top + window.scrollY + 'px';
            tooltip.style.left = left + 'px';
          }

          function generateCommentId() {
            return 'comment_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
          }

          function getCommentsForPage(pageId) {
            return window.reviewData[pageId] ? window.reviewData[pageId].comments : [];
          }

          function updateCommentPanel() {
            const commentList = document.getElementById('commentList');
            if (!commentList) return;
            
            const comments = getCommentsForPage(window.currentPage);
            
            if (comments.length === 0) {
              commentList.innerHTML = '<p style="color: #666; font-style: italic;">No comments yet. Select text or click on images to add your first comment!</p>';
              return;
            }
            
            commentList.innerHTML = comments.map(comment => {
              // Generate uploaded images HTML
              const imagesHTML = comment.uploadedImages && comment.uploadedImages.length > 0 
                ? comment.uploadedImages.map(img => `
                    <div class="comment-image-container">
                      <img src="${img.data}" alt="${img.name}" class="comment-image-preview" onclick="showImageModal('${img.data}')">
                      <div class="image-caption">${img.name} (${(img.size / 1024).toFixed(1)} KB)</div>
                    </div>
                  `).join('')
                : '';
              
              return `
                <div class="comment-item ${comment.type}" data-comment-id="${comment.id}">
                  <div class="comment-header">
                    <span class="comment-type ${comment.type}">${comment.type}</span>
                    <span>${new Date(comment.timestamp).toLocaleString()}</span>
                  </div>
                  <div style="font-weight: bold; margin-bottom: 5px; font-size: 0.9em; color: #555; cursor: pointer;" onclick="scrollToComment('${comment.id}')">
                    "${comment.selectedText}" ${comment.selectionType === 'image' ? '🖼️' : ''}
                    ${comment.uploadedImages && comment.uploadedImages.length > 0 ? `📎 ${comment.uploadedImages.length} image(s)` : ''}
                  </div>
                  <div class="comment-content">${comment.text}</div>
                  ${imagesHTML}
                  <div class="comment-actions">
                    ${!comment.resolved ? `<button class="comment-btn resolve" onclick="resolveComment('${comment.id}')">Resolve</button>` : '<span style="color: #4caf50; font-size: 0.8em;">✓ Resolved</span>'}
                    <button class="comment-btn delete" onclick="deleteComment('${comment.id}')">Delete</button>
                  </div>
                </div>
              `;
            }).join('');
          }

          function scrollToComment(commentId) {
            const element = document.querySelector(`[data-comment-id="${commentId}"]`);
            if (element) {
              // Scroll element into view with smooth behavior
              element.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'center',
                inline: 'nearest'
              });
              
              // Highlight the element temporarily
              const originalStyle = element.style.cssText;
              element.style.boxShadow = '0 0 15px #2196f3';
              element.style.transform = 'scale(1.05)';
              element.style.transition = 'all 0.3s ease';
              
              // Remove highlight after 2 seconds
              setTimeout(() => {
                element.style.cssText = originalStyle;
              }, 2000);
            }
          }

          function toggleCommentPanel() {
            document.body.classList.toggle('show-comments');
            updateCommentPanel();
          }

          function resolveComment(commentId) {
            const pageData = window.reviewData[window.currentPage];
            if (pageData) {
              const comment = pageData.comments.find(c => c.id === commentId);
              if (comment) {
                comment.resolved = true;
                localStorage.setItem('reviewData', JSON.stringify(window.reviewData));
                updateCommentPanel();
                
                // Update highlight styling
                const highlight = document.querySelector(`[data-comment-id="${commentId}"]`);
                if (highlight) {
                  highlight.style.opacity = '0.5';
                  highlight.title += ' (Resolved)';
                }
              }
            }
          }

          function deleteComment(commentId) {
            if (!confirm('Are you sure you want to delete this comment?')) return;
            
            const pageData = window.reviewData[window.currentPage];
            if (pageData) {
              pageData.comments = pageData.comments.filter(c => c.id !== commentId);
              localStorage.setItem('reviewData', JSON.stringify(window.reviewData));
              
              // Remove highlight from document
              const highlight = document.querySelector(`[data-comment-id="${commentId}"]`);
              if (highlight) {
                const parent = highlight.parentNode;
                parent.insertBefore(document.createTextNode(highlight.textContent), highlight);
                parent.removeChild(highlight);
              }
              
              updateCommentPanel();
              addReviewToolbar(); // Update comment count
            }
          }

          function loadReviewDataForPage(pageId) {
            const comments = getCommentsForPage(pageId);
            
            // Clear existing highlights
            const existingHighlights = document.querySelectorAll('[data-comment-id]');
            existingHighlights.forEach(highlight => {
              const parent = highlight.parentNode;
              parent.insertBefore(document.createTextNode(highlight.textContent), highlight);
              parent.removeChild(highlight);
            });
            
            // Re-apply highlights (simplified version - in production you'd want more sophisticated text matching)
            comments.forEach(comment => {
              const textNodes = getAllTextNodes(contentEl);
              textNodes.forEach(node => {
                if (node.textContent.includes(comment.selectedText)) {
                  const parent = node.parentNode;
                  const index = node.textContent.indexOf(comment.selectedText);
                  
                  if (index !== -1) {
                    const beforeText = node.textContent.substring(0, index);
                    const selectedText = comment.selectedText;
                    const afterText = node.textContent.substring(index + selectedText.length);
                    
                    const span = document.createElement('span');
                    span.className = comment.type === 'suggestion' ? 'review-suggestion-highlight' : 'review-comment-highlight';
                    span.setAttribute('data-comment-id', comment.id);
                    span.textContent = selectedText;
                    span.title = `${comment.type}: ${comment.text}`;
                    span.addEventListener('click', () => showCommentDetails(comment.id));
                    
                    if (comment.resolved) {
                      span.style.opacity = '0.5';
                      span.title += ' (Resolved)';
                    }
                    
                    // Replace the text node
                    parent.removeChild(node);
                    if (beforeText) parent.appendChild(document.createTextNode(beforeText));
                    parent.appendChild(span);
                    if (afterText) parent.appendChild(document.createTextNode(afterText));
                    
                    return; // Only highlight first occurrence
                  }
                }
              });
            });
          }

          function getAllTextNodes(element) {
            const textNodes = [];
            const walker = document.createTreeWalker(
              element,
              NodeFilter.SHOW_TEXT,
              null,
              false
            );
            
            let node;
            while (node = walker.nextNode()) {
              if (node.textContent.trim()) {
                textNodes.push(node);
              }
            }
            
            return textNodes;
          }

          function saveReviewSnapshot() {
            if (!window.currentPage) {
              alert('No page selected for snapshot.');
              return;
            }
            
            if (!window.reviewMode) {
              alert('Print snapshot is only available in review mode.');
              return;
            }
            
            const comments = getCommentsForPage(window.currentPage);
            const pageTitle = getPageTitle(window.currentPage);
            
            // Generate print-optimized HTML with parallel annotations
            const snapshotHTML = generateSnapshotHTML(pageTitle, comments);
            
            // Open in new window instead of modal
            openSnapshotInNewWindow(snapshotHTML, pageTitle);
          }

          function openSnapshotInNewWindow(snapshotHTML, pageTitle) {
            // Final safeguard - ensure review mode is active
            if (!window.reviewMode) {
              alert('Print Snapshot functionality requires Review Mode to be active.');
              return;
            }
            
            const printWindow = window.open('', '_blank', 'width=1200,height=800,scrollbars=yes,resizable=yes');
            
            const fullHTML = `
              <!DOCTYPE html>
              <html>
              <head>
                <title>Review Snapshot - ${pageTitle}</title>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <style>
                  /* Complete print-optimized styles */
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { 
                    font-family: 'Times New Roman', serif; 
                    line-height: 1.6; 
                    color: #000; 
                    background: white;
                    padding: 20px;
                  }
                  
                  .print-snapshot { padding: 0; }
                  .snapshot-header { border-bottom: 2px solid #333; padding-bottom: 15px; margin-bottom: 30px; }
                  .snapshot-title { font-size: 24px; font-weight: bold; margin-bottom: 5px; }
                  .snapshot-meta { font-size: 12px; color: #666; font-style: italic; }
                  
                  .content-with-annotations { 
                    display: grid; 
                    grid-template-columns: 1fr 300px; 
                    gap: 30px; 
                    align-items: start; 
                  }
                  
                  .main-article { 
                    font-size: 14px; 
                    line-height: 1.6; 
                  }
                  
                  .main-article h1, .main-article h2, .main-article h3, .main-article h4 {
                    color: #333;
                    margin: 1.5em 0 0.8em 0;
                  }
                  
                  .main-article h1 { font-size: 1.8em; }
                  .main-article h2 { font-size: 1.5em; }
                  .main-article h3 { font-size: 1.3em; }
                  
                  .main-article p { margin-bottom: 1em; }
                  .main-article ul, .main-article ol { margin-left: 2em; margin-bottom: 1em; }
                  .main-article li { margin-bottom: 0.5em; }
                  
                  .main-article img {
                    max-width: 100%;
                    height: auto;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    margin: 1em 0;
                  }
                  
                  .main-article table {
                    width: 100%;
                    border-collapse: collapse;
                    margin: 1em 0;
                    border: 1px solid #ddd;
                  }
                  
                  .main-article th, .main-article td {
                    border: 1px solid #ddd;
                    padding: 8px;
                    text-align: left;
                  }
                  
                  .main-article th {
                    background-color: #f5f5f5;
                    font-weight: bold;
                  }
                  
                  .comment-annotations { 
                    font-size: 11px; 
                    background: #f9f9f9; 
                    padding: 15px; 
                    border-left: 3px solid #2196f3;
                    height: fit-content;
                  }
                  
                  .annotation-item { 
                    margin-bottom: 15px; 
                    padding-bottom: 10px; 
                    border-bottom: 1px solid #e0e0e0; 
                  }
                  
                  .annotation-item:last-child { 
                    border-bottom: none; 
                    margin-bottom: 0; 
                  }
                  
                  .annotation-marker { 
                    display: inline-block; 
                    background: #2196f3; 
                    color: white; 
                    padding: 2px 6px; 
                    border-radius: 3px; 
                    font-size: 10px; 
                    font-weight: bold; 
                    margin-right: 5px; 
                  }
                  
                  .annotation-marker.suggestion { 
                    background: #ff9800; 
                  }
                  
                  .text-marker { 
                    background: #ffeb3b; 
                    padding: 1px 3px; 
                    border-radius: 2px; 
                    font-weight: bold; 
                  }
                  
                  .comment-image-print {
                    max-width: 200px;
                    max-height: 150px;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    margin: 10px 0;
                    display: block;
                  }
                  
                  .image-marker-indicator { 
                    background: #e3f2fd; 
                    border: 1px solid #2196f3; 
                    padding: 5px; 
                    margin: 10px 0; 
                    border-radius: 4px; 
                    font-size: 12px; 
                  }
                  
                  .comment-summary { 
                    margin-top: 30px; 
                    border-top: 2px solid #333; 
                    padding-top: 15px; 
                  }
                  
                  .summary-title { 
                    font-size: 16px; 
                    font-weight: bold; 
                    margin-bottom: 15px; 
                  }
                  
                  .window-toolbar {
                    position: fixed;
                    top: 0;
                    left: 0;
                    right: 0;
                    background: #2c5aa0;
                    color: white;
                    padding: 10px 20px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    z-index: 1000;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                  }
                  
                  .window-toolbar h3 {
                    margin: 0;
                    color: white;
                    font-size: 1.1em;
                  }
                  
                  .toolbar-actions {
                    display: flex;
                    gap: 10px;
                  }
                  
                  .toolbar-btn {
                    background: rgba(255,255,255,0.2);
                    border: 1px solid rgba(255,255,255,0.3);
                    color: white;
                    padding: 6px 12px;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 0.9em;
                    transition: all 0.2s;
                  }
                  
                  .toolbar-btn:hover {
                    background: rgba(255,255,255,0.3);
                  }
                  
                  .content-wrapper {
                    margin-top: 60px;
                    padding: 20px 0;
                  }
                  
                  @media print {
                    .window-toolbar { display: none; }
                    .content-wrapper { margin-top: 0; padding: 0; }
                    body { padding: 15px; font-size: 12px; }
                    .content-with-annotations { grid-template-columns: 1fr 250px; gap: 20px; }
                    .comment-annotations { font-size: 10px; padding: 10px; }
                  }
                </style>
              </head>
              <body>
                <div class="window-toolbar">
                  <h3>Review Snapshot - ${pageTitle}</h3>
                  <div class="toolbar-actions">
                    <button class="toolbar-btn" onclick="window.print()">🖨️ Print</button>
                    <button class="toolbar-btn" onclick="downloadCurrentSnapshot()">💾 Save HTML</button>
                    <button class="toolbar-btn" onclick="window.close()">✕ Close</button>
                  </div>
                </div>
                <div class="content-wrapper">
                  ${snapshotHTML}
                </div>
                
                <script>
                  function downloadCurrentSnapshot() {
                    const htmlContent = document.documentElement.outerHTML;
                    const blob = new Blob([htmlContent], { type: 'text/html' });
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = 'review-snapshot-${window.currentPage}-' + new Date().toISOString().split('T')[0] + '.html';
                    link.click();
                    URL.revokeObjectURL(url);
                  }
                  
                  // Print shortcut
                  document.addEventListener('keydown', function(e) {
                    if (e.ctrlKey && e.key === 'p') {
                      e.preventDefault();
                      window.print();
                    }
                  });
                </script>
              </body>
              </html>
            `;
            
            printWindow.document.write(fullHTML);
            printWindow.document.close();
            printWindow.focus();
          }

          function generateSnapshotHTML(pageTitle, comments) {
            // Get clean content without review highlights
            const contentClone = contentEl.cloneNode(true);
            
            // Remove all review highlights from clone
            const highlights = contentClone.querySelectorAll('[data-comment-id]');
            highlights.forEach(highlight => {
              if (highlight.classList.contains('image-comment-marker')) {
                highlight.remove();
              } else {
                const parent = highlight.parentNode;
                if (parent) {
                  parent.insertBefore(document.createTextNode(highlight.textContent), highlight);
                  parent.removeChild(highlight);
                }
              }
            });

            // Add text markers for comments in the content
            let annotationCounter = 1;
            const annotationMap = {};

            comments.forEach(comment => {
              if (comment.selectionType === 'text') {
                // Find and mark text in content
                const walker = document.createTreeWalker(
                  contentClone,
                  NodeFilter.SHOW_TEXT,
                  null,
                  false
                );

                let node;
                while (node = walker.nextNode()) {
                  if (node.textContent.includes(comment.selectedText)) {
                    const parent = node.parentNode;
                    const text = node.textContent;
                    const index = text.indexOf(comment.selectedText);
                    
                    if (index !== -1) {
                      const beforeText = text.substring(0, index);
                      const selectedText = comment.selectedText;
                      const afterText = text.substring(index + selectedText.length);
                      
                      const marker = document.createElement('span');
                      marker.className = 'text-marker';
                      marker.innerHTML = `${selectedText}<sup>[${annotationCounter}]</sup>`;
                      
                      annotationMap[annotationCounter] = comment;
                      annotationCounter++;
                      
                      parent.removeChild(node);
                      if (beforeText) parent.appendChild(document.createTextNode(beforeText));
                      parent.appendChild(marker);
                      if (afterText) parent.appendChild(document.createTextNode(afterText));
                      
                      break;
                    }
                  }
                }
              } else if (comment.selectionType === 'image') {
                // Add image annotation markers
                const images = contentClone.querySelectorAll('img');
                images.forEach(img => {
                  if (img.src.includes(comment.imageSrc.split('/').pop())) {
                    const imageIndicator = document.createElement('div');
                    imageIndicator.className = 'image-marker-indicator';
                    imageIndicator.innerHTML = `📍 <strong>Image Comment [${annotationCounter}]:</strong> "${comment.imageAlt}"`;
                    
                    annotationMap[annotationCounter] = comment;
                    annotationCounter++;
                    
                    img.parentNode.insertBefore(imageIndicator, img.nextSibling);
                  }
                });
              }
            });

            // Generate annotations sidebar
            const annotationsHTML = Object.keys(annotationMap).map(num => {
              const comment = annotationMap[num];
              
              // Generate images for this annotation
              const commentImagesHTML = comment.uploadedImages && comment.uploadedImages.length > 0
                ? comment.uploadedImages.map(img => `
                    <div style="margin: 8px 0;">
                      <img src="${img.data}" alt="${img.name}" class="comment-image-print">
                      <div style="font-size: 9px; color: #666; margin-top: 2px;">${img.name}</div>
                    </div>
                  `).join('')
                : '';
              
              return `
                <div class="annotation-item">
                  <div>
                    <span class="annotation-marker ${comment.type}">[${num}]</span>
                    <strong>${comment.type.toUpperCase()}</strong>
                  </div>
                  <div style="margin: 5px 0; font-weight: bold;">
                    "${comment.selectedText}"
                  </div>
                  <div>${comment.text}</div>
                  ${commentImagesHTML}
                  ${comment.uploadedImages && comment.uploadedImages.length > 0 && comment.type === 'suggestion' 
                    ? '<div style="font-size: 10px; color: #ff9800; font-weight: bold; margin-top: 5px;">📍 Suggested image placement/reference</div>' 
                    : ''}
                  <div style="margin-top: 5px; font-size: 10px; color: #666;">
                    ${new Date(comment.timestamp).toLocaleString()}
                    ${comment.resolved ? ' • ✓ Resolved' : ''}
                    ${comment.uploadedImages && comment.uploadedImages.length > 0 ? ` • ${comment.uploadedImages.length} image(s)` : ''}
                  </div>
                </div>
              `;
            }).join('');

            // Generate summary statistics
            const totalComments = comments.length;
            const resolvedComments = comments.filter(c => c.resolved).length;
            const textComments = comments.filter(c => c.selectionType === 'text').length;
            const imageComments = comments.filter(c => c.selectionType === 'image').length;
            const commentsWithImages = comments.filter(c => c.uploadedImages && c.uploadedImages.length > 0).length;
            const totalUploadedImages = comments.reduce((sum, c) => sum + (c.uploadedImages ? c.uploadedImages.length : 0), 0);

                            return `
              <div class="print-snapshot">
                <div class="snapshot-header">
                  <div class="snapshot-title">${pageTitle}</div>
                  <div class="snapshot-meta">
                    Review Snapshot • Generated ${new Date().toLocaleString()} • 
                    ${totalComments} comments (${resolvedComments} resolved)
                  </div>
                </div>
                
                <div class="content-with-annotations">
                  <div class="main-article">
                    ${contentClone.innerHTML}
                  </div>
                  
                  <div class="comment-annotations">
                    <h4 style="margin-top: 0; color: #2c5aa0;">Review Comments</h4>
                    ${annotationsHTML || '<p style="font-style: italic; color: #666;">No comments</p>'}
                  </div>
                </div>
                
                <div class="comment-summary">
                  <div class="summary-title">Review Summary</div>
                  <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; font-size: 12px; margin-bottom: 15px;">
                    <div><strong>Total Comments:</strong><br>${totalComments}</div>
                    <div><strong>Text Comments:</strong><br>${textComments}</div>
                    <div><strong>Image Comments:</strong><br>${imageComments}</div>
                  </div>
                  <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; font-size: 12px;">
                    <div><strong>Resolved:</strong><br>${resolvedComments}</div>
                    <div><strong>With Images:</strong><br>${commentsWithImages}</div>
                    <div><strong>Uploaded Images:</strong><br>${totalUploadedImages}</div>
                  </div>
                </div>
              </div>
            `;
          }

          function exportReviewData() {
            if (Object.keys(window.reviewData).length === 0) {
              alert('No review data to export.');
              return;
            }
            
            const exportData = {
              exportDate: new Date().toISOString(),
              totalPages: Object.keys(window.reviewData).length,
              totalComments: Object.values(window.reviewData).reduce((sum, page) => sum + page.comments.length, 0),
              data: window.reviewData
            };
            
            const dataStr = JSON.stringify(exportData, null, 2);
            const dataBlob = new Blob([dataStr], { type: 'application/json' });
            const url = URL.createObjectURL(dataBlob);
            
            const link = document.createElement('a');
            link.href = url;
            link.download = `review-data-export-${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            
            URL.revokeObjectURL(url);
          }

          function clearReviewData() {
            if (!confirm('Are you sure you want to clear all review data? This cannot be undone.')) return;
            
            window.reviewData = {};
            localStorage.removeItem('reviewData');
            
            // Clear highlights from current page
            const highlights = document.querySelectorAll('[data-comment-id]');
            highlights.forEach(highlight => {
              const parent = highlight.parentNode;
              if (parent) {
                parent.insertBefore(document.createTextNode(highlight.textContent), highlight);
                parent.removeChild(highlight);
              }
            });
            
            // Hide any visible tooltip
            hideTooltip();
            
            // Update UI
            updateCommentPanel();
            if (window.reviewMode) {
              addReviewToolbar();
            }
            
            alert('All review data has been cleared.');
          }

          // Make functions available globally
          window.toggleReviewMode = toggleReviewMode;
          window.startReviewSession = startReviewSession;
          window.exportReviewData = exportReviewData;
          window.clearReviewData = clearReviewData;
          window.saveReviewSnapshot = saveReviewSnapshot;
          window.toggleCommentPanel = toggleCommentPanel;
          window.resolveComment = resolveComment;
          window.deleteComment = deleteComment;
          window.closeCommentDialog = closeCommentDialog;
          window.saveComment = saveComment;
          window.showTooltip = showTooltip;
          window.hideTooltip = hideTooltip;
          window.scrollToComment = scrollToComment;
          window.removeImageFromComment = removeImageFromComment;
          window.showImageModal = showImageModal;
          window.closeImageModal = closeImageModal;
          window.handleMainPrint = handleMainPrint;

          // Enhance tables with OxygenXML-like styling
          function enhanceTables() {
            const tables = document.querySelectorAll('#content table');
            tables.forEach(table => {
              if (!table.className.includes('table')) {
                table.classList.add('table');
              }
              
              if (!table.parentElement.className.includes('table-container')) {
                const wrapper = document.createElement('div');
                wrapper.className = 'table-container';
                table.parentNode.insertBefore(wrapper, table);
                wrapper.appendChild(table);
              }
            });
          }

          // Show error content when page cannot be loaded
          function showErrorContent(pageId) {
            console.error('Failed to load content:', pageId);
            contentEl.innerHTML = `
              <div class="error">
                <h2>Content Not Found</h2>
                <p>The requested content "${pageId}" could not be loaded.</p>
                <p>Please select another topic from the navigation menu.</p>
              </div>
            `;
            document.body.classList.remove('loading');
          }

          // Load content for a page
          async function loadContent(pageId) {
            const contentPath = `${basePath}/content/${pageId}.html`;
            debug('Fetching from URL:', contentPath);

            try {
              const response = await fetch(contentPath);
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status} for ${contentPath}`);
              }
              return await response.text();
            } catch (error) {
              debug('Content fetch error:', error.message);
              throw error;
            }
          }

          // Update active state in navigation
          function updateActiveNavItem(pageId) {
            const allNavItems = document.querySelectorAll('.sidebar a');
            allNavItems.forEach(item => item.classList.remove('active'));

            const activeItem = document.querySelector(`.sidebar a[data-id="${pageId}"]`);
            if (activeItem) {
              activeItem.classList.add('active');

              let parent = activeItem.parentElement;
              while (parent && !parent.classList.contains('sidebar')) {
                if (parent.classList.contains('has-children')) {
                  parent.classList.add('expanded');
                }
                parent = parent.parentElement;
              }
            }
          }

          // Handle popstate event (browser back/forward)
          function handlePopState(event) {
            const pageId = event.state?.pageId || getPageIdFromUrl() || navigationConfig[0].id;
            debug('Popstate event, loading page:', pageId);
            navigateToPage(pageId, false);
          }

          // Get page ID from URL hash
          function getPageIdFromUrl() {
            return window.location.hash.substring(1) || null;
          }

          // Get page title from content manifest
          function getPageTitle(pageId) {
            if (window.contentIdMap && contentIdMap[pageId]) {
              return contentIdMap[pageId].title;
            }

            function findTitleInNav(items, id) {
              for (const item of items) {
                if (item.id === id) {
                  return item.title;
                }
                if (item.children && item.children.length > 0) {
                  const title = findTitleInNav(item.children, id);
                  if (title) return title;
                }
              }
              return null;
            }

            const navTitle = findTitleInNav(navigationConfig, pageId);
            if (navTitle) return navTitle;

            return pageId.split(/-|_/).map(word =>
              word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
          }

          // Search functionality
          function performSearch() {
            const query = searchInput.value.toLowerCase().trim();
            searchResultsEl.innerHTML = '';

            if (query.length < 2) {
              if (query.length > 0) {
                searchResultsEl.innerHTML = '<li><p>Please enter at least 2 characters to search.</p></li>';
              }
              return;
            }

            debug('Performing search for:', query);

            const results = [];
            for (const id in contentIdMap) {
              if (contentIdMap.hasOwnProperty(id) && id !== 'default') {
                const item = contentIdMap[id];
                const title = item.title.toLowerCase();
                const content = item.content ? item.content.toLowerCase() : '';

                let snippet = '';
                let matchCount = 0;

                if (title.includes(query)) {
                  matchCount += 10;
                  snippet = `Found in title: "${highlightMatch(item.title, query)}"`;
                }

                const contentMatches = content.split(query).length - 1;
                if (contentMatches > 0) {
                  matchCount += contentMatches;
                  const matchIndex = content.indexOf(query);
                  const start = Math.max(0, matchIndex - 50);
                  const end = Math.min(content.length, matchIndex + query.length + 50);
                  const context = item.content.substring(start, end);
                  snippet += (snippet ? '<br>' : '') + `...${highlightMatch(context, query)}...`;
                }

                if (matchCount > 0) {
                  results.push({ id: id, title: item.title, snippet: snippet, score: matchCount });
                }
              }
            }

            results.sort((a, b) => b.score - a.score);

            if (results.length === 0) {
              searchResultsEl.innerHTML = '<li><p>No results found for your query.</p></li>';
            } else {
              results.forEach(result => {
                const li = document.createElement('li');
                const link = document.createElement('a');
                link.href = `#${result.id}`;
                link.textContent = result.title;
                link.addEventListener('click', (e) => {
                  e.preventDefault();
                  debug('Search result clicked for ID:', result.id);
                  
                  if (!result.id || !contentIdMap[result.id]) {
                    debug('Invalid content ID in search result:', result.id);
                    alert('Error: Content not found. Please try another search result.');
                    return;
                  }
                  
                  fetch(`${basePath}/content/${result.id}.html`)
                    .then(response => {
                      if (!response.ok) {
                        throw new Error('Content file not found');
                      }
                      navigateToPage(result.id);
                      searchResultsEl.innerHTML = '';
                      searchInput.value = '';
                    })
                    .catch(error => {
                      debug('Content not available:', error);
                      alert('Error: The selected content could not be loaded. Please try another search result.');
                    });
                });
                
                li.appendChild(link);
                if (result.snippet) {
                  const p = document.createElement('p');
                  p.innerHTML = result.snippet;
                  li.appendChild(p);
                }
                searchResultsEl.appendChild(li);
              });
            }
          }

          function highlightMatch(text, query) {
            const regex = new RegExp(`(${query})`, 'gi');
            return text.replace(regex, '<span class="highlight">$1</span>');
          }

          // Make navigateToPage available globally
          window.navigateToPage = navigateToPage;

          // Initialize the app when DOM is ready
          document.addEventListener('DOMContentLoaded', initApp);
          EOF

      # Step 10: Create Enhanced index.html with Review System UI
      - name: Create Enhanced Index HTML with Review System
        run: |
          cat > ./site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
            <meta http-equiv="Pragma" content="no-cache">
            <meta http-equiv="Expires" content="0">

            <script>
              // Set base path for GitHub Pages
              if (location.hostname.includes('github.io')) {
                const pathSegments = location.pathname.split('/');
                if (pathSegments.length > 1) {
                  const basePath = '/' + pathSegments[1];
                  document.write('<base href="' + basePath + '/">');
                  console.log('Base path set to:', basePath);
                }
              }
            </script>

            <title>Automotive Documentation - Enhanced with Review System</title>
            <link rel="stylesheet" href="css/style.css">
          </head>
          <body>
            <div class="sidebar">
              <div class="sidebar-header">
                <h2>Navigation</h2>
                <!-- Search container -->
                <div class="search-container">
                  <input type="text" id="searchInput" placeholder="Search...">
                  <button id="searchButton">Search</button>
                </div>
                <!-- Search results -->
                <ul id="searchResults" class="search-results"></ul>
              </div>
              
              <!-- Review Controls Section -->
              <div class="review-controls">
                <h3>Review System</h3>
                <div class="review-mode-toggle">
                  <button id="reviewToggle" class="review-btn">Review Mode</button>
                </div>
                <button id="startReview" class="review-btn secondary" style="display: none;">Start Review</button>
                <div class="export-options" style="display: none;">
                  <button id="exportReview" class="export-btn">Export Reviews</button>
                  <button id="clearReview" class="review-btn secondary" style="background: linear-gradient(135deg, #f44336, #d32f2f); margin-top: 5px;">Clear All</button>
                </div>
              </div>
              
              <div class="sidebar-nav">
                <div id="navigation"></div>
              </div>
            </div>

            <div class="main-content">
              <!-- Review Toolbar (hidden by default) -->
              <div class="review-toolbar">
                <h3>Review Mode Active</h3>
                <div class="review-toolbar-actions">
                  <button class="review-toolbar-btn">Comments</button>
                  <button class="review-toolbar-btn">Export</button>
                </div>
              </div>
              
              <h1 id="content-title">Loading...</h1>
              <div id="loading">Loading content...</div>
              <div id="content">
                <div class="initial-loading">
                  <p>Initializing enhanced documentation viewer with review system...</p>
                </div>
              </div>
            </div>

            <!-- Print functionality integrated into main UI -->
            <button class="main-print-button" id="mainPrintButton">
              🖨️ <span>Print</span>
            </button>

            <script src="js/navigation-config.js"></script>
            <script src="js/content-id-map.js"></script>
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF

      # Step 11: Create 404.html for SPA routing
      - name: Create 404 Page
        run: |
          cat > ./site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redirecting...</title>
            <script>
              // Store the requested URL for processing after redirect
              sessionStorage.redirect = location.href;

              // Determine the correct base path
              function getBasePath() {
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    return '/' + pathSegments[1];
                  }
                }
                return '';
              }

              // Redirect to the main site
              const basePath = getBasePath();
              window.location.href = basePath + '/';
            </script>
          </head>
          <body>
            <div style="text-align: center; font-family: Arial, sans-serif; margin-top: 100px;">
              <h1>Redirecting to documentation...</h1>
              <p>If you are not redirected automatically, <a href="/">click here</a>.</p>
            </div>
          </body>
          </html>
          EOF

      # Step 12: Create default content for container nodes
      - name: Create Default Content
        run: |
          # Create content directory if it doesn't exist
          mkdir -p ./site/content

          # Extract container nodes from navigation
          grep -o '"id": "[^"]*".*"children"' ./navigation-structure.json |
          sed 's/"id": "\([^"]*\)".*/\1/' > container-nodes.txt

          # Create default content for container nodes
          while IFS= read -r id || [ -n "$id" ]; do
            if [ ! -f "./site/content/$id.html" ]; then
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')

              echo "Creating default content for container node: $id ($title)"
              cat > "./site/content/$id.html" << EOF
          <h1>${title}</h1>
          <p>This section contains information about ${title}.</p>
          <p>Use the navigation menu to explore topics within this section.</p>
          <p><strong>Review Mode:</strong> Use the review controls in the sidebar to enable collaborative editing and commenting features.</p>
          EOF
            fi
          done < container-nodes.txt

          # Create default containers if none found
          if [ ! -s container-nodes.txt ]; then
            echo "No container nodes found in navigation. Creating default containers."

            # Create default containers
            for id in automotive-information basic-maintenance major-vehicle-components; do
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')

              echo "Creating default container: $id ($title)"
              cat > "./site/content/$id.html" << EOF
          <h1>${title}</h1>
          <p>This section contains information about ${title}.</p>
          <p>Use the navigation menu to explore topics within this section.</p>
          <p><strong>Review Mode:</strong> Use the review controls in the sidebar to enable collaborative editing and commenting features.</p>
          EOF
            done
          fi

      # Step 13: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true