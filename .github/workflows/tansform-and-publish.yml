name: Complete DITA Review System Setup

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup-complete-system:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install DITA-OT and required tools
      - name: Set up DITA-OT and XML tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils xsltproc postgresql-client curl jq

          # Install DITA-OT
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # Step 4: Create directory structure for all applications
      - name: Create Complete Directory Structure
        run: |
          echo "üìÅ Creating directory structure for all applications..."
          
          # DITA Publication directories
          mkdir -p ./dita-publication/site/{content,css,js,images,archives,review}
          
          # Review Portal directories
          mkdir -p ./review-portal/{css,js/modules,assets/icons}
          
          # Admin Console directories
          mkdir -p ./admin-console/{css,js,assets/icons}
          
          # Shared resources
          mkdir -p ./shared/{css,js}
          
          echo "‚úÖ Directory structure created"

      # Step 5: Process DITA content (if exists)
      - name: Process DITA Content
        run: |
          echo "üìñ Processing DITA content..."
          
          # Initialize navigation structure
          echo "[]" > navigation-structure.json
          
          # Process DITA if source files exist
          if [ -d "dita-source" ] && [ "$(ls -A dita-source/*.ditamap 2>/dev/null)" ]; then
            echo "Found DITA source files, processing..."
            
            # Create XSLT for navigation extraction
            cat > extract-nav.xsl << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            <xsl:output method="text"/>
            <xsl:template match="/">
              [<xsl:apply-templates select="//topicref[not(ancestor::topicref)]"/>]
            </xsl:template>
            <xsl:template match="topicref">
              <xsl:variable name="href" select="@href"/>
              <xsl:variable name="filename">
                <xsl:choose>
                  <xsl:when test="contains($href, '/')">
                    <xsl:value-of select="substring-after(substring-before($href, '.'), '/')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="substring-before($href, '.')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:variable name="id">
                <xsl:choose>
                  <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                  <xsl:otherwise><xsl:value-of select="translate($filename, '_', '-')"/></xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:variable name="title">
                <xsl:choose>
                  <xsl:when test="@navtitle"><xsl:value-of select="@navtitle"/></xsl:when>
                  <xsl:when test="topicmeta/navtitle"><xsl:value-of select="topicmeta/navtitle"/></xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="translate(translate($id, '-', ' '), '_', ' ')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              {
                "id": "<xsl:value-of select="$id"/>",
                "title": "<xsl:value-of select="$title"/>",
                "filename": "<xsl:value-of select="$filename"/>",
                "href": "<xsl:value-of select="$href"/>"
                <xsl:if test="topicref">
                  ,"children": [<xsl:apply-templates select="topicref"/>]
                </xsl:if>
              }<xsl:if test="following-sibling::topicref">,</xsl:if>
            </xsl:template>
          </xsl:stylesheet>
          EOF
            
            # Process DITAMAP
            for ditamap in dita-source/*.ditamap; do
              if [ -f "$ditamap" ]; then
                echo "Processing: $ditamap"
                xsltproc extract-nav.xsl "$ditamap" > navigation-structure.json 2>/dev/null || echo "[]" > navigation-structure.json
                
                # Transform to HTML
                ./dita-ot-4.0.2/bin/dita --input="$ditamap" --format=html5 --output=./dita-publication/site || echo "DITA transformation completed with warnings"
                break
              fi
            done
            
            # Process HTML files
            find ./dita-publication/site -type f -name "*.html" | grep -v "index.html" | while read file; do
              filename=$(basename "$file")
              id="${filename%.html}"
              
              # Extract content
              content=$(sed -n '/<body/,/<\/body>/p' "$file" | sed '/<body/d;/<\/body>/d' | sed '/<header/,/<\/header>/d' | sed '/<nav/,/<\/nav>/d' | sed '/<footer/,/<\/footer>/d')
              
              # Save processed content
              echo "$content" > "./dita-publication/site/content/$id.html"
            done
          else
            echo "No DITA source files found - creating placeholder content"
            echo "<h1>Welcome</h1><p>No DITA content available. Add DITA files to dita-source/ directory.</p>" > ./dita-publication/site/content/welcome.html
          fi

      # Step 6: Create Supabase Configuration for All Apps
      - name: Create Supabase Configuration
        run: |
          cat > ./shared/js/supabase-config.js << 'EOF'
          // Shared Supabase configuration for all applications
          const SUPABASE_URL = 'https://oiluavgeyngmkqozzmnz.supabase.co';
          const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9pbHVhdmdleW5nbWtxb3p6bW56Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg0NjIxOTgsImV4cCI6MjA2NDAzODE5OH0.zsfYoYDgArOBjP7SziUMgRQpIHhwTb-qgtw7t54MsXQ';
          
          class SupabaseAuthClient {
            constructor() {
              this.baseUrl = SUPABASE_URL;
              this.headers = {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'apikey': SUPABASE_ANON_KEY
              };
              this.currentUser = null;
            }
          
            async login(username, password) {
              // For demo purposes, we'll use a simple auth check
              // In production, use proper Supabase auth
              const validUsers = {
                'vincent': { password: 'zoox', id: 'user-vincent', role: 'user' },
                'sree': { password: 'zoox', id: 'user-sree', role: 'user' },
                'admin': { password: 'admin123', id: 'user-admin', role: 'admin' }
              };
              
              if (validUsers[username] && validUsers[username].password === password) {
                this.currentUser = {
                  id: validUsers[username].id,
                  username: username,
                  role: validUsers[username].role
                };
                localStorage.setItem('review_user', JSON.stringify(this.currentUser));
                return `
              <div class="request-card">
                <div class="request-header">
                  <div>
                    <h3 class="request-title">${doc.original_page_id}</h3>
                    <div class="request-meta">
                      <span>üë§ ${doc.user_id.replace('user-', '')}</span>
                      <span>üìÖ ${new Date(doc.created_at).toLocaleDateString()}</span>
                      <span>üí¨ ${comments.length} comments</span>
                      <span>‚úÖ ${requests.filter(r => r.status === 'approved').length} approvals</span>
                    </div>
                  </div>
                  <div class="state-indicator state-${doc.review_state}">
                    ${doc.review_state.replace('_', ' ')}
                  </div>
                </div>
                
                <div class="request-actions">
                  <button onclick="viewDocument('${doc.id}')" class="action-button">
                    üëÅÔ∏è View Document
                  </button>
                  <button onclick="showStateModal('${doc.id}')" class="action-button primary">
                    üîÑ Update State
                  </button>
                  <button onclick="addAdminComment('${doc.id}')" class="action-button">
                    üí¨ Add Comment
                  </button>
                </div>
              </div>
            `;
          }
          
          function loadByUser() {
            const users = ['user-vincent', 'user-sree'];
            const content = document.getElementById('content-area');
            
            let html = '<h2>Documents by User</h2>';
            
            users.forEach(userId => {
              const userDocs = window.reviewSystem.getAllDocuments()
                .filter(doc => doc.user_id === userId);
              
              html += `
                <div class="user-section">
                  <h3>${userId.replace('user-', '').toUpperCase()} (${userDocs.length} documents)</h3>
                  <div class="requests-list">
                    ${userDocs.map(doc => createRequestCard(doc)).join('')}
                  </div>
                </div>
              `;
            });
            
            content.innerHTML = html;
          }
          
          function loadByStatus() {
            const statuses = ['draft', 'pending_approval', 'approved', 'submitted', 'completed'];
            const content = document.getElementById('content-area');
            
            let html = '<h2>Documents by Status</h2>';
            
            statuses.forEach(status => {
              const statusDocs = window.reviewSystem.getAllDocuments()
                .filter(doc => doc.review_state === status);
              
              html += `
                <div class="status-section">
                  <h3 class="state-indicator state-${status}">
                    ${status.replace('_', ' ').toUpperCase()} (${statusDocs.length})
                  </h3>
                  <div class="requests-list">
                    ${statusDocs.map(doc => createRequestCard(doc)).join('')}
                  </div>
                </div>
              `;
            });
            
            content.innerHTML = html;
          }
          
          function loadStatistics() {
            const documents = window.reviewSystem.getAllDocuments();
            const comments = window.reviewSystem.getComments();
            const approvals = window.reviewSystem.getApprovalRequests();
            
            const stats = {
              total: documents.length,
              draft: documents.filter(d => d.review_state === 'draft').length,
              pending: documents.filter(d => d.review_state === 'pending_approval').length,
              approved: documents.filter(d => d.review_state === 'approved').length,
              submitted: documents.filter(d => d.review_state === 'submitted').length,
              completed: documents.filter(d => d.review_state === 'completed').length,
              totalComments: comments.length,
              totalApprovals: approvals.filter(a => a.status === 'approved').length
            };
            
            const content = document.getElementById('content-area');
            content.innerHTML = `
              <h2>System Statistics</h2>
              
              <div class="stats-grid">
                <div class="stat-card">
                  <div class="stat-value">${stats.total}</div>
                  <div class="stat-label">Total Documents</div>
                </div>
                <div class="stat-card">
                  <div class="stat-value">${stats.pending}</div>
                  <div class="stat-label">Pending Approval</div>
                </div>
                <div class="stat-card">
                  <div class="stat-value">${stats.completed}</div>
                  <div class="stat-label">Completed</div>
                </div>
                <div class="stat-card">
                  <div class="stat-value">${stats.totalComments}</div>
                  <div class="stat-label">Total Comments</div>
                </div>
              </div>
              
              <h3>Status Distribution</h3>
              <div class="status-chart">
                ${Object.entries(stats)
                  .filter(([key]) => ['draft', 'pending', 'approved', 'submitted', 'completed'].includes(key))
                  .map(([status, count]) => `
                    <div class="chart-bar">
                      <div class="bar-fill state-${status}" style="width: ${(count/stats.total*100)}%">
                        ${count}
                      </div>
                      <div class="bar-label">${status.replace('_', ' ')}</div>
                    </div>
                  `).join('')}
              </div>
            `;
          }
          
          function viewDocument(docId) {
            // Open document in new window
            const viewWindow = window.open('', 'DocumentView', 'width=1200,height=800');
            const doc = window.reviewSystem.getAllDocuments().find(d => d.id === docId);
            
            viewWindow.document.write(`
              <!DOCTYPE html>
              <html>
              <head>
                <title>Document Review: ${doc.original_page_id}</title>
                <style>
                  body { font-family: sans-serif; padding: 20px; line-height: 1.6; }
                  .header { background: #f5f5f5; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
                  .content { max-width: 800px; margin: 0 auto; }
                  .state { display: inline-block; padding: 5px 15px; border-radius: 20px; font-weight: bold; }
                </style>
              </head>
              <body>
                <div class="header">
                  <h1>${doc.original_page_id}</h1>
                  <p>User: ${doc.user_id} | State: <span class="state">${doc.review_state}</span></p>
                </div>
                <div class="content">
                  ${doc.content_html}
                </div>
              </body>
              </html>
            `);
          }
          
          function showStateModal(docId) {
            const doc = window.reviewSystem.getAllDocuments().find(d => d.id === docId);
            document.getElementById('doc-id').value = docId;
            document.getElementById('new-state').value = doc.review_state;
            document.getElementById('state-modal').classList.add('active');
          }
          
          function closeModal() {
            document.getElementById('state-modal').classList.remove('active');
            document.getElementById('admin-notes').value = '';
          }
          
          async function updateDocumentState(e) {
            e.preventDefault();
            
            const docId = document.getElementById('doc-id').value;
            const newState = document.getElementById('new-state').value;
            const notes = document.getElementById('admin-notes').value;
            
            await window.reviewSystem.updateDocument(docId, {
              review_state: newState,
              admin_notes: notes
            });
            
            closeModal();
            loadAllRequests();
            alert('Document state updated successfully!');
          }
          
          function addAdminComment(docId) {
            const comment = prompt('Enter admin comment:');
            if (comment) {
              window.reviewSystem.addComment(docId, `[ADMIN] ${comment}`);
              alert('Comment added successfully!');
            }
          }
          EOF

      # Step 10: Create Additional Review Portal Files
      - name: Create Additional Review Portal Files
        run: |
          # Create review.js
          cat > ./review-portal/js/review.js << 'EOF'
          let currentDocument = null;
          
          document.addEventListener('DOMContentLoaded', async function() {
            // Check authentication
            if (!window.supabaseAuth.isAuthenticated()) {
              window.location.href = 'index.html';
              return;
            }
            
            // Get URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const docId = urlParams.get('doc');
            const pageId = urlParams.get('page');
            const isNew = urlParams.get('new') === 'true';
            
            if (docId) {
              // Load existing document
              await loadDocument(docId);
            } else if (pageId && isNew) {
              // Create new document from DITA page
              await createNewDocument(pageId);
            } else {
              // Default to empty document
              createEmptyDocument();
            }
            
            // Setup event listeners
            setupEventListeners();
          });
          
          async function loadDocument(docId) {
            const documents = window.reviewSystem.getAllDocuments();
            currentDocument = documents.find(d => d.id === docId);
            
            if (!currentDocument) {
              alert('Document not found');
              window.location.href = 'dashboard.html';
              return;
            }
            
            // Check ownership
            const user = window.supabaseAuth.getCurrentUser();
            if (currentDocument.user_id !== user.id && user.role !== 'admin') {
              alert('You do not have permission to edit this document');
              window.location.href = 'dashboard.html';
              return;
            }
            
            // Load content
            document.getElementById('editor').innerHTML = currentDocument.content_html;
            updateStatusBadge(currentDocument.review_state);
            
            // Load comments
            loadComments();
          }
          
          async function createNewDocument(pageId) {
            const pageTitle = sessionStorage.getItem('review_page_title') || pageId;
            const pageContent = sessionStorage.getItem('review_page_content') || '<p>Empty document</p>';
            
            currentDocument = await window.reviewSystem.createReviewDocument(pageId, pageContent);
            
            document.getElementById('editor').innerHTML = pageContent;
            updateStatusBadge('draft');
            
            // Clear session storage
            sessionStorage.removeItem('review_page_id');
            sessionStorage.removeItem('review_page_title');
            sessionStorage.removeItem('review_page_content');
          }
          
          function createEmptyDocument() {
            const pageId = prompt('Enter document name:') || 'untitled';
            currentDocument = window.reviewSystem.createReviewDocument(pageId, '<p>Start typing...</p>');
            
            document.getElementById('editor').innerHTML = '<p>Start typing...</p>';
            updateStatusBadge('draft');
          }
          
          function updateStatusBadge(status) {
            const badge = document.getElementById('doc-status');
            badge.className = `status-badge status-${status}`;
            badge.textContent = status.replace('_', ' ');
          }
          
          function setupEventListeners() {
            // Toolbar buttons
            document.querySelectorAll('.toolbar-btn').forEach(btn => {
              btn.addEventListener('click', () => {
                const command = btn.dataset.command;
                const value = btn.dataset.value || null;
                
                if (command === 'createLink') {
                  const url = prompt('Enter URL:');
                  if (url) document.execCommand('createLink', false, url);
                } else {
                  document.execCommand(command, false, value);
                }
                
                document.getElementById('editor').focus();
              });
            });
            
            // Save draft
            document.getElementById('save-draft-btn').addEventListener('click', saveDraft);
            
            // Submit for approval
            document.getElementById('submit-btn').addEventListener('click', submitForApproval);
            
            // Back to dashboard
            document.getElementById('back-btn').addEventListener('click', () => {
              if (confirm('Any unsaved changes will be lost. Continue?')) {
                window.location.href = 'dashboard.html';
              }
            });
            
            // Add comment
            document.getElementById('add-comment-btn').addEventListener('click', addComment);
            
            // Auto-save every 30 seconds
            setInterval(saveDraft, 30000);
          }
          
          async function saveDraft() {
            if (!currentDocument) return;
            
            const content = document.getElementById('editor').innerHTML;
            await window.reviewSystem.updateDocument(currentDocument.id, {
              content_html: content
            });
            
            // Show save indicator
            const saveBtn = document.getElementById('save-draft-btn');
            const originalText = saveBtn.textContent;
            saveBtn.textContent = '‚úì Saved';
            setTimeout(() => {
              saveBtn.textContent = originalText;
            }, 2000);
          }
          
          async function submitForApproval() {
            if (!currentDocument) return;
            
            // Save current content
            await saveDraft();
            
            // Get other user for approval
            const currentUser = window.supabaseAuth.getCurrentUser();
            const otherUser = currentUser.username === 'vincent' ? 'user-sree' : 'user-vincent';
            
            const message = prompt('Add a message for the reviewer:');
            if (message === null) return;
            
            await window.reviewSystem.requestApproval(currentDocument.id, otherUser, message);
            await window.reviewSystem.updateDocument(currentDocument.id, {
              review_state: 'pending_approval'
            });
            
            alert('Document submitted for approval!');
            window.location.href = 'dashboard.html';
          }
          
          async function addComment() {
            const commentText = document.getElementById('new-comment').value.trim();
            if (!commentText || !currentDocument) return;
            
            await window.reviewSystem.addComment(currentDocument.id, commentText);
            document.getElementById('new-comment').value = '';
            loadComments();
          }
          
          function loadComments() {
            if (!currentDocument) return;
            
            const comments = window.reviewSystem.getDocumentComments(currentDocument.id);
            const container = document.getElementById('comments-list');
            
            if (comments.length === 0) {
              container.innerHTML = '<p class="empty-state">No comments yet</p>';
              return;
            }
            
            container.innerHTML = comments.map(comment => `
              <div class="comment-item">
                <div class="comment-header">
                  <span>${comment.user_id.replace('user-', '')}</span>
                  <span>${new Date(comment.created_at).toLocaleDateString()}</span>
                </div>
                <div class="comment-text">${comment.comment_text}</div>
              </div>
            `).join('');
          }
          EOF
          
          # Create editor module
          cat > ./review-portal/js/modules/editor.js << 'EOF'
          // Basic WYSIWYG editor functionality
          window.WYSIWYGEditor = {
            init: function(containerId) {
              const container = document.getElementById(containerId);
              if (!container) return;
              
              // Make container editable
              container.contentEditable = true;
              
              // Handle paste events to clean up formatting
              container.addEventListener('paste', (e) => {
                e.preventDefault();
                const text = e.clipboardData.getData('text/plain');
                document.execCommand('insertText', false, text);
              });
            },
            
            getContent: function() {
              const editor = document.getElementById('editor');
              return editor ? editor.innerHTML : '';
            },
            
            setContent: function(html) {
              const editor = document.getElementById('editor');
              if (editor) editor.innerHTML = html;
            }
          };
          EOF
          
          # Create comments module
          cat > ./review-portal/js/modules/comments.js << 'EOF'
          // Comment system functionality
          window.CommentSystem = {
            highlightSelection: function() {
              const selection = window.getSelection();
              if (selection.rangeCount === 0) return null;
              
              const range = selection.getRangeAt(0);
              if (range.collapsed) return null;
              
              const span = document.createElement('span');
              span.className = 'comment-highlight';
              span.setAttribute('data-comment-id', Date.now());
              
              try {
                range.surroundContents(span);
                return span.getAttribute('data-comment-id');
              } catch (e) {
                // Handle partial selections
                return null;
              }
            },
            
            removeHighlight: function(commentId) {
              const highlight = document.querySelector(`[data-comment-id="${commentId}"]`);
              if (highlight) {
                const parent = highlight.parentNode;
                while (highlight.firstChild) {
                  parent.insertBefore(highlight.firstChild, highlight);
                }
                parent.removeChild(highlight);
              }
            }
          };
          EOF

      # Step 11: Create Database Schema SQL
      - name: Create Database Schema Documentation
        run: |
          cat > ./database-schema.sql << 'EOF'
          -- Complete Review System Database Schema
          -- Run this in your Supabase SQL editor
          
          -- Enable UUID extension
          CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
          
          -- Users table
          CREATE TABLE IF NOT EXISTS users (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            username TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            role TEXT NOT NULL CHECK (role IN ('user', 'admin')),
            created_at TIMESTAMP DEFAULT NOW()
          );
          
          -- Insert default users
          INSERT INTO users (username, password_hash, role) VALUES
            ('vincent', crypt('zoox', gen_salt('bf')), 'user'),
            ('sree', crypt('zoox', gen_salt('bf')), 'user'),
            ('admin', crypt('admin123', gen_salt('bf')), 'admin')
          ON CONFLICT (username) DO NOTHING;
          
          -- Review documents table
          CREATE TABLE IF NOT EXISTS review_documents (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            original_page_id TEXT NOT NULL,
            content_html TEXT NOT NULL,
            user_id UUID REFERENCES users(id),
            review_state TEXT DEFAULT 'draft' 
              CHECK (review_state IN ('draft', 'pending_approval', 'approved', 'submitted', 'completed')),
            admin_notes TEXT,
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW()
          );
          
          -- Approval requests table
          CREATE TABLE IF NOT EXISTS approval_requests (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            document_id UUID REFERENCES review_documents(id) ON DELETE CASCADE,
            requester_id UUID REFERENCES users(id),
            approver_id UUID REFERENCES users(id),
            status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
            request_message TEXT,
            response_message TEXT,
            created_at TIMESTAMP DEFAULT NOW(),
            responded_at TIMESTAMP
          );
          
          -- Review comments table
          CREATE TABLE IF NOT EXISTS review_comments (
            id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
            document_id UUID REFERENCES review_documents(id) ON DELETE CASCADE,
            user_id UUID REFERENCES users(id),
            comment_text TEXT NOT NULL,
            selected_text TEXT,
            status TEXT DEFAULT 'active' CHECK (status IN ('active', 'resolved')),
            created_at TIMESTAMP DEFAULT NOW()
          );
          
          -- Create indexes for performance
          CREATE INDEX idx_review_documents_user_id ON review_documents(user_id);
          CREATE INDEX idx_review_documents_state ON review_documents(review_state);
          CREATE INDEX idx_approval_requests_approver ON approval_requests(approver_id);
          CREATE INDEX idx_approval_requests_status ON approval_requests(status);
          CREATE INDEX idx_review_comments_document ON review_comments(document_id);
          
          -- Row Level Security policies
          ALTER TABLE review_documents ENABLE ROW LEVEL SECURITY;
          ALTER TABLE approval_requests ENABLE ROW LEVEL SECURITY;
          ALTER TABLE review_comments ENABLE ROW LEVEL SECURITY;
          
          -- Policies for review_documents
          CREATE POLICY "Users can view their own documents" ON review_documents
            FOR SELECT USING (auth.uid() = user_id OR EXISTS (
              SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin'
            ));
          
          CREATE POLICY "Users can create documents" ON review_documents
            FOR INSERT WITH CHECK (auth.uid() = user_id);
          
          CREATE POLICY "Users can update their own documents" ON review_documents
            FOR UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);
          
          -- Policies for approval_requests
          CREATE POLICY "Users can view requests they're involved in" ON approval_requests
            FOR SELECT USING (
              auth.uid() = requester_id OR 
              auth.uid() = approver_id OR
              EXISTS (SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin')
            );
          
          -- Policies for review_comments
          CREATE POLICY "Users can view comments on accessible documents" ON review_comments
            FOR SELECT USING (
              EXISTS (
                SELECT 1 FROM review_documents 
                WHERE id = review_comments.document_id 
                AND (user_id = auth.uid() OR EXISTS (
                  SELECT 1 FROM users WHERE id = auth.uid() AND role = 'admin'
                ))
              )
            );
          EOF

      # Step 12: Create README
      - name: Create Complete README
        run: |
          cat > ./README.md << 'EOF'
          # Complete DITA Review System
          
          A comprehensive documentation review system with three integrated applications:
          
          1. **DITA Publication Site** - Static site generated from DITA source files
          2. **Review Portal** - User-facing application for document review and collaboration
          3. **Admin Console** - Technical writer dashboard for managing all review requests
          
          ## Architecture Overview
          
          ```
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ DITA Publication‚îÇ     ‚îÇ  Review Portal  ‚îÇ     ‚îÇ  Admin Console  ‚îÇ
          ‚îÇ      Site       ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ   (Users)       ‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÇ (Tech Writers)  ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                  ‚îÇ                        ‚îÇ                        ‚îÇ
                  ‚îÇ                        ‚ñº                        ‚îÇ
                  ‚îÇ                 ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                ‚îÇ
                  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  Supabase   ‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                    ‚îÇ  Database   ‚îÇ
                                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          ```
          
          ## Quick Start
          
          ### 1. Fork and Enable GitHub Actions
          1. Fork this repository
          2. Go to Settings ‚Üí Actions ‚Üí General
          3. Enable "Read and write permissions" for workflows
          4. Run the workflow from Actions tab
          
          ### 2. Set Up Database (Optional - for persistence)
          1. Create a Supabase project at https://supabase.com
          2. Run the SQL from `database-schema.sql` in your Supabase SQL editor
          3. Update the Supabase credentials in `shared/js/supabase-config.js`
          
          ### 3. Access the Applications
          - **DITA Site**: `https://[username].github.io/[repo-name]/dita-publication/site/`
          - **Review Portal**: `https://[username].github.io/[repo-name]/review-portal/`
          - **Admin Console**: `https://[username].github.io/[repo-name]/admin-console/`
          
          ## User Credentials
          
          ### Review Portal Users
          - Username: `vincent` / Password: `zoox`
          - Username: `sree` / Password: `zoox`
          
          ### Admin Console
          - Username: `admin` / Password: `admin123`
          
          ## Features
          
          ### DITA Publication Site
          - Automated DITA-OT processing
          - Responsive navigation
          - "Provide Feedback" button integration
          - Archive system for review history
          
          ### Review Portal
          - User authentication
          - Document creation from DITA content
          - WYSIWYG editor for reviews
          - Comment system
          - Peer approval workflow
          - User-specific document archives
          
          ### Admin Console
          - View all review documents
          - Filter by user, status
          - Update document states
          - Add admin comments
          - System statistics
          - Bulk actions support
          
          ## Workflow
          
          1. **User views DITA documentation** and clicks "Provide Feedback"
          2. **Login to Review Portal** with vincent/sree credentials
          3. **Create review document** - automatically copies current page content
          4. **Edit and comment** on the document
          5. **Request peer approval** from the other user
          6. **Peer reviews and approves** the document
          7. **Submit to tech writers** after approval
          8. **Admin reviews** in the Admin Console
          9. **Admin updates status** and provides feedback
          10. **Document marked complete** when review is finished
          
          ## Development
          
          ### Adding DITA Content
          1. Place DITA files in `dita-source/` directory
          2. Include a `.ditamap` file
          3. Push to trigger the workflow
          
          ### Customizing Styles
          - DITA Site: Edit `dita-publication/site/css/style.css`
          - Review Portal: Edit files in `review-portal/css/`
          - Admin Console: Edit files in `admin-console/css/`
          
          ### Database Schema
          The system uses four main tables:
          - `users` - User authentication
          - `review_documents` - Document versions
          - `approval_requests` - Peer approval workflow
          - `review_comments` - Comment system
          
          ## Local Development
          
          1. Clone the repository
          2. Serve with any static server:
             ```bash
             python -m http.server 8000
             # or
             npx serve .
             ```
          3. Access applications at `localhost:8000/[app-name]/`
          
          ## Troubleshooting
          
          ### Popup Blocked
          - Allow popups for the GitHub Pages domain
          - Review portal opens in a new window
          
          ### Authentication Issues
          - Clear localStorage if login fails
          - Check browser console for errors
          
          ### DITA Processing Errors
          - Ensure valid DITA XML structure
          - Check workflow logs in GitHub Actions
          
          ## License
          
          MIT License - See LICENSE file for details
          EOF

      # Step 13: Commit all files
      - name: Commit and push all files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all files
          git add -A
          
          # Commit with detailed message
          git commit -m "Complete DITA Review System Setup
          
          - DITA Publication Site with feedback integration
          - Review Portal with user authentication (vincent/sree)
          - Admin Console for technical writers
          - Peer approval workflow
          - User-specific document archives
          - Complete separation of review from DITA workflow
          - Database schema for Supabase integration
          - Comprehensive documentation"
          
          # Push to repository
          git push { success: true, user: this.currentUser };
              }
              
              return { success: false, error: 'Invalid credentials' };
            }
          
            logout() {
              this.currentUser = null;
              localStorage.removeItem('review_user');
            }
          
            getCurrentUser() {
              if (!this.currentUser) {
                const stored = localStorage.getItem('review_user');
                if (stored) {
                  this.currentUser = JSON.parse(stored);
                }
              }
              return this.currentUser;
            }
          
            isAuthenticated() {
              return this.getCurrentUser() !== null;
            }
          
            isAdmin() {
              const user = this.getCurrentUser();
              return user && user.role === 'admin';
            }
          }
          
          // Extended client for review operations
          class ReviewSystemClient extends SupabaseAuthClient {
            async createReviewDocument(pageId, contentHtml) {
              const user = this.getCurrentUser();
              if (!user) throw new Error('Not authenticated');
              
              const doc = {
                id: `doc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                original_page_id: pageId,
                content_html: contentHtml,
                user_id: user.id,
                review_state: 'draft',
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              };
              
              // Store in localStorage for demo
              const docs = this.getReviewDocuments();
              docs.push(doc);
              localStorage.setItem('review_documents', JSON.stringify(docs));
              
              return doc;
            }
          
            getReviewDocuments() {
              const stored = localStorage.getItem('review_documents');
              return stored ? JSON.parse(stored) : [];
            }
          
            getUserDocuments() {
              const user = this.getCurrentUser();
              if (!user) return [];
              
              return this.getReviewDocuments().filter(doc => doc.user_id === user.id);
            }
          
            getAllDocuments() {
              // For admin use
              return this.getReviewDocuments();
            }
          
            async updateDocument(docId, updates) {
              const docs = this.getReviewDocuments();
              const index = docs.findIndex(d => d.id === docId);
              
              if (index !== -1) {
                docs[index] = { ...docs[index], ...updates, updated_at: new Date().toISOString() };
                localStorage.setItem('review_documents', JSON.stringify(docs));
                return docs[index];
              }
              
              throw new Error('Document not found');
            }
          
            async requestApproval(docId, approverId, message) {
              const request = {
                id: `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                document_id: docId,
                requester_id: this.getCurrentUser().id,
                approver_id: approverId,
                status: 'pending',
                request_message: message,
                created_at: new Date().toISOString()
              };
              
              const requests = this.getApprovalRequests();
              requests.push(request);
              localStorage.setItem('approval_requests', JSON.stringify(requests));
              
              return request;
            }
          
            getApprovalRequests() {
              const stored = localStorage.getItem('approval_requests');
              return stored ? JSON.parse(stored) : [];
            }
          
            getUserApprovalRequests() {
              const user = this.getCurrentUser();
              if (!user) return [];
              
              return this.getApprovalRequests().filter(
                req => req.approver_id === user.id && req.status === 'pending'
              );
            }
          
            async respondToApproval(requestId, approved, message) {
              const requests = this.getApprovalRequests();
              const index = requests.findIndex(r => r.id === requestId);
              
              if (index !== -1) {
                requests[index].status = approved ? 'approved' : 'rejected';
                requests[index].response_message = message;
                requests[index].responded_at = new Date().toISOString();
                localStorage.setItem('approval_requests', JSON.stringify(requests));
                
                // Update document state if approved
                if (approved) {
                  await this.updateDocument(requests[index].document_id, {
                    review_state: 'approved'
                  });
                }
                
                return requests[index];
              }
              
              throw new Error('Request not found');
            }
          
            async addComment(docId, commentText, selectedText = '') {
              const comment = {
                id: `com_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                document_id: docId,
                user_id: this.getCurrentUser().id,
                comment_text: commentText,
                selected_text: selectedText,
                status: 'active',
                created_at: new Date().toISOString()
              };
              
              const comments = this.getComments();
              comments.push(comment);
              localStorage.setItem('review_comments', JSON.stringify(comments));
              
              return comment;
            }
          
            getComments() {
              const stored = localStorage.getItem('review_comments');
              return stored ? JSON.parse(stored) : [];
            }
          
            getDocumentComments(docId) {
              return this.getComments().filter(c => c.document_id === docId);
            }
          }
          
          // Initialize clients
          window.supabaseAuth = new SupabaseAuthClient();
          window.reviewSystem = new ReviewSystemClient();
          EOF

      # Step 7: Create DITA Publication Site Files
      - name: Create DITA Publication Site
        run: |
          # Create navigation config
          cat > ./dita-publication/site/js/navigation-config.js << 'EOF'
          const navigationConfig = 
          EOF
          cat ./navigation-structure.json >> ./dita-publication/site/js/navigation-config.js
          echo ";" >> ./dita-publication/site/js/navigation-config.js
          
          # Create main CSS
          cat > ./dita-publication/site/css/style.css << 'EOF'
          * { margin: 0; padding: 0; box-sizing: border-box; }
          
          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6; display: flex; height: 100vh;
            overflow: hidden; color: #333; background: #f8f8f8;
          }
          
          .sidebar {
            width: 300px; background: #e0f7f7; padding: 15px;
            height: 100vh; overflow-y: auto; border-right: 1px solid #c0e0e0;
          }
          
          .main-content {
            flex: 1; padding: 30px; height: 100vh; overflow-y: auto;
            background: #ffffff; position: relative;
          }
          
          .sidebar h2 {
            font-weight: 500; margin-bottom: 15px; color: #00747a;
            border-bottom: 2px solid #80cbc4; padding-bottom: 10px;
          }
          
          .sidebar ul { list-style: none; padding-left: 0; }
          .sidebar ul ul { padding-left: 20px; margin-top: 5px; }
          .sidebar li { margin-bottom: 6px; position: relative; }
          
          .sidebar a {
            color: #00747a; text-decoration: none; display: block;
            padding: 6px 10px; border-radius: 4px; transition: all 0.2s;
          }
          
          .sidebar a:hover { background: #e1f5fe; color: #006064; }
          .sidebar a.active { background: #80deea; font-weight: bold; }
          
          /* Feedback Button */
          .feedback-button {
            position: fixed; bottom: 20px; right: 20px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white; padding: 12px 24px; border: none;
            border-radius: 50px; cursor: pointer; font-size: 16px;
            font-weight: 600; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
            transition: all 0.3s; z-index: 1000;
            display: flex; align-items: center; gap: 8px;
          }
          
          .feedback-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
          }
          
          .feedback-button:before { content: "üí¨"; font-size: 20px; }
          
          @media (max-width: 768px) {
            body { flex-direction: column; }
            .sidebar { width: 100%; height: auto; max-height: 30vh; }
            .feedback-button { bottom: 70px; right: 15px; }
          }
          EOF
          
          # Create main app.js
          cat > ./dita-publication/site/js/app.js << 'EOF'
          // DITA SPA Application with Review Integration
          
          let contentEl, navigationEl;
          window.currentPage = null;
          
          function initializeDOMElements() {
            contentEl = document.getElementById('content');
            navigationEl = document.getElementById('navigation');
          }
          
          function renderNavigation(items, parentEl = navigationEl) {
            if (!parentEl || !items || items.length === 0) return;
            
            const ul = document.createElement('ul');
            items.forEach(item => {
              const li = document.createElement('li');
              const a = document.createElement('a');
              a.textContent = item.title;
              a.setAttribute('data-id', item.id);
              a.href = `#${item.id}`;
              
              a.addEventListener('click', (e) => {
                e.preventDefault();
                navigateToPage(item.id);
              });
              
              li.appendChild(a);
              if (item.children && item.children.length > 0) {
                renderNavigation(item.children, li);
              }
              ul.appendChild(li);
            });
            parentEl.appendChild(ul);
          }
          
          function navigateToPage(pageId) {
            window.currentPage = pageId;
            updateActiveNavItem(pageId);
            
            fetch(`content/${pageId}.html`)
              .then(response => response.text())
              .then(content => {
                if (contentEl) contentEl.innerHTML = content;
              })
              .catch(() => {
                if (contentEl) {
                  contentEl.innerHTML = '<div class="error">Content not found</div>';
                }
              });
          }
          
          function updateActiveNavItem(pageId) {
            document.querySelectorAll('.sidebar a').forEach(a => a.classList.remove('active'));
            const activeItem = document.querySelector(`.sidebar a[data-id="${pageId}"]`);
            if (activeItem) activeItem.classList.add('active');
          }
          
          function addFeedbackButton() {
            const feedbackBtn = document.createElement('button');
            feedbackBtn.className = 'feedback-button';
            feedbackBtn.innerHTML = 'Provide Feedback';
            feedbackBtn.title = 'Open review portal to provide feedback';
            
            feedbackBtn.addEventListener('click', openReviewPortal);
            document.body.appendChild(feedbackBtn);
          }
          
          function openReviewPortal() {
            const currentPageId = window.currentPage || 'home';
            const pageTitle = document.querySelector('.sidebar a.active')?.textContent || 'Document';
            const pageContent = contentEl ? contentEl.innerHTML : '';
            
            // Store current page info for review portal
            sessionStorage.setItem('review_page_id', currentPageId);
            sessionStorage.setItem('review_page_title', pageTitle);
            sessionStorage.setItem('review_page_content', pageContent);
            
            // Open review portal
            const reviewWindow = window.open('../review-portal/index.html', 'ReviewPortal', 
              'width=1400,height=900,scrollbars=yes,resizable=yes'
            );
            
            if (!reviewWindow) {
              alert('Please allow popups to open the review portal.');
            }
          }
          
          // Initialize on DOM load
          document.addEventListener('DOMContentLoaded', function() {
            initializeDOMElements();
            
            if (window.navigationConfig && navigationConfig.length > 0) {
              renderNavigation(navigationConfig);
              navigateToPage(navigationConfig[0].id);
            }
            
            addFeedbackButton();
          });
          EOF
          
          # Create index.html
          cat > ./dita-publication/site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>DITA Documentation</title>
            <link rel="stylesheet" href="css/style.css">
          </head>
          <body>
            <div class="sidebar">
              <h2>Documentation</h2>
              <div id="navigation"></div>
            </div>
            
            <div class="main-content">
              <div id="content">
                <h1>Welcome</h1>
                <p>Select a topic from the navigation menu.</p>
              </div>
            </div>
            
            <script src="js/navigation-config.js"></script>
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF

      # Step 8: Create Review Portal Application
      - name: Create Review Portal
        run: |
          # Copy shared config
          cp ./shared/js/supabase-config.js ./review-portal/js/
          
          # Create login page
          cat > ./review-portal/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Review Portal - Login</title>
            <link rel="stylesheet" href="css/auth.css">
          </head>
          <body>
            <div class="login-container">
              <div class="login-card">
                <h1>üìù Review Portal</h1>
                <p class="subtitle">Sign in to review documents</p>
                
                <form id="login-form">
                  <div class="form-group">
                    <label for="username">Username</label>
                    <input type="text" id="username" required placeholder="vincent or sree">
                  </div>
                  
                  <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" required placeholder="Password">
                  </div>
                  
                  <button type="submit" class="login-button">Sign In</button>
                  
                  <div id="error-message" class="error-message"></div>
                </form>
                
                <div class="login-hint">
                  <p>Demo users:</p>
                  <ul>
                    <li>vincent / zoox</li>
                    <li>sree / zoox</li>
                  </ul>
                </div>
              </div>
            </div>
            
            <script src="js/supabase-config.js"></script>
            <script src="js/auth.js"></script>
          </body>
          </html>
          EOF
          
          # Create auth CSS
          cat > ./review-portal/css/auth.css << 'EOF'
          * { margin: 0; padding: 0; box-sizing: border-box; }
          
          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh; display: flex; align-items: center;
            justify-content: center; padding: 20px;
          }
          
          .login-container {
            width: 100%; max-width: 400px;
          }
          
          .login-card {
            background: white; border-radius: 12px; padding: 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
          }
          
          .login-card h1 {
            color: #333; margin-bottom: 10px; text-align: center;
          }
          
          .subtitle {
            color: #666; text-align: center; margin-bottom: 30px;
          }
          
          .form-group {
            margin-bottom: 20px;
          }
          
          .form-group label {
            display: block; margin-bottom: 8px; color: #333;
            font-weight: 500;
          }
          
          .form-group input {
            width: 100%; padding: 12px; border: 2px solid #e0e0e0;
            border-radius: 8px; font-size: 16px; transition: border-color 0.3s;
          }
          
          .form-group input:focus {
            outline: none; border-color: #667eea;
          }
          
          .login-button {
            width: 100%; padding: 12px; background: linear-gradient(135deg, #667eea, #764ba2);
            color: white; border: none; border-radius: 8px;
            font-size: 16px; font-weight: 600; cursor: pointer;
            transition: transform 0.2s;
          }
          
          .login-button:hover {
            transform: translateY(-2px);
          }
          
          .error-message {
            color: #e74c3c; text-align: center; margin-top: 20px;
            font-size: 14px; display: none;
          }
          
          .error-message.show {
            display: block;
          }
          
          .login-hint {
            margin-top: 30px; padding-top: 20px;
            border-top: 1px solid #e0e0e0;
            font-size: 14px; color: #666;
          }
          
          .login-hint ul {
            list-style: none; margin-top: 10px;
          }
          
          .login-hint li {
            padding: 4px 0; font-family: monospace;
          }
          EOF
          
          # Create auth.js
          cat > ./review-portal/js/auth.js << 'EOF'
          document.addEventListener('DOMContentLoaded', function() {
            const loginForm = document.getElementById('login-form');
            const errorMessage = document.getElementById('error-message');
            
            // Check if already logged in
            if (window.supabaseAuth.isAuthenticated()) {
              window.location.href = 'dashboard.html';
            }
            
            loginForm.addEventListener('submit', async (e) => {
              e.preventDefault();
              
              const username = document.getElementById('username').value;
              const password = document.getElementById('password').value;
              
              errorMessage.classList.remove('show');
              
              try {
                const result = await window.supabaseAuth.login(username, password);
                
                if (result.success) {
                  // Check if coming from DITA site
                  const reviewPageId = sessionStorage.getItem('review_page_id');
                  if (reviewPageId) {
                    window.location.href = `review.html?page=${reviewPageId}&new=true`;
                  } else {
                    window.location.href = 'dashboard.html';
                  }
                } else {
                  errorMessage.textContent = result.error || 'Invalid credentials';
                  errorMessage.classList.add('show');
                }
              } catch (error) {
                errorMessage.textContent = 'Login failed. Please try again.';
                errorMessage.classList.add('show');
              }
            });
          });
          EOF
          
          # Create dashboard.html
          cat > ./review-portal/dashboard.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Review Dashboard</title>
            <link rel="stylesheet" href="css/base.css">
            <link rel="stylesheet" href="css/components.css">
            <link rel="stylesheet" href="css/layout.css">
          </head>
          <body>
            <header class="header">
              <div class="container">
                <h1 class="header-title">Review Dashboard</h1>
                <div class="header-actions">
                  <span id="user-info"></span>
                  <button id="logout-btn" class="secondary-button">Logout</button>
                </div>
              </div>
            </header>
            
            <div class="container main-content">
              <div class="sidebar">
                <h2 class="sidebar-title">Quick Actions</h2>
                <button id="create-review-btn" class="action-button">
                  <span>üìù</span> Create New Review
                </button>
                
                <h2 class="sidebar-title" style="margin-top: 30px;">Filter</h2>
                <select id="status-filter" class="form-select">
                  <option value="all">All Documents</option>
                  <option value="draft">Draft</option>
                  <option value="pending_approval">Pending Approval</option>
                  <option value="approved">Approved</option>
                  <option value="submitted">Submitted</option>
                  <option value="completed">Completed</option>
                </select>
              </div>
              
              <div class="content-area">
                <div class="dashboard-sections">
                  <section class="dashboard-section">
                    <h2>üìÑ My Review Documents</h2>
                    <div id="my-documents" class="document-grid">
                      <!-- Documents will be loaded here -->
                    </div>
                  </section>
                  
                  <section class="dashboard-section">
                    <h2>üîî Pending Approvals</h2>
                    <div id="pending-approvals" class="approval-list">
                      <!-- Approval requests will be loaded here -->
                    </div>
                  </section>
                </div>
              </div>
            </div>
            
            <script src="js/supabase-config.js"></script>
            <script src="js/dashboard.js"></script>
          </body>
          </html>
          EOF
          
          # Create dashboard.js
          cat > ./review-portal/js/dashboard.js << 'EOF'
          document.addEventListener('DOMContentLoaded', function() {
            // Check authentication
            if (!window.supabaseAuth.isAuthenticated()) {
              window.location.href = 'index.html';
              return;
            }
            
            const user = window.supabaseAuth.getCurrentUser();
            document.getElementById('user-info').textContent = `üë§ ${user.username}`;
            
            // Load dashboard data
            loadMyDocuments();
            loadPendingApprovals();
            
            // Event listeners
            document.getElementById('logout-btn').addEventListener('click', () => {
              window.supabaseAuth.logout();
              window.location.href = 'index.html';
            });
            
            document.getElementById('create-review-btn').addEventListener('click', () => {
              // Clear session storage and go to review page
              sessionStorage.clear();
              window.location.href = 'review.html?new=true';
            });
            
            document.getElementById('status-filter').addEventListener('change', loadMyDocuments);
          });
          
          function loadMyDocuments() {
            const filter = document.getElementById('status-filter').value;
            const documents = window.reviewSystem.getUserDocuments();
            const container = document.getElementById('my-documents');
            
            const filtered = filter === 'all' 
              ? documents 
              : documents.filter(doc => doc.review_state === filter);
            
            if (filtered.length === 0) {
              container.innerHTML = '<p class="empty-state">No documents found</p>';
              return;
            }
            
            container.innerHTML = filtered.map(doc => `
              <div class="document-card" data-id="${doc.id}">
                <h3>${doc.original_page_id}</h3>
                <div class="document-meta">
                  <span class="status-badge status-${doc.review_state}">${doc.review_state.replace('_', ' ')}</span>
                  <span class="date">${new Date(doc.created_at).toLocaleDateString()}</span>
                </div>
                <div class="document-actions">
                  <button onclick="openDocument('${doc.id}')" class="primary-button small">Open</button>
                  ${doc.review_state === 'draft' ? 
                    `<button onclick="requestApproval('${doc.id}')" class="secondary-button small">Request Approval</button>` : ''}
                </div>
              </div>
            `).join('');
          }
          
          function loadPendingApprovals() {
            const requests = window.reviewSystem.getUserApprovalRequests();
            const container = document.getElementById('pending-approvals');
            
            if (requests.length === 0) {
              container.innerHTML = '<p class="empty-state">No pending approvals</p>';
              return;
            }
            
            container.innerHTML = requests.map(req => {
              const doc = window.reviewSystem.getReviewDocuments().find(d => d.id === req.document_id);
              return `
                <div class="approval-card">
                  <h4>Review Request from ${req.requester_id}</h4>
                  <p>Document: ${doc ? doc.original_page_id : 'Unknown'}</p>
                  <p class="request-message">"${req.request_message}"</p>
                  <div class="approval-actions">
                    <button onclick="handleApproval('${req.id}', true)" class="success-button small">Approve</button>
                    <button onclick="handleApproval('${req.id}', false)" class="danger-button small">Reject</button>
                  </div>
                </div>
              `;
            }).join('');
          }
          
          function openDocument(docId) {
            window.location.href = `review.html?doc=${docId}`;
          }
          
          function requestApproval(docId) {
            const otherUser = window.supabaseAuth.getCurrentUser().username === 'vincent' ? 'user-sree' : 'user-vincent';
            const message = prompt('Add a message for the reviewer:');
            
            if (message) {
              window.reviewSystem.requestApproval(docId, otherUser, message);
              window.reviewSystem.updateDocument(docId, { review_state: 'pending_approval' });
              alert('Approval request sent!');
              loadMyDocuments();
            }
          }
          
          async function handleApproval(requestId, approved) {
            const message = prompt(approved ? 'Add approval message:' : 'Reason for rejection:');
            
            if (message !== null) {
              await window.reviewSystem.respondToApproval(requestId, approved, message);
              alert(approved ? 'Document approved!' : 'Document rejected.');
              loadPendingApprovals();
            }
          }
          EOF
          
          # Create review.html
          cat > ./review-portal/review.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Document Review</title>
            <link rel="stylesheet" href="css/base.css">
            <link rel="stylesheet" href="css/components.css">
            <link rel="stylesheet" href="css/layout.css">
            <link rel="stylesheet" href="css/wysiwyg.css">
            <link rel="stylesheet" href="css/comments.css">
          </head>
          <body>
            <header class="header">
              <div class="container">
                <h1 class="header-title">Document Review</h1>
                <div class="header-actions">
                  <span id="doc-status" class="status-badge"></span>
                  <button id="save-draft-btn" class="secondary-button">Save Draft</button>
                  <button id="submit-btn" class="primary-button">Submit for Approval</button>
                  <button id="back-btn" class="secondary-button">Back to Dashboard</button>
                </div>
              </div>
            </header>
            
            <div class="container main-content">
              <div class="sidebar">
                <h2 class="sidebar-title">Comments</h2>
                <div id="comments-list" class="comments-list">
                  <!-- Comments will be loaded here -->
                </div>
                
                <div class="comment-form">
                  <textarea id="new-comment" placeholder="Add a comment..."></textarea>
                  <button id="add-comment-btn" class="primary-button small">Add Comment</button>
                </div>
              </div>
              
              <div class="content-area">
                <div class="editor-toolbar">
                  <button class="toolbar-btn" data-command="bold"><b>B</b></button>
                  <button class="toolbar-btn" data-command="italic"><i>I</i></button>
                  <button class="toolbar-btn" data-command="underline"><u>U</u></button>
                  <span class="toolbar-separator"></span>
                  <button class="toolbar-btn" data-command="formatBlock" data-value="h1">H1</button>
                  <button class="toolbar-btn" data-command="formatBlock" data-value="h2">H2</button>
                  <button class="toolbar-btn" data-command="formatBlock" data-value="h3">H3</button>
                  <span class="toolbar-separator"></span>
                  <button class="toolbar-btn" data-command="insertUnorderedList">‚Ä¢ List</button>
                  <button class="toolbar-btn" data-command="insertOrderedList">1. List</button>
                  <span class="toolbar-separator"></span>
                  <button class="toolbar-btn" data-command="createLink">üîó Link</button>
                  <button class="toolbar-btn" data-command="unlink">üîóÃ∏ Unlink</button>
                </div>
                
                <div id="editor" class="wysiwyg-editor" contenteditable="true">
                  <!-- Content will be loaded here -->
                </div>
              </div>
            </div>
            
            <script src="js/supabase-config.js"></script>
            <script src="js/modules/editor.js"></script>
            <script src="js/modules/comments.js"></script>
            <script src="js/review.js"></script>
          </body>
          </html>
          EOF
          
          # Create base CSS files
          cat > ./review-portal/css/base.css << 'EOF'
          :root {
            --primary-color: #667eea;
            --primary-dark: #5a67d8;
            --secondary-color: #764ba2;
            --success-color: #48bb78;
            --danger-color: #f56565;
            --warning-color: #ed8936;
            --gray-100: #f7fafc;
            --gray-200: #edf2f7;
            --gray-300: #e2e8f0;
            --gray-400: #cbd5e0;
            --gray-500: #a0aec0;
            --gray-600: #718096;
            --gray-700: #4a5568;
            --gray-800: #2d3748;
            --gray-900: #1a202c;
          }
          
          * { margin: 0; padding: 0; box-sizing: border-box; }
          
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6; color: var(--gray-800); background: var(--gray-100);
          }
          
          .container {
            width: 100%; margin: 0 auto; padding: 0 20px;
          }
          
          .header {
            background: white; border-bottom: 1px solid var(--gray-200);
            padding: 1rem 0; box-shadow: 0 2px 4px rgba(0,0,0,0.05);
          }
          
          .header .container {
            display: flex; justify-content: space-between; align-items: center;
          }
          
          .header-title {
            font-size: 1.5rem; color: var(--gray-800); font-weight: 600;
          }
          
          .header-actions {
            display: flex; gap: 1rem; align-items: center;
          }
          
          /* Buttons */
          .primary-button, .secondary-button, .success-button, .danger-button {
            padding: 0.5rem 1rem; border: none; border-radius: 6px;
            font-size: 0.875rem; font-weight: 500; cursor: pointer;
            transition: all 0.2s; display: inline-flex; align-items: center;
            gap: 0.5rem;
          }
          
          .primary-button {
            background: var(--primary-color); color: white;
          }
          
          .primary-button:hover {
            background: var(--primary-dark); transform: translateY(-1px);
          }
          
          .secondary-button {
            background: var(--gray-200); color: var(--gray-700);
          }
          
          .secondary-button:hover {
            background: var(--gray-300);
          }
          
          .success-button {
            background: var(--success-color); color: white;
          }
          
          .danger-button {
            background: var(--danger-color); color: white;
          }
          
          .small {
            padding: 0.25rem 0.75rem; font-size: 0.8rem;
          }
          
          /* Forms */
          .form-select, .form-input, textarea {
            width: 100%; padding: 0.5rem; border: 2px solid var(--gray-300);
            border-radius: 6px; font-size: 0.875rem; font-family: inherit;
          }
          
          .form-select:focus, .form-input:focus, textarea:focus {
            outline: none; border-color: var(--primary-color);
          }
          
          /* Status badges */
          .status-badge {
            padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.75rem;
            font-weight: 600; text-transform: uppercase;
          }
          
          .status-draft { background: var(--gray-200); color: var(--gray-700); }
          .status-pending_approval { background: #fef3c7; color: #92400e; }
          .status-approved { background: #d1fae5; color: #065f46; }
          .status-submitted { background: #dbeafe; color: #1e40af; }
          .status-completed { background: #e0e7ff; color: #3730a3; }
          
          /* Layout */
          .main-content {
            display: flex; gap: 2rem; padding: 2rem 0; height: calc(100vh - 80px);
          }
          
          .sidebar {
            width: 300px; background: white; border-radius: 8px;
            padding: 1.5rem; box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            overflow-y: auto;
          }
          
          .content-area {
            flex: 1; background: white; border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1); display: flex;
            flex-direction: column; overflow: hidden;
          }
          
          .sidebar-title {
            font-size: 1.1rem; font-weight: 600; margin-bottom: 1rem;
            color: var(--gray-800);
          }
          
          .action-button {
            width: 100%; padding: 0.75rem; background: var(--primary-color);
            color: white; border: none; border-radius: 6px;
            font-size: 0.9rem; font-weight: 500; cursor: pointer;
            transition: all 0.2s; display: flex; align-items: center;
            justify-content: center; gap: 0.5rem;
          }
          
          .action-button:hover {
            background: var(--primary-dark); transform: translateY(-1px);
          }
          EOF
          
          # Create components CSS
          cat > ./review-portal/css/components.css << 'EOF'
          /* Dashboard Components */
          .dashboard-sections {
            display: flex; flex-direction: column; gap: 2rem;
          }
          
          .dashboard-section {
            background: white; border-radius: 8px; padding: 1.5rem;
          }
          
          .dashboard-section h2 {
            font-size: 1.25rem; margin-bottom: 1rem; color: var(--gray-800);
          }
          
          .document-grid {
            display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1rem;
          }
          
          .document-card {
            border: 1px solid var(--gray-200); border-radius: 8px;
            padding: 1rem; transition: all 0.2s;
          }
          
          .document-card:hover {
            border-color: var(--primary-color); box-shadow: 0 4px 12px rgba(102, 126, 234, 0.1);
          }
          
          .document-card h3 {
            font-size: 1rem; margin-bottom: 0.5rem; color: var(--gray-800);
          }
          
          .document-meta {
            display: flex; justify-content: space-between; align-items: center;
            margin-bottom: 1rem; font-size: 0.875rem;
          }
          
          .document-actions {
            display: flex; gap: 0.5rem;
          }
          
          .approval-list {
            display: flex; flex-direction: column; gap: 1rem;
          }
          
          .approval-card {
            border: 1px solid var(--warning-color); background: #fffaf0;
            border-radius: 8px; padding: 1rem;
          }
          
          .approval-card h4 {
            font-size: 0.9rem; margin-bottom: 0.5rem; color: var(--gray-800);
          }
          
          .request-message {
            font-style: italic; color: var(--gray-600); margin: 0.5rem 0;
            font-size: 0.875rem;
          }
          
          .approval-actions {
            display: flex; gap: 0.5rem; margin-top: 1rem;
          }
          
          .empty-state {
            text-align: center; color: var(--gray-500); padding: 2rem;
            font-style: italic;
          }
          
          /* Comments */
          .comments-list {
            display: flex; flex-direction: column; gap: 1rem;
            margin-bottom: 1rem; max-height: 400px; overflow-y: auto;
          }
          
          .comment-item {
            background: var(--gray-100); border-radius: 6px; padding: 0.75rem;
            font-size: 0.875rem;
          }
          
          .comment-header {
            display: flex; justify-content: space-between; align-items: center;
            margin-bottom: 0.5rem; font-size: 0.75rem; color: var(--gray-600);
          }
          
          .comment-text {
            color: var(--gray-800); line-height: 1.5;
          }
          
          .comment-form {
            border-top: 1px solid var(--gray-200); padding-top: 1rem;
          }
          
          .comment-form textarea {
            margin-bottom: 0.5rem; resize: vertical; min-height: 60px;
          }
          EOF
          
          # Create layout CSS
          cat > ./review-portal/css/layout.css << 'EOF'
          /* Responsive layout adjustments */
          @media (max-width: 1200px) {
            .sidebar {
              width: 250px;
            }
          }
          
          @media (max-width: 768px) {
            .main-content {
              flex-direction: column;
            }
            
            .sidebar {
              width: 100%; max-height: 300px;
            }
            
            .header-actions {
              flex-wrap: wrap;
            }
            
            .document-grid {
              grid-template-columns: 1fr;
            }
          }
          
          /* Editor layout */
          .editor-toolbar {
            background: var(--gray-100); padding: 0.75rem;
            border-bottom: 1px solid var(--gray-200);
            display: flex; gap: 0.5rem; align-items: center;
            flex-wrap: wrap;
          }
          
          .toolbar-btn {
            padding: 0.25rem 0.5rem; background: white;
            border: 1px solid var(--gray-300); border-radius: 4px;
            cursor: pointer; font-size: 0.875rem; transition: all 0.1s;
          }
          
          .toolbar-btn:hover {
            background: var(--gray-100); border-color: var(--gray-400);
          }
          
          .toolbar-btn.active {
            background: var(--primary-color); color: white;
            border-color: var(--primary-color);
          }
          
          .toolbar-separator {
            width: 1px; height: 20px; background: var(--gray-300);
            margin: 0 0.25rem;
          }
          
          /* WYSIWYG Editor */
          .wysiwyg-editor {
            flex: 1; padding: 2rem; overflow-y: auto; outline: none;
            font-size: 1rem; line-height: 1.6;
          }
          
          .wysiwyg-editor h1,
          .wysiwyg-editor h2,
          .wysiwyg-editor h3 {
            margin-top: 1.5em; margin-bottom: 0.5em; font-weight: 600;
          }
          
          .wysiwyg-editor h1 { font-size: 2em; }
          .wysiwyg-editor h2 { font-size: 1.5em; }
          .wysiwyg-editor h3 { font-size: 1.25em; }
          
          .wysiwyg-editor p {
            margin-bottom: 1em;
          }
          
          .wysiwyg-editor ul,
          .wysiwyg-editor ol {
            margin-bottom: 1em; padding-left: 2em;
          }
          
          .wysiwyg-editor li {
            margin-bottom: 0.25em;
          }
          
          .wysiwyg-editor a {
            color: var(--primary-color); text-decoration: underline;
          }
          
          .wysiwyg-editor a:hover {
            color: var(--primary-dark);
          }
          
          /* Highlighted text for comments */
          .comment-highlight {
            background: #fef3c7; border-bottom: 2px solid #f59e0b;
            cursor: pointer; position: relative;
          }
          
          .comment-highlight:hover::after {
            content: attr(data-comment); position: absolute;
            bottom: 100%; left: 0; background: var(--gray-800);
            color: white; padding: 0.5rem; border-radius: 4px;
            font-size: 0.875rem; white-space: nowrap; z-index: 1000;
            max-width: 300px; overflow: hidden; text-overflow: ellipsis;
          }
          EOF

      # Step 9: Create Admin Console Application
      - name: Create Admin Console
        run: |
          # Copy shared config
          cp ./shared/js/supabase-config.js ./admin-console/js/
          
          # Create admin index.html
          cat > ./admin-console/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Admin Console - Technical Writer Portal</title>
            <link rel="stylesheet" href="css/admin.css">
            <link rel="stylesheet" href="css/dashboard.css">
          </head>
          <body>
            <div class="admin-header">
              <div class="header-content">
                <h1>üõ†Ô∏è Technical Writer Admin Console</h1>
                <div class="header-actions">
                  <span id="admin-user">üë§ Admin</span>
                  <button id="logout-btn" class="logout-button">Logout</button>
                </div>
              </div>
            </div>
            
            <div class="admin-layout">
              <aside class="admin-sidebar">
                <nav class="admin-nav">
                  <h2>Navigation</h2>
                  <ul>
                    <li><a href="#" data-view="all-requests" class="active">üìã All Requests</a></li>
                    <li><a href="#" data-view="by-user">üë• By User</a></li>
                    <li><a href="#" data-view="by-status">üìä By Status</a></li>
                    <li><a href="#" data-view="statistics">üìà Statistics</a></li>
                  </ul>
                </nav>
                
                <div class="filter-section">
                  <h3>Filters</h3>
                  <select id="status-filter" class="filter-select">
                    <option value="all">All Statuses</option>
                    <option value="draft">Draft</option>
                    <option value="pending_approval">Pending Approval</option>
                    <option value="approved">Approved</option>
                    <option value="submitted">Submitted</option>
                    <option value="completed">Completed</option>
                  </select>
                  
                  <select id="user-filter" class="filter-select">
                    <option value="all">All Users</option>
                    <option value="user-vincent">Vincent</option>
                    <option value="user-sree">Sree</option>
                  </select>
                </div>
              </aside>
              
              <main class="admin-content">
                <div id="content-area">
                  <!-- Dynamic content will be loaded here -->
                </div>
              </main>
            </div>
            
            <!-- Review State Modal -->
            <div id="state-modal" class="modal">
              <div class="modal-content">
                <h2>Update Review State</h2>
                <form id="state-form">
                  <input type="hidden" id="doc-id">
                  
                  <div class="form-group">
                    <label>New State:</label>
                    <select id="new-state" class="form-select">
                      <option value="draft">Draft</option>
                      <option value="pending_approval">Pending Approval</option>
                      <option value="approved">Approved</option>
                      <option value="submitted">Submitted</option>
                      <option value="completed">Completed</option>
                    </select>
                  </div>
                  
                  <div class="form-group">
                    <label>Admin Notes:</label>
                    <textarea id="admin-notes" class="form-textarea" rows="4"></textarea>
                  </div>
                  
                  <div class="modal-actions">
                    <button type="submit" class="primary-button">Update State</button>
                    <button type="button" class="secondary-button" onclick="closeModal()">Cancel</button>
                  </div>
                </form>
              </div>
            </div>
            
            <script src="js/supabase-config.js"></script>
            <script src="js/admin-app.js"></script>
          </body>
          </html>
          EOF
          
          # Create admin CSS
          cat > ./admin-console/css/admin.css << 'EOF'
          :root {
            --admin-primary: #4a5568;
            --admin-secondary: #2d3748;
            --admin-accent: #805ad5;
            --admin-success: #48bb78;
            --admin-warning: #ed8936;
            --admin-danger: #f56565;
            --admin-gray-100: #f7fafc;
            --admin-gray-200: #edf2f7;
            --admin-gray-300: #e2e8f0;
          }
          
          * { margin: 0; padding: 0; box-sizing: border-box; }
          
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--admin-gray-100); color: var(--admin-secondary);
            height: 100vh; overflow: hidden;
          }
          
          /* Header */
          .admin-header {
            background: var(--admin-secondary); color: white;
            padding: 1rem 0; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }
          
          .header-content {
            max-width: 1400px; margin: 0 auto; padding: 0 2rem;
            display: flex; justify-content: space-between; align-items: center;
          }
          
          .header-actions {
            display: flex; gap: 1rem; align-items: center;
          }
          
          .logout-button {
            padding: 0.5rem 1rem; background: var(--admin-danger);
            color: white; border: none; border-radius: 4px;
            cursor: pointer; transition: all 0.2s;
          }
          
          .logout-button:hover {
            background: #e53e3e;
          }
          
          /* Layout */
          .admin-layout {
            display: flex; height: calc(100vh - 64px);
          }
          
          .admin-sidebar {
            width: 250px; background: white; border-right: 1px solid var(--admin-gray-300);
            padding: 1.5rem; overflow-y: auto;
          }
          
          .admin-nav h2 {
            font-size: 0.875rem; text-transform: uppercase; color: var(--admin-primary);
            margin-bottom: 1rem; font-weight: 600;
          }
          
          .admin-nav ul {
            list-style: none;
          }
          
          .admin-nav a {
            display: block; padding: 0.75rem 1rem; color: var(--admin-primary);
            text-decoration: none; border-radius: 4px; transition: all 0.2s;
            margin-bottom: 0.25rem;
          }
          
          .admin-nav a:hover {
            background: var(--admin-gray-100);
          }
          
          .admin-nav a.active {
            background: var(--admin-accent); color: white;
          }
          
          .filter-section {
            margin-top: 2rem; padding-top: 2rem; border-top: 1px solid var(--admin-gray-300);
          }
          
          .filter-section h3 {
            font-size: 0.875rem; text-transform: uppercase; color: var(--admin-primary);
            margin-bottom: 1rem; font-weight: 600;
          }
          
          .filter-select {
            width: 100%; padding: 0.5rem; border: 1px solid var(--admin-gray-300);
            border-radius: 4px; margin-bottom: 0.75rem; font-size: 0.875rem;
          }
          
          /* Content */
          .admin-content {
            flex: 1; padding: 2rem; overflow-y: auto;
          }
          
          /* Cards */
          .request-card {
            background: white; border: 1px solid var(--admin-gray-300);
            border-radius: 8px; padding: 1.5rem; margin-bottom: 1rem;
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
          }
          
          .request-header {
            display: flex; justify-content: space-between; align-items: start;
            margin-bottom: 1rem;
          }
          
          .request-title {
            font-size: 1.125rem; font-weight: 600; color: var(--admin-secondary);
          }
          
          .request-meta {
            display: flex; gap: 1rem; font-size: 0.875rem; color: var(--admin-primary);
            margin-top: 0.5rem;
          }
          
          .state-indicator {
            padding: 0.5rem 1rem; border-radius: 4px; font-size: 0.875rem;
            font-weight: 600; text-transform: uppercase;
          }
          
          .state-draft { background: var(--admin-gray-200); color: var(--admin-primary); }
          .state-pending_approval { background: #fef3c7; color: #92400e; }
          .state-approved { background: #d1fae5; color: #065f46; }
          .state-submitted { background: #dbeafe; color: #1e40af; }
          .state-completed { background: #e0e7ff; color: #3730a3; }
          
          .request-actions {
            display: flex; gap: 0.5rem;
          }
          
          .action-button {
            padding: 0.5rem 1rem; border: 1px solid var(--admin-gray-300);
            background: white; color: var(--admin-primary); border-radius: 4px;
            cursor: pointer; font-size: 0.875rem; transition: all 0.2s;
          }
          
          .action-button:hover {
            background: var(--admin-gray-100);
          }
          
          .action-button.primary {
            background: var(--admin-accent); color: white; border-color: var(--admin-accent);
          }
          
          .action-button.primary:hover {
            background: #744bc5;
          }
          
          /* Modal */
          .modal {
            display: none; position: fixed; top: 0; left: 0;
            width: 100%; height: 100%; background: rgba(0,0,0,0.5);
            z-index: 1000; align-items: center; justify-content: center;
          }
          
          .modal.active {
            display: flex;
          }
          
          .modal-content {
            background: white; border-radius: 8px; padding: 2rem;
            max-width: 500px; width: 90%; box-shadow: 0 10px 25px rgba(0,0,0,0.2);
          }
          
          .modal-content h2 {
            margin-bottom: 1.5rem; color: var(--admin-secondary);
          }
          
          .form-group {
            margin-bottom: 1rem;
          }
          
          .form-group label {
            display: block; margin-bottom: 0.5rem; font-weight: 500;
            color: var(--admin-primary);
          }
          
          .form-select, .form-textarea {
            width: 100%; padding: 0.5rem; border: 1px solid var(--admin-gray-300);
            border-radius: 4px; font-size: 0.875rem;
          }
          
          .form-textarea {
            resize: vertical; font-family: inherit;
          }
          
          .modal-actions {
            display: flex; gap: 0.5rem; margin-top: 1.5rem;
            justify-content: flex-end;
          }
          
          .primary-button, .secondary-button {
            padding: 0.5rem 1rem; border: none; border-radius: 4px;
            cursor: pointer; font-size: 0.875rem; transition: all 0.2s;
          }
          
          .primary-button {
            background: var(--admin-accent); color: white;
          }
          
          .primary-button:hover {
            background: #744bc5;
          }
          
          .secondary-button {
            background: var(--admin-gray-200); color: var(--admin-primary);
          }
          
          .secondary-button:hover {
            background: var(--admin-gray-300);
          }
          
          /* Statistics */
          .stats-grid {
            display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem; margin-bottom: 2rem;
          }
          
          .stat-card {
            background: white; border: 1px solid var(--admin-gray-300);
            border-radius: 8px; padding: 1.5rem; text-align: center;
          }
          
          .stat-value {
            font-size: 2rem; font-weight: 700; color: var(--admin-accent);
          }
          
          .stat-label {
            font-size: 0.875rem; color: var(--admin-primary);
            text-transform: uppercase; margin-top: 0.5rem;
          }
          EOF
          
          # Create admin app.js
          cat > ./admin-console/js/admin-app.js << 'EOF'
          document.addEventListener('DOMContentLoaded', function() {
            // Simple admin auth check (in production, use proper auth)
            const adminUser = window.supabaseAuth.getCurrentUser();
            if (!adminUser || adminUser.role !== 'admin') {
              // For demo, auto-login as admin
              window.supabaseAuth.login('admin', 'admin123');
            }
            
            // Initialize
            loadAllRequests();
            setupEventListeners();
          });
          
          function setupEventListeners() {
            // Navigation
            document.querySelectorAll('.admin-nav a').forEach(link => {
              link.addEventListener('click', (e) => {
                e.preventDefault();
                document.querySelectorAll('.admin-nav a').forEach(a => a.classList.remove('active'));
                link.classList.add('active');
                
                const view = link.dataset.view;
                switch(view) {
                  case 'all-requests':
                    loadAllRequests();
                    break;
                  case 'by-user':
                    loadByUser();
                    break;
                  case 'by-status':
                    loadByStatus();
                    break;
                  case 'statistics':
                    loadStatistics();
                    break;
                }
              });
            });
            
            // Filters
            document.getElementById('status-filter').addEventListener('change', loadAllRequests);
            document.getElementById('user-filter').addEventListener('change', loadAllRequests);
            
            // Logout
            document.getElementById('logout-btn').addEventListener('click', () => {
              window.supabaseAuth.logout();
              window.location.href = '../review-portal/index.html';
            });
            
            // Modal form
            document.getElementById('state-form').addEventListener('submit', updateDocumentState);
          }
          
          function loadAllRequests() {
            const statusFilter = document.getElementById('status-filter').value;
            const userFilter = document.getElementById('user-filter').value;
            
            let documents = window.reviewSystem.getAllDocuments();
            
            // Apply filters
            if (statusFilter !== 'all') {
              documents = documents.filter(doc => doc.review_state === statusFilter);
            }
            if (userFilter !== 'all') {
              documents = documents.filter(doc => doc.user_id === userFilter);
            }
            
            const content = document.getElementById('content-area');
            content.innerHTML = `
              <h2>All Review Requests (${documents.length})</h2>
              <div class="requests-list">
                ${documents.map(doc => createRequestCard(doc)).join('')}
              </div>
            `;
          }
          
          function createRequestCard(doc) {
            const comments = window.reviewSystem.getDocumentComments(doc.id);
            const requests = window.reviewSystem.getApprovalRequests()
              .filter(req => req.document_id === doc.id);
            
            return