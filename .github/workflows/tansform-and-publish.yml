name: DITA to SPA Transformation with Branch Review

on:
  push:
    branches:
      - '**'  # This will trigger on all branches
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 1: Checkout repository 
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Extract branch name for deployment path
      - name: Extract branch name
        shell: bash
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')" >> $GITHUB_ENV
          echo "REPO_NAME=simple-dita-publication" >> $GITHUB_ENV
        id: extract_branch

      # Step 4: Install DITA-OT
      - name: Set up DITA-OT
        run: |
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # [Steps 5-9 remain the same as in your original workflow]

      # Step 10: Create branch manifest file to track branches
      - name: Update Branch Manifest
        run: |
          # Create branches directory if it doesn't exist
          mkdir -p ./site/branches
          
          # Create or update the branch manifest
          if [ -f "./site/branch-manifest.json" ]; then
            # Manifest exists, update it
            MANIFEST_FILE="./site/branch-manifest.json"
          else
            # Create new manifest
            echo '{"branches":[],"lastUpdated":""}' > ./site/branch-manifest.json
            MANIFEST_FILE="./site/branch-manifest.json"
          fi
          
          # Create a timestamp for the current deployment
          TIMESTAMP=$(date -u "+%Y-%m-%dT%H:%M:%SZ")
          
          # Update branch manifest with jq if available, otherwise use simple method
          if command -v jq >/dev/null 2>&1; then
            # Use jq to update the manifest
            jq --arg branch "$BRANCH_NAME" \
               --arg timestamp "$TIMESTAMP" \
               --arg actor "$GITHUB_ACTOR" \
               --arg sha "$GITHUB_SHA" \
               --arg url "branches/$BRANCH_NAME" \
               '
               .branches = (
                 [.branches[] | select(.name != $branch)] + 
                 [{"name": $branch, "timestamp": $timestamp, "author": $actor, "commit": $sha, "url": $url}]
               ) | .lastUpdated = $timestamp
               ' \
               $MANIFEST_FILE > branch-manifest-new.json
               
            if jq empty branch-manifest-new.json 2>/dev/null; then
              mv branch-manifest-new.json $MANIFEST_FILE
            else
              echo "Error with jq, using simple manifest creation instead"
              if [ "$BRANCH_NAME" == "main" ]; then
                echo '{"branches":[{"name":"main","timestamp":"'$TIMESTAMP'","author":"'$GITHUB_ACTOR'","commit":"'$GITHUB_SHA'","url":""}],"lastUpdated":"'$TIMESTAMP'"}' > $MANIFEST_FILE
              else
                echo '{"branches":[{"name":"'$BRANCH_NAME'","timestamp":"'$TIMESTAMP'","author":"'$GITHUB_ACTOR'","commit":"'$GITHUB_SHA'","url":"branches/'$BRANCH_NAME'"}],"lastUpdated":"'$TIMESTAMP'"}' > $MANIFEST_FILE
              fi
            fi
          else
            # Simple manifest creation without jq
            if [ "$BRANCH_NAME" == "main" ]; then
              echo '{"branches":[{"name":"main","timestamp":"'$TIMESTAMP'","author":"'$GITHUB_ACTOR'","commit":"'$GITHUB_SHA'","url":""}],"lastUpdated":"'$TIMESTAMP'"}' > $MANIFEST_FILE
            else
              echo '{"branches":[{"name":"'$BRANCH_NAME'","timestamp":"'$TIMESTAMP'","author":"'$GITHUB_ACTOR'","commit":"'$GITHUB_SHA'","url":"branches/'$BRANCH_NAME'"}],"lastUpdated":"'$TIMESTAMP'"}' > $MANIFEST_FILE
            fi
          fi
          
          echo "Branch manifest updated for $BRANCH_NAME"
          cat $MANIFEST_FILE

      # Step 11: Create or update repository-specific configuration
      - name: Configure Repository Settings
        run: |
          # Create a repository configuration file
          cat > ./site/repo-config.js << EOF
          // Repository configuration
          const repoConfig = {
            name: "simple-dita-publication",
            owner: "mikev21313",
            basePath: "/simple-dita-publication",
            mainBranch: "main"
          };
          EOF
          
          # Update index.html to include this config file
          sed -i '/<script src="js\/app.js"><\/script>/i \    <script src="repo-config.js"></script>' ./site/index.html

      # Step 12: Fix the base path in index.html
      - name: Fix Base Path in Index.html
        run: |
          # Create the JS script for path handling
          cat > ./site/js/path-handler.js << 'EOF'
          // Path handler for GitHub Pages
          document.addEventListener('DOMContentLoaded', function() {
            // Repository config should be available as repoConfig
            if (typeof repoConfig === 'undefined') {
              console.error('Repository configuration not found');
              return;
            }
            
            // Get the current branch from the URL
            function getCurrentBranch() {
              const path = window.location.pathname;
              const parts = path.split('/');
              
              // Find branches segment
              const branchesIndex = parts.indexOf('branches');
              if (branchesIndex !== -1 && branchesIndex + 1 < parts.length) {
                return parts[branchesIndex + 1];
              }
              
              // Default to main branch
              return repoConfig.mainBranch;
            }
            
            // Get correct base URL
            const currentBranch = getCurrentBranch();
            const isMainBranch = currentBranch === repoConfig.mainBranch;
            
            // Set branch information in UI
            const branchNameEl = document.getElementById('branch-name');
            if (branchNameEl) {
              branchNameEl.textContent = currentBranch;
            }
            
            // Show/hide branch banner
            const branchBannerEl = document.getElementById('branch-banner');
            if (branchBannerEl) {
              branchBannerEl.style.display = isMainBranch ? 'none' : 'flex';
            }
            
            // Update compare link
            const compareLink = document.getElementById('compare-link');
            if (compareLink && !isMainBranch) {
              compareLink.href = `https://github.com/${repoConfig.owner}/${repoConfig.name}/compare/${repoConfig.mainBranch}...${currentBranch}`;
            }
            
            console.log('Current branch:', currentBranch);
            console.log('Base path:', repoConfig.basePath);
          });
          EOF
          
          # Add the script to the index.html
          sed -i '/<script src="js\/app.js"><\/script>/i \    <script src="js/path-handler.js"></script>' ./site/index.html

      # Step 13: Deploy to GitHub Pages with branch-specific path
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          destination_dir: ${{ env.BRANCH_NAME == 'main' && '' || format('branches/{0}', env.BRANCH_NAME) }}
          keep_files: true  # Important to keep existing branch deployments
          force_orphan: false  # CRITICAL: Never use force_orphan to prevent wiping out branch deployments