name: DITA to SPA with Functional Supabase Review System

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install DITA-OT and required tools
      - name: Set up DITA-OT and XML tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils xsltproc postgresql-client curl jq

          # Install DITA-OT
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # Step 4: Setup Supabase Database Schema
      - name: Setup Supabase Database Schema
        run: |
          echo "Setting up Supabase database schema..."
          
          # Test connection first
          echo "Testing Supabase connection..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X GET \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -H "apikey: ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            "https://oiluavgeyngmkqozzmnz.supabase.co/rest/v1/")
          
          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ Supabase connection successful"
          else
            echo "❌ Supabase connection failed with status: $RESPONSE"
            exit 1
          fi

          # Create comments table
          echo "Creating comments table..."
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -H "apikey: ${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -H "Content-Type: application/json" \
            "https://oiluavgeyngmkqozzmnz.supabase.co/rest/v1/rpc/create_comments_table" \
            -d '{}' || echo "Table may already exist"

          # Create the table using SQL if RPC doesn't work
          echo "Ensuring comments table exists with proper schema..."
          
          # We'll create the table structure in the JavaScript client instead
          # since direct SQL execution requires more complex setup
          
          echo "✅ Database schema setup completed"

      # Step 5: Parse DITAMAP to generate navigation structure
      - name: Parse DITAMAP Structure
        run: |
          echo "Parsing DITAMAP structure from dita-source/automotive.ditamap"

          # Create XSLT file for navigation extraction
          cat > extract-nav.xsl << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            <xsl:output method="text"/>
            <xsl:template match="/">
              [<xsl:apply-templates select="//topicref[not(ancestor::topicref)]"/>]
            </xsl:template>
            <xsl:template match="topicref">
              <xsl:variable name="href" select="@href"/>
              <xsl:variable name="filename">
                <xsl:choose>
                  <xsl:when test="contains($href, '/')">
                    <xsl:value-of select="substring-after(substring-before($href, '.'), '/')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="substring-before($href, '.')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:variable name="id">
                <xsl:choose>
                  <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                  <xsl:otherwise><xsl:value-of select="translate($filename, '_', '-')"/></xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:variable name="title">
                <xsl:choose>
                  <xsl:when test="@navtitle"><xsl:value-of select="@navtitle"/></xsl:when>
                  <xsl:when test="topicmeta/navtitle"><xsl:value-of select="topicmeta/navtitle"/></xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="translate(translate($id, '-', ' '), '_', ' ')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              {
                "id": "<xsl:value-of select="$id"/>",
                "title": "<xsl:value-of select="$title"/>",
                "filename": "<xsl:value-of select="$filename"/>",
                "href": "<xsl:value-of select="$href"/>"
                <xsl:if test="topicref">
                  ,"children": [<xsl:apply-templates select="topicref"/>]
                </xsl:if>
              }<xsl:if test="following-sibling::topicref">,</xsl:if>
            </xsl:template>
          </xsl:stylesheet>
          EOF

          # Apply XSLT transformation
          xsltproc extract-nav.xsl dita-source/automotive.ditamap > navigation-structure.json || echo "[]" > navigation-structure.json
          sed -i 's/\\n//g; s/\\t//g; s/  / /g' navigation-structure.json

          echo "DITAMAP parsing complete"
          cat navigation-structure.json

      # Step 6: Transform DITA to HTML
      - name: Transform DITA to HTML and Prepare Images
        run: |
          ./dita-ot-4.0.2/bin/dita --input=dita-source/automotive.ditamap --format=html5 --output=./site || echo "DITA transformation completed"
          
          mkdir -p ./site/content ./site/images ./site/js ./site/css

          # Copy images
          find ./dita-source -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -exec cp -v {} ./site/images/ \; || echo "No images found"

          # Create placeholder if no images
          if [ ! "$(ls -A ./site/images 2>/dev/null)" ]; then
            echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" | base64 -d > ./site/images/placeholder.png
          fi

      # Step 7: Process HTML content for SPA
      - name: Process HTML Content
        run: |
          # Process HTML files to create SPA content
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            if [[ "$file" == "./site/index.html" ]]; then continue; fi

            filename=$(basename "$file")
            id="${filename%.html}"
            hyphenated_id="${id//_/-}"

            # Extract content
            content=$(sed -n '/<body/,/<\/body>/p' "$file" | sed '/<body/d;/<\/body>/d' | sed '/<header/,/<\/header>/d' | sed '/<nav/,/<\/nav>/d' | sed '/<footer/,/<\/footer>/d')
            
            # Fix image paths
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="[^"]*\/([^\/"]*)\.([a-zA-Z0-9]+)"/<img\1src="images\/\2.\3"/gi')
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="([^\/:"]*)\.(jpg|jpeg|png|gif|svg)"/<img\1src="images\/\2.\3"/gi')

            # Get title
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '_-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi

            # Create content files
            echo "$content" > "./site/content/$id.html"
            if [[ "$id" != "$hyphenated_id" ]]; then
              echo "$content" > "./site/content/$hyphenated_id.html"
            fi
          done

          # Create content ID mapping
          echo "// Auto-generated content ID mapping" > ./site/js/content-id-map.js
          echo "const contentIdMap = {" >> ./site/js/content-id-map.js

          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            filename=$(basename "$file" .html)
            id="${filename//_/-}"
            original_filename="$filename"
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            raw_content=$(cat "$file" | tr '\n' ' ' | sed 's/<[^>]*>//g' | sed 's/&nbsp;/ /g' | sed 's/  */ /g' | tr -d '\n\r')

            if grep -q "\"$id\":" ./site/js/content-id-map.js; then continue; fi

            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi

            title=$(echo "$title" | sed 's/"/\\"/g')
            raw_content=$(echo "$raw_content" | sed 's/"/\\"/g')

            echo "  \"$id\": { \"title\": \"$title\", \"filename\": \"$original_filename\", \"content\": \"$raw_content\" }," >> ./site/js/content-id-map.js
          done

          echo "  \"default\": { \"title\": \"Automotive Documentation\", \"filename\": \"\", \"content\": \"\" }" >> ./site/js/content-id-map.js
          echo "};" >> ./site/js/content-id-map.js

      # Step 8: Generate Navigation Configuration
      - name: Generate Navigation Configuration
        run: |
          cat > ./site/js/navigation-config.js << 'EOF'
          // Auto-generated navigation structure from DITAMAP
          const navigationConfig =
          EOF
          cat ./navigation-structure.json >> ./site/js/navigation-config.js
          echo ";" >> ./site/js/navigation-config.js

      # Step 9: Create Enhanced Supabase Configuration
      - name: Create Enhanced Supabase Configuration
        run: |
          cat > ./site/js/supabase-config.js << 'EOF'
          // Enhanced Supabase configuration with table creation
          const SUPABASE_URL = 'https://oiluavgeyngmkqozzmnz.supabase.co';
          const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9pbHVhdmdleW5nbWtxb3p6bW56Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg0NjIxOTgsImV4cCI6MjA2NDAzODE5OH0.zsfYoYDgArOBjP7SziUMgRQpIHhwTb-qgtw7t54MsXQ';

          // Enhanced Supabase client class
          class SupabaseClient {
            constructor() {
              this.baseUrl = SUPABASE_URL;
              this.headers = {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'apikey': SUPABASE_ANON_KEY
              };
              this.connected = false;
              this.initializeSchema();
            }

            async initializeSchema() {
              try {
                // Try to create the comments table
                await this.createCommentsTable();
                console.log('✅ Database schema initialized');
              } catch (error) {
                console.warn('Schema initialization note:', error.message);
                // This is expected if tables already exist
              }
            }

            async createCommentsTable() {
              // First, try to select from the table to see if it exists
              try {
                await this.request('comments?limit=1');
                console.log('Comments table already exists');
                return;
              } catch (error) {
                // Table doesn't exist, but we can't create it via REST API
                // Log the requirement for manual table creation
                console.log('Comments table needs to be created manually in Supabase Dashboard');
                console.log('Required SQL:');
                console.log(`
                  CREATE TABLE IF NOT EXISTS comments (
                    id SERIAL PRIMARY KEY,
                    page_id TEXT NOT NULL,
                    comment_type TEXT NOT NULL DEFAULT 'comment',
                    comment_text TEXT NOT NULL,
                    selected_text TEXT,
                    selection_type TEXT DEFAULT 'text',
                    session_id TEXT,
                    user_agent TEXT,
                    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
                  );
                  
                  -- Enable Row Level Security
                  ALTER TABLE comments ENABLE ROW LEVEL SECURITY;
                  
                  -- Create policy to allow all operations for now
                  CREATE POLICY "Allow all operations on comments" ON comments
                  FOR ALL USING (true) WITH CHECK (true);
                `);
              }
            }

            async request(endpoint, options = {}) {
              const url = `${this.baseUrl}/rest/v1/${endpoint}`;
              const config = { headers: this.headers, ...options };

              try {
                const response = await fetch(url, config);
                
                if (!response.ok) {
                  const errorText = await response.text();
                  throw new Error(`HTTP ${response.status}: ${errorText}`);
                }
                
                this.connected = true;
                this.updateConnectionStatus(true);
                return await response.json();
              } catch (error) {
                this.connected = false;
                this.updateConnectionStatus(false);
                console.error('Supabase request failed:', error);
                throw error;
              }
            }

            updateConnectionStatus(connected) {
              const event = new CustomEvent('supabaseConnectionChange', { 
                detail: { connected } 
              });
              window.dispatchEvent(event);
            }

            async testConnection() {
              try {
                await this.request('comments?limit=1');
                return true;
              } catch (error) {
                console.error('Connection test failed:', error);
                return false;
              }
            }

            async getComments(pageId) {
              try {
                const comments = await this.request(
                  `comments?page_id=eq.${encodeURIComponent(pageId)}&order=created_at.desc`
                );
                return comments || [];
              } catch (error) {
                console.error('Failed to fetch comments:', error);
                return [];
              }
            }

            async saveComment(commentData) {
              try {
                const comment = {
                  page_id: commentData.page_id,
                  comment_type: commentData.comment_type || 'comment',
                  comment_text: commentData.comment_text,
                  selected_text: commentData.selected_text || '',
                  selection_type: commentData.selection_type || 'text',
                  session_id: this.getSessionId(),
                  user_agent: navigator.userAgent
                };

                const response = await fetch(`${this.baseUrl}/rest/v1/comments`, {
                  method: 'POST',
                  headers: {
                    ...this.headers,
                    'Prefer': 'return=representation'
                  },
                  body: JSON.stringify(comment)
                });

                if (!response.ok) {
                  const errorText = await response.text();
                  throw new Error(`HTTP ${response.status}: ${errorText}`);
                }

                const result = await response.json();
                console.log('Comment saved successfully:', result);
                
                // Dispatch event for UI updates
                const event = new CustomEvent('commentSaved', { 
                  detail: { comment: result[0] || result } 
                });
                window.dispatchEvent(event);
                
                return result;
              } catch (error) {
                console.error('Failed to save comment:', error);
                throw error;
              }
            }

            async updateComment(commentId, updates) {
              try {
                const response = await fetch(`${this.baseUrl}/rest/v1/comments?id=eq.${commentId}`, {
                  method: 'PATCH',
                  headers: {
                    ...this.headers,
                    'Prefer': 'return=representation'
                  },
                  body: JSON.stringify({
                    ...updates,
                    updated_at: new Date().toISOString()
                  })
                });

                if (!response.ok) {
                  const errorText = await response.text();
                  throw new Error(`HTTP ${response.status}: ${errorText}`);
                }

                return await response.json();
              } catch (error) {
                console.error('Failed to update comment:', error);
                throw error;
              }
            }

            async deleteComment(commentId) {
              try {
                const response = await fetch(`${this.baseUrl}/rest/v1/comments?id=eq.${commentId}`, {
                  method: 'DELETE',
                  headers: this.headers
                });

                if (!response.ok) {
                  const errorText = await response.text();
                  throw new Error(`HTTP ${response.status}: ${errorText}`);
                }

                // Dispatch event for UI updates
                const event = new CustomEvent('commentDeleted', { 
                  detail: { commentId } 
                });
                window.dispatchEvent(event);

                return true;
              } catch (error) {
                console.error('Failed to delete comment:', error);
                throw error;
              }
            }

            async clearAllComments() {
              try {
                const response = await fetch(`${this.baseUrl}/rest/v1/comments`, {
                  method: 'DELETE',
                  headers: this.headers
                });

                if (!response.ok) {
                  const errorText = await response.text();
                  throw new Error(`HTTP ${response.status}: ${errorText}`);
                }

                // Dispatch event for UI updates
                const event = new CustomEvent('allCommentsCleared');
                window.dispatchEvent(event);

                return true;
              } catch (error) {
                console.error('Failed to clear comments:', error);
                throw error;
              }
            }

            getSessionId() {
              let sessionId = localStorage.getItem('reviewSessionId');
              if (!sessionId) {
                sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                localStorage.setItem('reviewSessionId', sessionId);
              }
              return sessionId;
            }
          }

          // Initialize client
          window.supabaseClient = new SupabaseClient();
          EOF

      # Step 10: Create Enhanced CSS with Comments Sidebar
      - name: Create Enhanced CSS with Comments Sidebar
        run: |
          cat > ./site/css/style.css << 'EOF'
          /* Enhanced SPA CSS with Functional Review System */
          * { margin: 0; padding: 0; box-sizing: border-box; }

          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6; display: flex; height: 100vh; width: 100%;
            overflow: hidden; color: #333; background-color: #f8f8f8;
          }

          .sidebar {
            width: 280px; background-color: #e0f7f7; padding: 15px;
            height: 100vh; overflow-y: auto; border-right: 1px solid #c0e0e0;
            display: flex; flex-direction: column; box-shadow: 2px 0 5px rgba(0,0,0,0.05);
          }

          .main-content {
            flex: 1; padding: 30px; height: 100vh; overflow-y: auto;
            background-color: #ffffff; position: relative;
          }

          .comments-sidebar {
            width: 320px; background-color: #f5f5f5; padding: 15px;
            height: 100vh; overflow-y: auto; border-left: 1px solid #e0e0e0;
            display: none; flex-direction: column; box-shadow: -2px 0 5px rgba(0,0,0,0.05);
          }

          .comments-sidebar.show { display: flex; }

          .sidebar h2 {
            font-weight: 500; margin-bottom: 15px; color: #00747a;
            border-bottom: 2px solid #80cbc4; padding-bottom: 10px; font-size: 1.4em;
          }

          .sidebar-nav { flex: 1; overflow-y: auto; margin-top: 15px; }
          .sidebar ul { list-style-type: none; padding-left: 0; margin-bottom: 5px; }
          .sidebar ul ul { padding-left: 20px; margin-top: 5px; margin-bottom: 0; }
          .sidebar li { margin-bottom: 6px; position: relative; }

          .sidebar .toggle-arrow {
            display: inline-block; width: 18px; height: 18px;
            position: absolute; left: 0; top: 4px; cursor: pointer;
            z-index: 10; color: #00747a;
          }
          .sidebar .toggle-arrow:before {
            content: "▶"; display: inline-block; font-size: 10px;
            transition: transform 0.2s;
          }
          .sidebar li.expanded > .toggle-arrow:before { transform: rotate(90deg); }
          .sidebar li.has-children > ul { display: none; }
          .sidebar li.has-children.expanded > ul { display: block; }

          .sidebar a {
            color: #00747a; text-decoration: none; display: block;
            padding: 6px 5px 6px 22px; border-radius: 4px;
            transition: background-color 0.2s, color 0.2s; cursor: pointer; font-size: 0.95em;
          }
          .sidebar a:hover { background-color: #e1f5fe; color: #006064; }
          .sidebar a.active {
            background-color: #80deea; font-weight: bold; color: #006064;
            box-shadow: inset 3px 0 0 #00acc1;
          }

          .review-controls {
            border-top: 2px solid #80cbc4; padding-top: 15px; margin-top: 15px;
            display: flex; flex-direction: column; gap: 10px;
          }
          .review-controls h3 { color: #00747a; font-size: 1.1em; margin-bottom: 10px; }

          .review-btn {
            padding: 8px 12px; border: 1px solid #00acc1;
            background: linear-gradient(135deg, #00acc1, #0097a7); color: white;
            border-radius: 5px; cursor: pointer; font-size: 0.9em;
            transition: all 0.3s; text-align: center;
          }
          .review-btn:hover {
            background: linear-gradient(135deg, #0097a7, #00838f);
            transform: translateY(-1px); box-shadow: 0 2px 5px rgba(0,0,0,0.2);
          }
          .review-btn.active {
            background: linear-gradient(135deg, #ff6f00, #e65100); border-color: #ff6f00;
          }
          .review-btn.secondary {
            background: linear-gradient(135deg, #546e7a, #455a64); border-color: #546e7a;
            font-size: 0.85em; padding: 6px 10px;
          }
          .review-btn.danger {
            background: linear-gradient(135deg, #f44336, #d32f2f); border-color: #f44336;
            font-size: 0.85em; padding: 6px 10px;
          }

          .search-container {
            margin-bottom: 15px; display: flex; gap: 5px; width: 100%;
          }
          .search-container input[type="text"] {
            flex-grow: 1; padding: 8px 10px; border: 1px solid #b0e0e6;
            border-radius: 5px; font-size: 0.9em; outline: none;
          }
          .search-container button {
            padding: 8px 10px; background-color: #00acc1; color: white;
            border: none; border-radius: 5px; cursor: pointer;
          }

          .search-results {
            list-style-type: none; padding: 0; margin-top: 15px;
            border-top: 1px solid #e0e0e0; padding-top: 10px;
            max-height: 300px; overflow-y: auto; background-color: #f5f9f9;
          }

          .main-content h1, .main-content h2, .main-content h3, .main-content h4 {
            font-weight: 500; margin-top: 1.5em; margin-bottom: 0.8em; color: #00838f;
          }
          .main-content h1 {
            font-size: 2em; border-bottom: 1px solid #e0e0e0;
            padding-bottom: 10px; margin-top: 0;
          }
          .main-content p { margin-bottom: 1em; line-height: 1.6; }
          .main-content img {
            max-width: 100%; height: auto; display: block; margin: 1em auto;
            border: 1px solid #e0e0e0; border-radius: 4px;
          }

          .welcome-screen {
            text-align: center; padding: 40px 20px; color: #00838f;
          }
          .welcome-screen h2 { margin-bottom: 20px; font-size: 2em; }

          /* Connection Status - Persistent in upper left */
          .connection-status {
            position: fixed; top: 15px; left: 15px; z-index: 2000;
            padding: 8px 12px; border-radius: 20px; font-size: 0.8em;
            font-weight: bold; transition: all 0.3s; cursor: pointer;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
          }
          .connection-status.connected { 
            background: #4caf50; color: white; 
          }
          .connection-status.disconnected { 
            background: #f44336; color: white; animation: pulse 2s infinite;
          }
          .connection-status.connecting { 
            background: #ff9800; color: white; 
          }

          @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
          }

          /* Review Mode Styles */
          .review-mode .main-content { background-color: #fffbf0; }
          .review-mode .reviewable-text { 
            cursor: text; user-select: text; position: relative;
          }
          .review-mode .reviewable-text:hover {
            background-color: rgba(255, 235, 59, 0.1); border-radius: 2px;
          }

          /* Comment Highlights */
          .review-comment-highlight {
            background-color: #e3f2fd; border-left: 3px solid #2196f3;
            padding: 2px 4px; margin: 2px 0; border-radius: 2px; 
            cursor: pointer; position: relative;
          }
          .review-suggestion-highlight {
            background-color: #fff3e0; border-left: 3px solid #ff9800;
            padding: 2px 4px; margin: 2px 0; border-radius: 2px; 
            cursor: pointer; position: relative;
          }

          .comment-tooltip {
            position: absolute; top: -40px; left: 0; background: #333;
            color: white; padding: 5px 8px; border-radius: 4px; font-size: 0.8em;
            white-space: nowrap; z-index: 1000; opacity: 0; pointer-events: none;
            transition: opacity 0.2s;
          }
          .comment-tooltip:before {
            content: ''; position: absolute; top: 100%; left: 10px;
            border: 5px solid transparent; border-top-color: #333;
          }
          .review-comment-highlight:hover .comment-tooltip,
          .review-suggestion-highlight:hover .comment-tooltip {
            opacity: 1;
          }

          /* Comment Dialog */
          .dialog-overlay {
            position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            background: rgba(0,0,0,0.5); z-index: 1999; display: none;
            animation: fadeIn 0.2s ease-out;
          }
          .dialog-overlay.show { display: block; }

          @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
          }

          .comment-dialog {
            position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
            background: white; border: 2px solid #2c5aa0; border-radius: 8px;
            padding: 20px; width: 450px; max-width: 90vw; z-index: 2000;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3); display: none;
            animation: slideIn 0.3s ease-out;
          }
          .comment-dialog.show { display: block; }

          @keyframes slideIn {
            from { transform: translate(-50%, -60%); opacity: 0; }
            to { transform: translate(-50%, -50%); opacity: 1; }
          }

          .comment-dialog h3 { color: #2c5aa0; margin-bottom: 15px; }
          .comment-dialog textarea {
            width: 100%; height: 100px; padding: 10px; border: 1px solid #ddd;
            border-radius: 4px; font-family: inherit; resize: vertical;
            font-size: 0.9em;
          }

          .dialog-actions {
            display: flex; gap: 10px; justify-content: flex-end; margin-top: 15px;
          }
          .dialog-btn {
            padding: 8px 16px; border: 1px solid #ddd; border-radius: 4px;
            cursor: pointer; font-size: 0.9em; transition: all 0.2s;
          }
          .dialog-btn.primary {
            background: #2c5aa0; color: white; border-color: #2c5aa0;
          }
          .dialog-btn.primary:hover {
            background: #1e3f73; border-color: #1e3f73;
          }
          .dialog-btn.secondary { 
            background: #f5f5f5; 
          }
          .dialog-btn.secondary:hover { 
            background: #e0e0e0; 
          }

          /* Comments Sidebar Styles */
          .comments-sidebar h3 {
            color: #333; margin-bottom: 15px; padding-bottom: 10px;
            border-bottom: 2px solid #e0e0e0; font-size: 1.2em;
          }

          .comments-list {
            flex: 1; overflow-y: auto;
          }

          .comment-item {
            background: white; border: 1px solid #e0e0e0; border-radius: 6px;
            padding: 12px; margin-bottom: 10px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);
          }

          .comment-item.suggestion {
            border-left: 4px solid #ff9800;
          }

          .comment-item.comment {
            border-left: 4px solid #2196f3;
          }

          .comment-header {
            display: flex; justify-content: between; align-items: center;
            margin-bottom: 8px; font-size: 0.85em; color: #666;
          }

          .comment-type {
            background: #e0e0e0; padding: 2px 6px; border-radius: 12px;
            font-size: 0.75em; font-weight: bold; text-transform: uppercase;
          }

          .comment-type.suggestion { background: #ffe0b2; color: #f57c00; }
          .comment-type.comment { background: #e3f2fd; color: #1976d2; }

          .comment-text {
            margin: 8px 0; line-height: 1.4;
          }

          .selected-text {
            background: #f5f5f5; border: 1px solid #e0e0e0; border-radius: 3px;
            padding: 4px 6px; font-size: 0.85em; color: #666; margin-top: 8px;
            font-style: italic;
          }

          .comment-actions {
            display: flex; gap: 8px; margin-top: 8px;
          }

          .comment-btn {
            padding: 4px 8px; border: 1px solid #ddd; border-radius: 3px;
            background: #f8f8f8; cursor: pointer; font-size: 0.8em;
            transition: all 0.2s;
          }
          .comment-btn:hover { background: #e0e0e0; }
          .comment-btn.delete { border-color: #f44336; color: #f44336; }
          .comment-btn.delete:hover { background: #f44336; color: white; }

          .no-comments {
            text-align: center; color: #666; font-style: italic; padding: 20px;
          }

          .comments-toggle {
            position: fixed; top: 60px; right: 20px; z-index: 1500;
            padding: 8px 12px; background: #2196f3; color: white; border: none;
            border-radius: 4px; cursor: pointer; font-size: 0.9em;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
          }
          .comments-toggle:hover { background: #1976d2; }

          /* Responsive */
          @media (max-width: 1200px) {
            .comments-sidebar { width: 280px; }
          }

          @media (max-width: 768px) {
            body { flex-direction: column; height: auto; }
            .sidebar { width: 100%; height: auto; max-height: 40vh; }
            .main-content { height: auto; min-height: 60vh; }
            .comments-sidebar { 
              position: fixed; top: 0; right: -100%; width: 100%; height: 100vh;
              transition: right 0.3s ease-out; z-index: 2500;
            }
            .comments-sidebar.show { right: 0; }
            .connection-status { position: relative; margin-bottom: 10px; }
          }
          EOF

      # Step 11: Create Complete SPA JavaScript with Functional Review System
      - name: Create Complete SPA JavaScript with Functional Review System
        run: |
          cat > ./site/js/app.js << 'EOF'
          // Complete SPA Application with Functional Review System

          // DOM Elements
          const contentEl = document.getElementById('content');
          const contentTitleEl = document.getElementById('content-title');
          const navigationEl = document.getElementById('navigation');
          const searchInput = document.getElementById('searchInput');
          const searchButton = document.getElementById('searchButton');
          const searchResultsEl = document.getElementById('searchResults');
          const reviewToggleBtn = document.getElementById('reviewToggle');
          const startReviewBtn = document.getElementById('startReview');
          const clearReviewBtn = document.getElementById('clearReview');

          // State
          const getBasePath = () => {
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) return '/' + pathSegments[1];
            }
            return '';
          };

          window.currentPage = null;
          window.reviewMode = false;
          window.reviewData = {};
          window.currentSelection = null;
          window.comments = {};
          const basePath = getBasePath();
          let connectionStatus = 'connecting';

          function debug(message, data) {
            console.log(`[DITA-SPA] ${message}`, data || '');
          }

          // Connection Status Management
          function createConnectionStatus() {
            const statusEl = document.createElement('div');
            statusEl.id = 'connectionStatus';
            statusEl.className = 'connection-status connecting';
            statusEl.innerHTML = '🔄 Connecting...';
            statusEl.title = 'Click to test connection';
            statusEl.addEventListener('click', testConnection);
            document.body.appendChild(statusEl);
            return statusEl;
          }

          function updateConnectionStatus(connected, message) {
            let statusEl = document.getElementById('connectionStatus');
            if (!statusEl) {
              statusEl = createConnectionStatus();
            }
            
            if (connected) {
              statusEl.className = 'connection-status connected';
              statusEl.innerHTML = '🟢 Database Connected';
              statusEl.title = 'Database connection active - Click to refresh';
              connectionStatus = 'connected';
            } else {
              statusEl.className = 'connection-status disconnected';
              statusEl.innerHTML = '🔴 Database Offline';
              statusEl.title = 'Database connection failed - Click to retry';
              connectionStatus = 'disconnected';
            }
          }

          async function testConnection() {
            const statusEl = document.getElementById('connectionStatus');
            if (statusEl) {
              statusEl.className = 'connection-status connecting';
              statusEl.innerHTML = '🔄 Testing...';
            }
            
            try {
              const connected = await window.supabaseClient.testConnection();
              updateConnectionStatus(connected);
              if (connected) {
                await loadCommentsForCurrentPage();
              }
              return connected;
            } catch (error) {
              updateConnectionStatus(false);
              return false;
            }
          }

          // Comments Management
          function createCommentsSidebar() {
            const sidebar = document.createElement('div');
            sidebar.className = 'comments-sidebar';
            sidebar.id = 'commentsSidebar';
            sidebar.innerHTML = `
              <h3>Comments & Suggestions</h3>
              <div class="comments-list" id="commentsList">
                <div class="no-comments">No comments yet. Enable review mode and select text to add comments.</div>
              </div>
            `;
            document.body.appendChild(sidebar);
            
            // Create toggle button
            const toggleBtn = document.createElement('button');
            toggleBtn.className = 'comments-toggle';
            toggleBtn.id = 'commentsToggle';
            toggleBtn.innerHTML = '💬 Comments';
            toggleBtn.addEventListener('click', toggleCommentsSidebar);
            document.body.appendChild(toggleBtn);
            
            return sidebar;
          }

          function toggleCommentsSidebar() {
            const sidebar = document.getElementById('commentsSidebar');
            const toggleBtn = document.getElementById('commentsToggle');
            
            if (sidebar) {
              sidebar.classList.toggle('show');
              toggleBtn.innerHTML = sidebar.classList.contains('show') ? 
                '✕ Close' : '💬 Comments';
              
              if (sidebar.classList.contains('show')) {
                loadCommentsForCurrentPage();
              }
            }
          }

          async function loadCommentsForCurrentPage() {
            if (!window.currentPage || !window.supabaseClient) return;
            
            try {
              const comments = await window.supabaseClient.getComments(window.currentPage);
              window.comments[window.currentPage] = comments;
              displayComments(comments);
              highlightCommentsInContent(comments);
            } catch (error) {
              console.error('Failed to load comments:', error);
              displayComments([]);
            }
          }

          function displayComments(comments) {
            const commentsListEl = document.getElementById('commentsList');
            if (!commentsListEl) return;
            
            if (!comments || comments.length === 0) {
              commentsListEl.innerHTML = '<div class="no-comments">No comments for this page yet.</div>';
              return;
            }
            
            const commentsHtml = comments.map(comment => `
              <div class="comment-item ${comment.comment_type}" data-comment-id="${comment.id}">
                <div class="comment-header">
                  <span class="comment-type ${comment.comment_type}">${comment.comment_type}</span>
                  <span class="comment-date">${formatDate(comment.created_at)}</span>
                </div>
                <div class="comment-text">${escapeHtml(comment.comment_text)}</div>
                ${comment.selected_text ? `<div class="selected-text">"${escapeHtml(comment.selected_text)}"</div>` : ''}
                <div class="comment-actions">
                  <button class="comment-btn delete" onclick="deleteComment(${comment.id})">Delete</button>
                </div>
              </div>
            `).join('');
            
            commentsListEl.innerHTML = commentsHtml;
          }

          function highlightCommentsInContent(comments) {
            if (!comments || !window.reviewMode) return;
            
            // Clear existing highlights
            clearReviewHighlights();
            
            // Add highlights for each comment
            comments.forEach(comment => {
              if (comment.selected_text) {
                highlightTextInContent(comment.selected_text, comment);
              }
            });
          }

          function highlightTextInContent(selectedText, comment) {
            if (!selectedText || !contentEl) return;
            
            const walker = document.createTreeWalker(
              contentEl,
              NodeFilter.SHOW_TEXT,
              null,
              false
            );
            
            let node;
            while (node = walker.nextNode()) {
              const text = node.textContent;
              const index = text.indexOf(selectedText);
              
              if (index !== -1) {
                const parent = node.parentNode;
                const beforeText = text.substring(0, index);
                const afterText = text.substring(index + selectedText.length);
                
                // Create highlight span
                const span = document.createElement('span');
                span.className = comment.comment_type === 'suggestion' ? 
                  'review-suggestion-highlight' : 'review-comment-highlight';
                span.setAttribute('data-comment-id', comment.id);
                span.textContent = selectedText;
                span.addEventListener('click', () => showCommentDetails(comment));
                
                // Add tooltip
                const tooltip = document.createElement('div');
                tooltip.className = 'comment-tooltip';
                tooltip.textContent = comment.comment_text.substring(0, 50) + 
                  (comment.comment_text.length > 50 ? '...' : '');
                span.appendChild(tooltip);
                
                // Replace text node
                parent.removeChild(node);
                if (beforeText) parent.appendChild(document.createTextNode(beforeText));
                parent.appendChild(span);
                if (afterText) parent.appendChild(document.createTextNode(afterText));
                
                break;
              }
            }
          }

          function showCommentDetails(comment) {
            alert(`${comment.comment_type.toUpperCase()}: ${comment.comment_text}`);
          }

          async function deleteComment(commentId) {
            if (!confirm('Are you sure you want to delete this comment?')) return;
            
            try {
              await window.supabaseClient.deleteComment(commentId);
              await loadCommentsForCurrentPage();
            } catch (error) {
              alert('Failed to delete comment. Please try again.');
            }
          }

          // Initialize App
          function initApp() {
            debug('Initializing app with base path:', basePath);
            
            // Create UI elements
            createConnectionStatus();
            createCommentsSidebar();
            
            // Setup event listeners
            setupEventListeners();
            renderNavigation(navigationConfig);
            initReviewSystem();

            // Test connection and initialize
            testConnection().then(() => {
              const initialPageId = getPageIdFromUrl();
              if (initialPageId) {
                navigateToPage(initialPageId, false);
              } else {
                showWelcomeScreen();
              }
            });
          }

          // Event Listeners
          function setupEventListeners() {
            window.addEventListener('popstate', handlePopState);
            
            // Supabase event listeners
            window.addEventListener('supabaseConnectionChange', (e) => {
              updateConnectionStatus(e.detail.connected);
            });
            
            window.addEventListener('commentSaved', async (e) => {
              await loadCommentsForCurrentPage();
            });
            
            window.addEventListener('commentDeleted', async (e) => {
              await loadCommentsForCurrentPage();
            });
            
            window.addEventListener('allCommentsCleared', async (e) => {
              await loadCommentsForCurrentPage();
            });
            
            if (searchButton && searchInput) {
              searchButton.addEventListener('click', performSearch);
              searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') performSearch();
              });
            }

            if (reviewToggleBtn) reviewToggleBtn.addEventListener('click', toggleReviewMode);
            if (startReviewBtn) startReviewBtn.addEventListener('click', startReviewSession);
            if (clearReviewBtn) clearReviewBtn.addEventListener('click', promptClearReviewData);

            const printBtn = document.querySelector('.wh_print_link button');
            if (printBtn) {
              printBtn.addEventListener('click', (e) => {
                e.preventDefault();
                window.print();
              });
            }
          }

          // Review System Functions
          function initReviewSystem() {
            debug('Initializing review system');
            createCommentDialog();
            updateReviewButtons();
          }

          function createCommentDialog() {
            // Create overlay
            const overlay = document.createElement('div');
            overlay.className = 'dialog-overlay';
            overlay.id = 'dialogOverlay';
            overlay.addEventListener('click', closeCommentDialog);

            // Create dialog
            const dialog = document.createElement('div');
            dialog.className = 'comment-dialog';
            dialog.id = 'commentDialog';
            dialog.innerHTML = `
              <h3>Add Review Comment</h3>
              <div style="margin-bottom: 15px;">
                <label><input type="radio" name="commentType" value="comment" checked> 💬 Comment</label>
                <label style="margin-left: 15px;"><input type="radio" name="commentType" value="suggestion"> 💡 Suggestion</label>
              </div>
              <div style="margin: 15px 0;">
                <textarea id="commentText" placeholder="Enter your comment or suggestion..."></textarea>
              </div>
              <div class="dialog-actions">
                <button class="dialog-btn secondary" onclick="closeCommentDialog()">Cancel</button>
                <button class="dialog-btn primary" onclick="saveComment()">Save Comment</button>
              </div>
            `;

            document.body.appendChild(overlay);
            document.body.appendChild(dialog);
            debug('Comment dialog created');
          }

          function toggleReviewMode() {
            window.reviewMode = !window.reviewMode;
            
            if (window.reviewMode) {
              document.body.classList.add('review-mode');
              initializeReviewForContent();
              debug('Review mode activated');
              
              // Show comments sidebar
              const sidebar = document.getElementById('commentsSidebar');
              if (sidebar && !sidebar.classList.contains('show')) {
                toggleCommentsSidebar();
              }
            } else {
              document.body.classList.remove('review-mode');
              clearReviewHighlights();
              debug('Review mode deactivated');
            }
            
            updateReviewButtons();
          }

          function updateReviewButtons() {
            if (reviewToggleBtn) {
              reviewToggleBtn.textContent = window.reviewMode ? 'Exit Review' : 'Review Mode';
              reviewToggleBtn.classList.toggle('active', window.reviewMode);
            }
            
            const reviewControls = document.querySelectorAll('.review-btn:not(#reviewToggle)');
            reviewControls.forEach(btn => {
              btn.style.display = window.reviewMode ? 'block' : 'none';
            });
          }

          function initializeReviewForContent() {
            if (!window.reviewMode || !contentEl) return;
            
            // Make text elements selectable
            const textElements = contentEl.querySelectorAll('p, h1, h2, h3, h4, h5, h6, li, td, th, div');
            textElements.forEach(element => {
              if (element.children.length === 0 || element.textContent.trim()) {
                element.classList.add('reviewable-text');
                element.addEventListener('mouseup', handleTextSelection);
              }
            });
            
            // Load and highlight existing comments
            loadCommentsForCurrentPage();
            
            debug('Review initialization complete for content');
          }

          function handleTextSelection(event) {
            if (!window.reviewMode) return;
            
            const selection = window.getSelection();
            if (selection.toString().trim().length === 0) return;
            
            const selectedText = selection.toString().trim();
            if (selectedText.length < 3) return; // Minimum selection length
            
            debug('Text selected:', selectedText);
            
            window.currentSelection = {
              type: 'text',
              text: selectedText,
              element: event.target
            };
            
            showCommentDialog();
          }

          function showCommentDialog() {
            const dialog = document.getElementById('commentDialog');
            const overlay = document.getElementById('dialogOverlay');
            
            if (dialog && overlay) {
              dialog.classList.add('show');
              overlay.classList.add('show');
              
              // Pre-fill with selected text context
              const selectedText = window.currentSelection?.text || '';
              if (selectedText) {
                const textArea = document.getElementById('commentText');
                textArea.placeholder = `Comment on: "${selectedText.substring(0, 50)}${selectedText.length > 50 ? '...' : ''}"`;
              }
              
              document.getElementById('commentText').focus();
            }
          }

          function closeCommentDialog() {
            const dialog = document.getElementById('commentDialog');
            const overlay = document.getElementById('dialogOverlay');
            
            if (dialog && overlay) {
              dialog.classList.remove('show');
              overlay.classList.remove('show');
              document.getElementById('commentText').value = '';
              document.getElementById('commentText').placeholder = 'Enter your comment or suggestion...';
              
              // Reset radio buttons
              const commentRadio = document.querySelector('input[name="commentType"][value="comment"]');
              if (commentRadio) commentRadio.checked = true;
            }
            
            window.getSelection().removeAllRanges();
            window.currentSelection = null;
          }

          async function saveComment() {
            if (!window.currentSelection) {
              closeCommentDialog();
              return;
            }
            
            const commentText = document.getElementById('commentText').value.trim();
            const commentType = document.querySelector('input[name="commentType"]:checked').value;
            
            if (!commentText) {
              alert('Please enter a comment.');
              return;
            }
            
            if (!window.currentPage) {
              alert('Please select a document first.');
              return;
            }
            
            try {
              const commentData = {
                page_id: window.currentPage,
                comment_type: commentType,
                comment_text: commentText,
                selected_text: window.currentSelection.text,
                selection_type: 'text'
              };
              
              debug('Saving comment:', commentData);
              
              // Save to database
              const result = await window.supabaseClient.saveComment(commentData);
              debug('Comment saved successfully:', result);
              
              // Show success message
              const saveBtn = document.querySelector('.dialog-btn.primary');
              const originalText = saveBtn.textContent;
              saveBtn.textContent = '✓ Saved!';
              saveBtn.style.background = '#4caf50';
              
              setTimeout(() => {
                saveBtn.textContent = originalText;
                saveBtn.style.background = '';
                closeCommentDialog();
              }, 1000);
              
            } catch (error) {
              debug('Error saving comment:', error);
              alert('Failed to save comment. Please check your connection and try again.');
            }
          }

          function clearReviewHighlights() {
            const highlights = document.querySelectorAll('[data-comment-id]');
            highlights.forEach(highlight => {
              const parent = highlight.parentNode;
              if (parent) {
                parent.insertBefore(document.createTextNode(highlight.textContent), highlight);
                parent.removeChild(highlight);
              }
            });
          }

          function startReviewSession() {
            if (!window.currentPage) {
              alert('Please select a document to review first.');
              return;
            }
            
            if (!window.reviewMode) {
              toggleReviewMode();
            }
            
            alert(`Review session started for "${getPageTitle(window.currentPage)}". Select text to add comments.`);
          }

          function promptClearReviewData() {
            if (confirm('Are you sure you want to clear ALL review data? This cannot be undone.')) {
              clearReviewData();
            }
          }

          async function clearReviewData() {
            try {
              await window.supabaseClient.clearAllComments();
              clearReviewHighlights();
              alert('All review data has been cleared successfully.');
            } catch (error) {
              debug('Error clearing review data:', error);
              alert('Failed to clear review data. Please try again.');
            }
          }

          // Navigation Functions
          function renderNavigation(items, parentEl = navigationEl) {
            const ul = document.createElement('ul');
            ul.setAttribute('role', 'menu');

            items.forEach(item => {
              const li = document.createElement('li');
              li.setAttribute('role', 'presentation');

              if (item.children && item.children.length > 0) {
                li.classList.add('has-children');
                const toggle = document.createElement('span');
                toggle.className = 'toggle-arrow';
                toggle.addEventListener('click', (e) => {
                  e.stopPropagation();
                  li.classList.toggle('expanded');
                });
                li.appendChild(toggle);
              }

              const a = document.createElement('a');
              a.setAttribute('role', 'menuitem');
              a.textContent = item.title;
              a.setAttribute('data-id', item.id);
              a.href = `#${item.id}`;

              a.addEventListener('click', (e) => {
                e.preventDefault();
                if (item.children && item.children.length > 0) {
                  li.classList.toggle('expanded');
                }
                navigateToPage(item.id);
                if (searchResultsEl) searchResultsEl.innerHTML = '';
                if (searchInput) searchInput.value = '';
              });

              li.appendChild(a);
              if (item.children && item.children.length > 0) {
                renderNavigation(item.children, li);
              }
              ul.appendChild(li);
            });

            parentEl.appendChild(ul);
          }

          function navigateToPage(pageId, pushState = true) {
            debug('Navigating to page:', pageId);
            
            if (!pageId) {
              showErrorContent('undefined');
              return;
            }

            updateActiveNavItem(pageId);
            expandNavigationTo(pageId);

            if (pushState) {
              history.pushState({ pageId }, '', `#${pageId}`);
            }

            document.body.classList.add('loading');
            window.currentPage = pageId;

            loadContent(pageId)
              .then(content => {
                const title = getPageTitle(pageId);
                contentTitleEl.textContent = title;
                document.title = title;
                contentEl.innerHTML = content;
                
                if (window.reviewMode) {
                  setTimeout(() => {
                    initializeReviewForContent();
                  }, 100);
                } else {
                  // Load comments for display even if not in review mode
                  loadCommentsForCurrentPage();
                }
                
                document.body.classList.remove('loading');
                debug('Content loaded successfully for:', pageId);
              })
              .catch(error => {
                showErrorContent(pageId);
              });
          }

          async function loadContent(pageId) {
            const contentPath = `${basePath}/content/${pageId}.html`;
            debug('Fetching from URL:', contentPath);

            try {
              const response = await fetch(contentPath);
              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }
              return await response.text();
            } catch (error) {
              debug('Content fetch error:', error.message);
              throw error;
            }
          }

          function updateActiveNavItem(pageId) {
            const allNavItems = document.querySelectorAll('.sidebar a');
            allNavItems.forEach(item => item.classList.remove('active'));

            const activeItem = document.querySelector(`.sidebar a[data-id="${pageId}"]`);
            if (activeItem) {
              activeItem.classList.add('active');
              let parent = activeItem.parentElement;
              while (parent && !parent.classList.contains('sidebar')) {
                if (parent.classList.contains('has-children')) {
                  parent.classList.add('expanded');
                }
                parent = parent.parentElement;
              }
            }
          }

          function expandNavigationTo(pageId) {
            function findPageInNavigation(items, id, path = []) {
              for (let i = 0; i < items.length; i++) {
                const item = items[i];
                const currentPath = [...path, item];
                if (item.id === id) return currentPath;
                if (item.children && item.children.length > 0) {
                  const result = findPageInNavigation(item.children, id, currentPath);
                  if (result) return result;
                }
              }
              return null;
            }

            const path = findPageInNavigation(navigationConfig, pageId);
            if (!path) return;

            for (let i = 0; i < path.length - 1; i++) {
              const item = path[i];
              const li = document.querySelector(`.sidebar li a[data-id="${item.id}"]`).parentElement;
              li.classList.add('expanded');
            }
          }

          function handlePopState(event) {
            const pageId = event.state?.pageId || getPageIdFromUrl() || navigationConfig[0]?.id;
            debug('Popstate event, loading page:', pageId);
            navigateToPage(pageId, false);
          }

          function getPageIdFromUrl() {
            return window.location.hash.substring(1) || null;
          }

          function getPageTitle(pageId) {
            if (window.contentIdMap && contentIdMap[pageId]) {
              return contentIdMap[pageId].title;
            }

            function findTitleInNav(items, id) {
              for (const item of items) {
                if (item.id === id) return item.title;
                if (item.children && item.children.length > 0) {
                  const title = findTitleInNav(item.children, id);
                  if (title) return title;
                }
              }
              return null;
            }

            const navTitle = findTitleInNav(navigationConfig, pageId);
            if (navTitle) return navTitle;

            return pageId.split(/-|_/).map(word =>
              word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
          }

          function showErrorContent(pageId) {
            console.error('Failed to load content:', pageId);
            contentEl.innerHTML = `
              <div class="error">
                <h2>Content Not Found</h2>
                <p>The requested content "${pageId}" could not be loaded.</p>
                <p>Please select another topic from the navigation menu.</p>
              </div>
            `;
            document.body.classList.remove('loading');
          }

          function showWelcomeScreen() {
            contentTitleEl.textContent = 'Automotive Documentation';
            document.title = 'Automotive Documentation';
            contentEl.innerHTML = `
              <div class="welcome-screen">
                <h2>Welcome to Automotive Documentation</h2>
                <p>Select a topic from the navigation menu to begin.</p>
                <div style="margin-top: 30px; padding: 20px; background: #f0f8ff; border-radius: 8px; border-left: 4px solid #2196f3;">
                  <h3>🔧 Review System Features:</h3>
                  <ul style="text-align: left; margin-top: 15px;">
                    <li><strong>Review Mode:</strong> Click "Review Mode" to enable text commenting</li>
                    <li><strong>Text Selection:</strong> Select any text to add comments or suggestions</li>
                    <li><strong>Comments Panel:</strong> View all comments in the side panel</li>
                    <li><strong>Database Integration:</strong> All comments are saved to Supabase</li>
                    <li><strong>Real-time Updates:</strong> Comments sync across sessions</li>
                  </ul>
                </div>
                <div style="margin-top: 20px; font-size: 0.9em; color: #666;">
                  <p>Connection Status: Check the indicator in the upper-left corner</p>
                </div>
              </div>
            `;
            document.body.classList.remove('loading');
          }

          function performSearch() {
            const query = searchInput.value.toLowerCase().trim();
            searchResultsEl.innerHTML = '';

            if (query.length < 2) {
              if (query.length > 0) {
                searchResultsEl.innerHTML = '<li><p>Please enter at least 2 characters to search.</p></li>';
              }
              return;
            }

            debug('Performing search for:', query);
            const results = [];
            
            for (const id in contentIdMap) {
              if (contentIdMap.hasOwnProperty(id) && id !== 'default') {
                const item = contentIdMap[id];
                const title = item.title.toLowerCase();
                const content = item.content ? item.content.toLowerCase() : '';

                let snippet = '';
                let matchCount = 0;

                if (title.includes(query)) {
                  matchCount += 10;
                  snippet = `Found in title: "${highlightMatch(item.title, query)}"`;
                }

                const contentMatches = content.split(query).length - 1;
                if (contentMatches > 0) {
                  matchCount += contentMatches;
                  const matchIndex = content.indexOf(query);
                  const start = Math.max(0, matchIndex - 50);
                  const end = Math.min(content.length, matchIndex + query.length + 50);
                  const context = item.content.substring(start, end);
                  snippet += (snippet ? '<br>' : '') + `...${highlightMatch(context, query)}...`;
                }

                if (matchCount > 0) {
                  results.push({ id: id, title: item.title, snippet: snippet, score: matchCount });
                }
              }
            }

            results.sort((a, b) => b.score - a.score);

            if (results.length === 0) {
              searchResultsEl.innerHTML = '<li><p>No results found for your query.</p></li>';
            } else {
              results.forEach(result => {
                const li = document.createElement('li');
                const link = document.createElement('a');
                link.href = `#${result.id}`;
                link.textContent = result.title;
                link.addEventListener('click', (e) => {
                  e.preventDefault();
                  navigateToPage(result.id);
                  searchResultsEl.innerHTML = '';
                  searchInput.value = '';
                });
                
                li.appendChild(link);
                if (result.snippet) {
                  const p = document.createElement('p');
                  p.innerHTML = result.snippet;
                  li.appendChild(p);
                }
                searchResultsEl.appendChild(li);
              });
            }
          }

          function highlightMatch(text, query) {
            const regex = new RegExp(`(${query})`, 'gi');
            return text.replace(regex, '<span style="background: yellow;">$1</span>');
          }

          // Utility functions
          function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
          }

          function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
          }

          // Make functions globally available
          window.toggleReviewMode = toggleReviewMode;
          window.startReviewSession = startReviewSession;
          window.promptClearReviewData = promptClearReviewData;
          window.navigateToPage = navigateToPage;
          window.closeCommentDialog = closeCommentDialog;
          window.saveComment = saveComment;
          window.deleteComment = deleteComment;
          window.toggleCommentsSidebar = toggleCommentsSidebar;

          // Initialize when DOM is ready
          document.addEventListener('DOMContentLoaded', initApp);
          EOF

      # Step 12: Create default content with more realistic examples
      - name: Create Enhanced Default Content
        run: |
          mkdir -p ./site/content

          # Create sample content files with more realistic automotive content
          cat > ./site/content/getting-started-with-cars.html << 'EOF'
          <h1>Getting Started With Cars</h1>
          <p>Welcome to the comprehensive automotive guide. This section covers the basics of car ownership and maintenance that every driver should know.</p>
          
          <h2>Essential Knowledge for New Car Owners</h2>
          <p>Owning a car comes with responsibilities that extend beyond just driving. Understanding your vehicle's basic systems and maintenance requirements will help ensure safe, reliable transportation and can save you money in the long run.</p>
          
          <h3>Understanding Your Dashboard</h3>
          <p>Your dashboard contains crucial warning lights and gauges that communicate your vehicle's status. Learn to recognize the check engine light, oil pressure warning, battery indicator, and temperature gauge. These indicators can alert you to potential problems before they become major repairs.</p>
          
          <h3>Basic Maintenance Schedule</h3>
          <p>Regular maintenance is the key to vehicle longevity. Most manufacturers recommend oil changes every 3,000-7,500 miles depending on your vehicle and driving conditions. Additionally, consider the following maintenance items:</p>
          <ul>
            <li>Tire rotation and pressure checks every 5,000-7,500 miles</li>
            <li>Air filter replacement every 12,000-15,000 miles</li>
            <li>Brake inspection annually or every 12,000 miles</li>
            <li>Coolant system flush every 30,000 miles</li>
            <li>Transmission service every 60,000-100,000 miles</li>
          </ul>
          
          <h3>Emergency Preparedness</h3>
          <p>Every vehicle should be equipped with emergency supplies including jumper cables, a spare tire with proper tools, emergency flares or reflectors, and a first aid kit. Knowing how to change a tire and jump-start a battery can save you time and money in emergency situations.</p>
          
          <p>Remember: When in doubt, consult your owner's manual or a qualified automotive professional. Proper maintenance and care will keep your vehicle running safely for years to come.</p>
          EOF

          cat > ./site/content/car-types.html << 'EOF'
          <h1>Understanding Different Car Types</h1>
          <p>Choosing the right vehicle depends on your lifestyle, budget, and driving needs. Each car type offers distinct advantages and considerations.</p>
          
          <h2>Sedans</h2>
          <p>Sedans are traditional four-door passenger cars with a separate trunk compartment. They offer a good balance of comfort, fuel efficiency, and cargo space. Modern sedans typically seat five passengers and provide excellent highway fuel economy, often exceeding 30 MPG.</p>
          <p><strong>Best for:</strong> Daily commuting, families, business use</p>
          <p><strong>Considerations:</strong> Limited cargo space compared to SUVs, lower ground clearance</p>
          
          <h2>Sport Utility Vehicles (SUVs)</h2>
          <p>SUVs provide higher ground clearance, increased cargo capacity, and often all-wheel or four-wheel drive capability. They're built on truck platforms, offering superior towing capacity and off-road performance compared to sedans.</p>
          <p><strong>Best for:</strong> Families with active lifestyles, towing needs, adverse weather conditions</p>
          <p><strong>Considerations:</strong> Lower fuel economy, higher purchase price, increased maintenance costs</p>
          
          <h2>Hatchbacks</h2>
          <p>Hatchback vehicles feature a rear door that opens upward, providing direct access to the cargo area. This design maximizes interior space and cargo flexibility while maintaining a compact overall footprint.</p>
          <p><strong>Best for:</strong> Urban driving, parking in tight spaces, maximizing cargo versatility</p>
          <p><strong>Considerations:</strong> Road noise from cargo area, reduced rear privacy</p>
          
          <h2>Pickup Trucks</h2>
          <p>Pickup trucks combine passenger seating with an open cargo bed, offering unmatched utility for hauling materials, equipment, and recreational gear. Available in various sizes from compact to heavy-duty configurations.</p>
          <p><strong>Best for:</strong> Construction work, hauling cargo, recreational activities</p>
          <p><strong>Considerations:</strong> Poor fuel economy, challenging parking in urban areas</p>
          
          <h2>Electric Vehicles (EVs)</h2>
          <p>Electric vehicles use battery power instead of gasoline engines, offering zero direct emissions and significantly lower operating costs. Modern EVs provide competitive range and performance with rapidly expanding charging infrastructure.</p>
          <p><strong>Best for:</strong> Environmentally conscious drivers, urban commuting, reducing fuel costs</p>
          <p><strong>Considerations:</strong> Charging infrastructure limitations, higher initial purchase price</p>
          EOF

          cat > ./site/content/basic-maintenance.html << 'EOF'
          <h1>Essential Vehicle Maintenance</h1>
          <p>Regular maintenance is crucial for vehicle safety, reliability, and longevity. Following these guidelines will help prevent costly repairs and ensure your vehicle operates at peak efficiency.</p>
          
          <h2>Engine Oil and Filter Changes</h2>
          <p>Engine oil lubricates moving parts, reduces friction, and helps regulate engine temperature. Modern vehicles typically require oil changes every 5,000-7,500 miles, though severe driving conditions may require more frequent service.</p>
          
          <h3>Oil Change Intervals by Vehicle Type:</h3>
          <ul>
            <li><strong>Conventional Oil:</strong> Every 3,000-5,000 miles</li>
            <li><strong>High-Mileage Oil:</strong> Every 5,000-7,500 miles</li>
            <li><strong>Synthetic Blend:</strong> Every 5,000-7,500 miles</li>
            <li><strong>Full Synthetic:</strong> Every 7,500-10,000 miles</li>
          </ul>
          
          <p>Always replace the oil filter with each oil change to ensure maximum filtration efficiency and engine protection.</p>
          
          <h2>Tire Care and Maintenance</h2>
          <p>Proper tire maintenance improves fuel efficiency, extends tire life, and ensures safe handling. Check tire pressure monthly using a reliable gauge, as underinflated tires can reduce fuel economy by up to 3%.</p>
          
          <h3>Tire Maintenance Schedule:</h3>
          <ul>
            <li><strong>Pressure Check:</strong> Monthly, including spare tire</li>
            <li><strong>Tire Rotation:</strong> Every 6,000-8,000 miles</li>
            <li><strong>Wheel Alignment:</strong> Annually or when uneven wear is noticed</li>
            <li><strong>Tire Replacement:</strong> When tread depth reaches 2/32 inch</li>
          </ul>
          
          <h2>Brake System Inspection</h2>
          <p>Your braking system is critical for safety and should be inspected regularly. Warning signs include squealing noises, grinding sounds, vibration during braking, or a spongy brake pedal feel.</p>
          
          <h3>Brake Component Replacement Intervals:</h3>
          <ul>
            <li><strong>Brake Pads:</strong> Every 25,000-70,000 miles (varies by driving style)</li>
            <li><strong>Brake Rotors:</strong> Every 50,000-100,000 miles</li>
            <li><strong>Brake Fluid:</strong> Every 2-3 years or 24,000-36,000 miles</li>
            <li><strong>Brake Lines:</strong> Inspect annually for corrosion or damage</li>
          </ul>
          
          <h2>Cooling System Maintenance</h2>
          <p>The cooling system prevents engine overheating by circulating coolant through the engine and radiator. Regular maintenance prevents costly engine damage from overheating.</p>
          
          <p><strong>Coolant Replacement:</strong> Every 30,000-50,000 miles or as specified in your owner's manual. Use only the coolant type recommended by your vehicle manufacturer to prevent system damage.</p>
          
          <h2>Air Filter Replacement</h2>
          <p>A clean air filter ensures proper air flow to the engine, improving performance and fuel efficiency. A dirty filter can reduce acceleration and increase fuel consumption.</p>
          
          <p><strong>Replacement Schedule:</strong> Every 12,000-15,000 miles under normal conditions, or more frequently in dusty environments.</p>
          
          <h2>Professional Inspection Recommendations</h2>
          <p>While many maintenance tasks can be performed by vehicle owners, certain inspections and services require professional expertise:</p>
          <ul>
            <li>Annual comprehensive safety inspection</li>
            <li>Transmission service every 60,000-100,000 miles</li>
            <li>Timing belt replacement (if equipped) every 60,000-105,000 miles</li>
            <li>Spark plug replacement every 30,000-100,000 miles</li>
          </ul>
          
          <p><em>Always consult your owner's manual for manufacturer-specific maintenance schedules and requirements. Severe driving conditions may require more frequent service intervals.</em></p>
          EOF

          cat > ./site/content/safety-features.html << 'EOF'
          <h1>Modern Vehicle Safety Features</h1>
          <p>Today's vehicles incorporate advanced safety technologies designed to prevent accidents and protect occupants. Understanding these systems helps you make informed decisions and use them effectively.</p>
          
          <h2>Active Safety Systems</h2>
          <p>Active safety features work to prevent accidents before they occur by assisting the driver or taking corrective action.</p>
          
          <h3>Anti-lock Braking System (ABS)</h3>
          <p>ABS prevents wheel lockup during emergency braking, maintaining steering control and reducing stopping distances on most road surfaces. When activated, you may feel pulsing in the brake pedal – this is normal operation.</p>
          
          <h3>Electronic Stability Control (ESC)</h3>
          <p>ESC helps maintain vehicle control during extreme steering maneuvers by automatically applying brakes to individual wheels and reducing engine power when necessary. This system significantly reduces the risk of rollover accidents.</p>
          
          <h3>Adaptive Cruise Control</h3>
          <p>This advanced system maintains a set following distance from the vehicle ahead, automatically adjusting speed as traffic conditions change. Some systems can bring the vehicle to a complete stop in stop-and-go traffic.</p>
          
          <h2>Collision Avoidance Technologies</h2>
          <p>These systems use sensors and cameras to detect potential collisions and take preventive action.</p>
          
          <h3>Forward Collision Warning</h3>
          <p>Uses radar or cameras to monitor the road ahead and alerts drivers to potential front-end collisions. Advanced systems can automatically apply brakes if the driver doesn't respond to warnings.</p>
          
          <h3>Blind Spot Monitoring</h3>
          <p>Sensors detect vehicles in your blind spots and provide visual or audible warnings when you signal to change lanes. Some systems include rear cross-traffic alerts for backing out of parking spaces.</p>
          
          <h2>Passive Safety Features</h2>
          <p>Passive safety systems protect occupants when an accident occurs.</p>
          
          <h3>Airbag Systems</h3>
          <p>Modern vehicles have multiple airbags including front, side, and curtain airbags. These systems work in conjunction with seat belts to reduce injury severity. Never place rear-facing child seats in front of active airbags.</p>
          
          <h3>Crumple Zones</h3>
          <p>Vehicle structures are designed with crumple zones that absorb impact energy during collisions, protecting the passenger compartment. This is why modern vehicles may look more damaged in minor accidents compared to older cars.</p>
          
          <p><strong>Remember:</strong> Safety features are designed to assist, not replace, attentive driving. Always remain focused on the road and maintain safe following distances.</p>
          EOF

      # Step 13: Create Enhanced Index HTML with Database Setup Instructions
      - name: Create Enhanced Index HTML
        run: |
          cat > ./site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">

            <!-- Database Setup Instructions -->
            <!--
            SUPABASE DATABASE SETUP REQUIRED:
            
            1. Go to your Supabase Dashboard: https://supabase.com/dashboard
            2. Navigate to the SQL Editor
            3. Run this SQL to create the comments table:
            
            CREATE TABLE IF NOT EXISTS comments (
              id SERIAL PRIMARY KEY,
              page_id TEXT NOT NULL,
              comment_type TEXT NOT NULL DEFAULT 'comment',
              comment_text TEXT NOT NULL,
              selected_text TEXT,
              selection_type TEXT DEFAULT 'text',
              session_id TEXT,
              user_agent TEXT,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            );
            
            -- Enable Row Level Security
            ALTER TABLE comments ENABLE ROW LEVEL SECURITY;
            
            -- Create policy to allow all operations
            CREATE POLICY "Allow all operations on comments" ON comments
            FOR ALL USING (true) WITH CHECK (true);
            
            4. After running the SQL, your comment system will be fully functional!
            -->

            <script>
              if (location.hostname.includes('github.io')) {
                const pathSegments = location.pathname.split('/');
                if (pathSegments.length > 1) {
                  const basePath = '/' + pathSegments[1];
                  document.write('<base href="' + basePath + '/">');
                }
              }
            </script>

            <title>Automotive Documentation - Advanced Review System</title>
            <link rel="stylesheet" href="css/style.css">
            <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>🚗</text></svg>">
          </head>
          <body>
            <div class="sidebar">
              <div class="sidebar-header">
                <h2>📚 Navigation</h2>
                <div class="search-container">
                  <input type="text" id="searchInput" placeholder="Search documentation...">
                  <button id="searchButton">🔍</button>
                </div>
                <ul id="searchResults" class="search-results"></ul>
              </div>
              
              <div class="review-controls">
                <h3>💬 Review System</h3>
                <div class="review-mode-toggle">
                  <button id="reviewToggle" class="review-btn">📝 Review Mode</button>
                </div>
                <button id="startReview" class="review-btn secondary">🚀 Start Review</button>
                <button id="clearReview" class="review-btn danger">🗑️ Clear All</button>
              </div>
              
              <div class="sidebar-nav">
                <div id="navigation"></div>
              </div>
            </div>

            <div class="main-content">
              <h1 id="content-title">Loading...</h1>
              <div id="loading" style="display:none;">Loading content...</div>
              <div id="content">
                <div class="initial-loading">
                  <p>🔄 Initializing enhanced documentation viewer with review system...</p>
                </div>
              </div>
            </div>

            <div class="wh_print_link" style="position: fixed; top: 15px; right: 15px; z-index: 999;">
              <button title="Print current page" style="padding: 8px 12px; background: #f0f0f0; border: 1px solid #ccc; border-radius: 4px; cursor: pointer;">🖨️ Print</button>
            </div>

            <script src="js/supabase-config.js"></script>
            <script src="js/navigation-config.js"></script>
            <script src="js/content-id-map.js"></script>
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF

      # Step 14: Create 404.html
      - name: Create 404 Page
        run: |
          cat > ./site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redirecting...</title>
            <script>
              sessionStorage.redirect = location.href;
              function getBasePath() {
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) return '/' + pathSegments[1];
                }
                return '';
              }
              const basePath = getBasePath();
              window.location.href = basePath + '/';
            </script>
          </head>
          <body>
            <div style="text-align: center; font-family: Arial, sans-serif; margin-top: 100px;">
              <h1>🔄 Redirecting...</h1>
              <p>If you are not redirected automatically, <a href="/">click here</a>.</p>
            </div>
          </body>
          </html>
          EOF

      # Step 15: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true

    env:
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}