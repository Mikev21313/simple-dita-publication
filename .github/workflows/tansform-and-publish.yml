name: DITA to SPA Transformation with Collapsible Navigation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 1: Checkout repository 
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install DITA-OT
      - name: Set up DITA-OT
        run: |
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # NEW STEP: Create XSLT for DITAMAP to Navigation JSON conversion
      - name: Create DITAMAP to Navigation XSLT
        run: |
          cat > ditamap-to-nav.xsl << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <xsl:stylesheet version="2.0"
            xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            
            <xsl:output method="text" encoding="UTF-8" indent="no"/>
            
            <!-- Main template -->
            <xsl:template match="/">
              <xsl:text>const navigationConfig = </xsl:text>
              <xsl:apply-templates select="//map" mode="json"/>
              <xsl:text>;</xsl:text>
            </xsl:template>
            
            <!-- Process map element to JSON array -->
            <xsl:template match="map" mode="json">
              <xsl:text>[</xsl:text>
              <xsl:apply-templates select="topicref" mode="json"/>
              <xsl:text>]</xsl:text>
            </xsl:template>
            
            <!-- Process topicref elements to JSON objects -->
            <xsl:template match="topicref" mode="json">
              <xsl:text>{</xsl:text>
              
              <!-- Get the ID from the href attribute, without extension -->
              <xsl:variable name="href">
                <xsl:value-of select="@href"/>
              </xsl:variable>
              <xsl:variable name="base-id">
                <xsl:choose>
                  <xsl:when test="contains($href, '.')">
                    <xsl:value-of select="substring-before($href, '.')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$href"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              
              <!-- Convert underscores to hyphens for the ID -->
              <xsl:variable name="id">
                <xsl:choose>
                  <xsl:when test="$base-id != ''">
                    <xsl:value-of select="translate($base-id, '_', '-')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="translate(@id, '_', '-')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              
              <!-- Output the id property -->
              <xsl:text>"id": "</xsl:text>
              <xsl:value-of select="$id"/>
              <xsl:text>",</xsl:text>
              
              <!-- Output the title property -->
              <xsl:text>"title": "</xsl:text>
              <xsl:choose>
                <xsl:when test="@navtitle">
                  <xsl:value-of select="@navtitle"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="translate(substring($id, 1, 1), 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/>
                  <xsl:value-of select="substring($id, 2)"/>
                  <xsl:text></xsl:text>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:text>"</xsl:text>
              
              <!-- Process child topicrefs if present -->
              <xsl:if test="topicref">
                <xsl:text>,</xsl:text>
                <xsl:text>"children": [</xsl:text>
                <xsl:apply-templates select="topicref" mode="json"/>
                <xsl:text>]</xsl:text>
              </xsl:if>
              
              <xsl:text>}</xsl:text>
              
              <!-- Add comma if not the last item -->
              <xsl:if test="position() != last()">
                <xsl:text>,</xsl:text>
              </xsl:if>
            </xsl:template>
            
          </xsl:stylesheet>
          EOF
          echo "Created XSLT for DITAMAP to navigation conversion"

      # Step 4: Transform DITA to HTML and Extract Navigation
      - name: Transform DITA to HTML and Extract Navigation
        run: |
          # Using HTML5 format with parameters for better output
          ./dita-ot-4.0.2/bin/dita --input=dita-source/automotive.ditamap --format=html5 --output=./site
          echo "DITA transformation complete"
          
          # Create content directory for SPA fragments
          mkdir -p ./site/content
          
          # Extract navigation structure from DITAMAP using XSLT
          echo "Extracting navigation structure from DITAMAP"
          cp dita-source/automotive.ditamap ./automotive.ditamap
          
          # Use XSLT to generate navigation JSON
          ./dita-ot-4.0.2/bin/dita --input=./automotive.ditamap --format=xslt --xslt=./ditamap-to-nav.xsl --output=./site/js/navigation-config.js
          
          # Create a backup of the generated navigation for debugging
          cp ./site/js/navigation-config.js ./site/js/navigation-config.js.generated
          
          # List files to check output
          echo "Generated files:"
          find ./site -type f | sort
          
          # Print the navigation structure for debugging
          echo "Generated navigation structure:"
          cat ./site/js/navigation-config.js

      # Step 5: Process HTML files into content fragments (same as before)
      - name: Process HTML Content
        run: |
          # Process each HTML file to extract content
          for file in ./site/*.html; do
            # Skip processing if this is the index.html we'll create later
            if [[ "$file" == "./site/index.html" ]]; then
              continue
            fi
            
            filename=$(basename "$file")
            id="${filename%.html}"
            echo "Processing $filename (ID: $id)"
            
            # Extract content from file 
            content=$(sed -n '/<body/,/<\/body>/p' "$file" | 
                     sed '/<body/d;/<\/body>/d' | 
                     sed '/<header/,/<\/header>/d' | 
                     sed '/<nav/,/<\/nav>/d' | 
                     sed '/<footer/,/<\/footer>/d')
            
            # Get title from the original file
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '_' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi
            
            # Create content file with underscores converted to hyphens
            hyphenated_id=$(echo "$id" | tr '_' '-')
            echo "$content" > "./site/content/$hyphenated_id.html"
            echo "Created content: $id.html â†’ $hyphenated_id.html"
            
            # Add to the content manifest
            echo "  \"$hyphenated_id\": { \"title\": \"$title\" }," >> ./site/content-list.tmp
          done

      # Step 6: Create content manifest (modified to use hyphenated IDs)
      - name: Create Content Manifest
        run: |
          mkdir -p ./site/js ./site/css
          
          # Create content manifest from processed content
          echo "// Content manifest - maps IDs to content files" > ./site/js/content-manifest.js
          echo "const contentManifest = {" >> ./site/js/content-manifest.js
          
          # Add entries from our temp file if it exists
          if [ -f "./site/content-list.tmp" ]; then
            cat ./site/content-list.tmp >> ./site/js/content-manifest.js
          fi
          
          # Close the manifest
          echo "  \"default\": { \"title\": \"Automotive Documentation\" }" >> ./site/js/content-manifest.js
          echo "};" >> ./site/js/content-manifest.js
          
          # Clean up temp file
          rm -f ./site/content-list.tmp

      # Step 7: Create SPA CSS (same as before)
      - name: Create SPA CSS
        run: |
          cat > ./site/css/style.css << 'EOF'
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            display: flex;
            height: 100vh;
            width: 100%;
            overflow: hidden;
          }
          
          .sidebar {
            width: 250px;
            background-color: #f5f5f5;
            padding: 20px;
            height: 100vh;
            overflow-y: auto;
            border-right: 1px solid #ddd;
          }
          
          .main-content {
            flex: 1;
            padding: 20px;
            height: 100vh;
            overflow-y: auto;
          }
          
          .sidebar h2 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
          }
          
          /* Improved navigation styling for hierarchy */
          .sidebar ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 5px;
          }
          
          .sidebar ul ul {
            padding-left: 20px;
            margin-top: 5px;
            margin-bottom: 0;
          }
          
          .sidebar li {
            margin-bottom: 5px;
            position: relative;
          }
          
          /* Toggle arrow styling */
          .sidebar .toggle-arrow {
            display: inline-block;
            width: 16px;
            height: 16px;
            position: absolute;
            left: 0;
            top: 5px;
            cursor: pointer;
            z-index: 10;
          }
          
          .sidebar .toggle-arrow:before {
            content: "â–¶";
            display: inline-block;
            font-size: 10px;
            transition: transform 0.2s;
          }
          
          .sidebar li.expanded > .toggle-arrow:before {
            transform: rotate(90deg);
          }
          
          .sidebar li.has-children > ul {
            display: none;
          }
          
          .sidebar li.has-children.expanded > ul {
            display: block;
          }
          
          .sidebar a {
            color: #2c3e50;
            text-decoration: none;
            display: block;
            padding: 5px 5px 5px 20px; /* Add left padding for arrow */
            border-radius: 4px;
            transition: background-color 0.2s;
            cursor: pointer;
          }
          
          .sidebar a:hover {
            background-color: #e0e0e0;
          }
          
          .sidebar a.active {
            background-color: #dbeafe;
            font-weight: bold;
          }
          
          /* Content styling */
          .main-content h1, .main-content h2, .main-content h3 {
            margin-top: 1em;
            margin-bottom: 0.5em;
          }
          
          .main-content p {
            margin-bottom: 1em;
          }
          
          .main-content img {
            max-width: 100%;
            height: auto;
          }
          
          /* Fix for duplicate headings */
          .main-content h1:first-child + h1 {
            display: none;
          }
          
          /* Loading state */
          #loading {
            display: none;
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
          }
          
          .loading #loading {
            display: block;
          }
          
          /* Error state */
          .error {
            background-color: #fff8f8;
            border-left: 4px solid #e74c3c;
            padding: 15px;
            margin-bottom: 20px;
            color: #333;
          }
          
          .error h2 {
            color: #e74c3c;
            margin-top: 0;
          }
          
          /* Responsive design for mobile */
          @media (max-width: 768px) {
            body {
              flex-direction: column;
              height: auto;
            }
            
            .sidebar {
              width: 100%;
              height: auto;
              max-height: 40vh;
            }
            
            .main-content {
              height: auto;
              min-height: 60vh;
            }
          }
          EOF

      # Step 8: Create SPA JavaScript Application (same as before)
      - name: Create SPA Application
        run: |
          cat > ./site/js/app.js << 'EOF'
          // SPA Application with collapsible section headers
          
          // DOM Elements
          const contentEl = document.getElementById('content');
          const contentTitleEl = document.getElementById('content-title');
          const navigationEl = document.getElementById('navigation');
          
          // Base path handling for GitHub Pages
          const getBasePath = () => {
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) {
                return '/' + pathSegments[1];
              }
            }
            return '';
          };
          
          // Current state
          let currentPage = null;
          const basePath = getBasePath();
          
          // Debug logging function
          function debug(message, data) {
            console.log(`[DITA-SPA] ${message}`, data || '');
          }
          
          // Initialize the application
          function initApp() {
            debug('Initializing app with base path:', basePath);
            
            // Render navigation
            renderNavigation(navigationConfig);
            
            // Set up event listeners
            window.addEventListener('popstate', handlePopState);
            
            // Load initial page based on URL or default
            const initialPageId = getPageIdFromUrl() || (navigationConfig[0]?.id || 'default');
            debug('Initial page ID:', initialPageId);
            navigateToPage(initialPageId, false);
          }
          
          // Render the navigation menu with hierarchy
          function renderNavigation(items, parentEl = navigationEl) {
            const ul = document.createElement('ul');
            
            items.forEach(item => {
              const li = document.createElement('li');
              
              // Add class if item has children
              if (item.children && item.children.length > 0) {
                li.classList.add('has-children');
                
                // Create a toggle arrow element
                const toggle = document.createElement('span');
                toggle.className = 'toggle-arrow';
                toggle.addEventListener('click', (e) => {
                  e.stopPropagation();
                  li.classList.toggle('expanded');
                });
                li.appendChild(toggle);
              }
              
              const a = document.createElement('a');
              a.textContent = item.title;
              a.setAttribute('data-id', item.id);
              a.href = `#${item.id}`;
              
              // IMPORTANT CHANGE: Modified click handler for section titles
              a.addEventListener('click', (e) => {
                e.preventDefault();
                
                // If this is a parent item with children, toggle expansion
                if (item.children && item.children.length > 0) {
                  li.classList.toggle('expanded');
                }
                
                // Always navigate to the page
                navigateToPage(item.id);
              });
              
              li.appendChild(a);
              
              // Recursively render children if any
              if (item.children && item.children.length > 0) {
                renderNavigation(item.children, li);
              }
              
              ul.appendChild(li);
            });
            
            parentEl.appendChild(ul);
          }
          
          // Expand navigation path to the current page
          function expandNavigationTo(pageId) {
            // Helper to search for a page in the navigation tree
            function findPageInNavigation(items, id, path = []) {
              for (let i = 0; i < items.length; i++) {
                const item = items[i];
                const currentPath = [...path, item];
                
                if (item.id === id) {
                  return currentPath;
                }
                
                if (item.children && item.children.length > 0) {
                  const result = findPageInNavigation(item.children, id, currentPath);
                  if (result) {
                    return result;
                  }
                }
              }
              
              return null;
            }
            
            // Find the path to the page
            const path = findPageInNavigation(navigationConfig, pageId);
            if (!path) return;
            
            // Expand all parent items in the path
            for (let i = 0; i < path.length - 1; i++) {
              const item = path[i];
              const li = document.querySelector(`.sidebar li a[data-id="${item.id}"]`).parentElement;
              li.classList.add('expanded');
            }
          }
          
          // Navigate to a specific page
          function navigateToPage(pageId, pushState = true) {
            debug('Navigating to page:', pageId);
            
            // Update active state in navigation
            updateActiveNavItem(pageId);
            
            // Expand navigation to show the current page
            expandNavigationTo(pageId);
            
            // Update the URL
            if (pushState) {
              history.pushState({ pageId }, '', `#${pageId}`);
            }
            
            // Show loading indicator
            document.body.classList.add('loading');
            
            // Update current page
            currentPage = pageId;
            
            // Load content
            loadContent(pageId)
              .then(content => {
                // Update title
                const title = getPageTitle(pageId);
                contentTitleEl.textContent = title;
                document.title = title;
                
                // Fix for duplicate headings
                if (content.includes(`<h1>${title}</h1>`)) {
                  content = content.replace(`<h1>${title}</h1>`, '');
                }
                
                // Update content
                contentEl.innerHTML = content;
                
                // Hide loading indicator
                document.body.classList.remove('loading');
                debug('Content loaded successfully');
              })
              .catch(error => {
                debug('Error loading content:', error.message);
                
                // Try alternate ID if exists
                const altPageId = pageId.includes('-') ? pageId.replace(/-/g, '_') : pageId.replace(/_/g, '-');
                loadContent(altPageId)
                  .then(content => {
                    contentTitleEl.textContent = getPageTitle(pageId);
                    document.title = getPageTitle(pageId);
                    contentEl.innerHTML = content;
                    document.body.classList.remove('loading');
                    debug('Content loaded from alternate ID');
                  })
                  .catch(altError => {
                    console.error('Failed to load content:', altError);
                    contentEl.innerHTML = `
                      <div class="error">
                        <h2>Content Not Found</h2>
                        <p>The requested content "${pageId}" could not be loaded.</p>
                        <p>Please select another topic from the navigation menu.</p>
                      </div>
                    `;
                    document.body.classList.remove('loading');
                  });
              });
          }
          
          // Load content for a page
          async function loadContent(pageId) {
            const contentPath = `${basePath}/content/${pageId}.html`;
            debug('Fetching from URL:', contentPath);
            
            const response = await fetch(contentPath);
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return await response.text();
          }
          
          // Update active state in navigation
          function updateActiveNavItem(pageId) {
            // Remove active class from all nav items
            const allNavItems = document.querySelectorAll('.sidebar a');
            allNavItems.forEach(item => item.classList.remove('active'));
            
            // Add active class to current page nav item
            const activeItem = document.querySelector(`.sidebar a[data-id="${pageId}"]`);
            if (activeItem) {
              activeItem.classList.add('active');
              
              // Make sure the parents are expanded
              let parent = activeItem.parentElement;
              while (parent && !parent.classList.contains('sidebar')) {
                if (parent.classList.contains('has-children')) {
                  parent.classList.add('expanded');
                }
                parent = parent.parentElement;
              }
            }
          }
          
          // Handle popstate event (browser back/forward)
          function handlePopState(event) {
            const pageId = event.state?.pageId || getPageIdFromUrl() || (navigationConfig[0]?.id || 'default');
            debug('Popstate event, loading page:', pageId);
            navigateToPage(pageId, false);
          }
          
          // Get page ID from URL hash
          function getPageIdFromUrl() {
            return window.location.hash.substring(1) || null;
          }
          
          // Get page title from content manifest
          function getPageTitle(pageId) {
            if (contentManifest[pageId]) {
              return contentManifest[pageId].title;
            }
            
            // Try to find the title in the navigation
            let title = findTitleInNavigation(navigationConfig, pageId);
            if (title) {
              return title;
            }
            
            // Generate a title from the ID as fallback
            return pageId.split(/-|_/).map(word => 
              word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
          }
          
          // Find a title in the navigation structure
          function findTitleInNavigation(items, id) {
            for (let i = 0; i < items.length; i++) {
              const item = items[i];
              
              if (item.id === id) {
                return item.title;
              }
              
              if (item.children && item.children.length > 0) {
                const title = findTitleInNavigation(item.children, id);
                if (title) {
                  return title;
                }
              }
            }
            
            return null;
          }
          
          // Initialize the app when DOM is ready
          document.addEventListener('DOMContentLoaded', initApp);
          EOF

      # Step 9 & 10: Create index.html and 404.html (same as before)
      - name: Create Index and 404 HTML
        run: |
          cat > ./site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
            <meta http-equiv="Pragma" content="no-cache">
            <meta http-equiv="Expires" content="0">
            
            <!-- Base path handling for GitHub Pages -->
            <script>
              // Dynamically set the base href based on deployment environment
              (function() {
                // For GitHub Pages repository sites
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    const basePath = '/' + pathSegments[1];
                    document.write('<base href="' + basePath + '/">');
                    console.log('Base path set to:', basePath);
                  }
                }
              })();
            </script>
            
            <title>Automotive Documentation</title>
            <link rel="stylesheet" href="css/style.css">
          </head>
          <body>
            <div class="sidebar">
              <h2>Navigation</h2>
              <div id="navigation"></div>
            </div>
            <div class="main-content">
              <h1 id="content-title">Loading...</h1>
              <div id="loading">Loading content...</div>
              <div id="content">
                <!-- Content will load here -->
                <div class="initial-loading">
                  <p>Initializing documentation viewer...</p>
                </div>
              </div>
            </div>
            
            <!-- Load JavaScript files -->
            <script src="js/navigation-config.js"></script>
            <script src="js/content-manifest.js"></script>
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF
          
          cat > ./site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redirecting...</title>
            <script>
              // Store the requested URL for processing after redirect
              sessionStorage.redirect = location.href;
              
              // Dynamically determine the correct base path
              function getBasePath() {
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    return '/' + pathSegments[1];
                  }
                }
                return '';
              }
              
              // Redirect to the main site with the correct base path
              const basePath = getBasePath();
              window.location.href = basePath + '/';
            </script>
          </head>
          <body>
            <div style="text-align: center; font-family: Arial, sans-serif; margin-top: 100px;">
              <h1>Redirecting to documentation...</h1>
              <p>If you are not redirected automatically, <a href="/">click here</a>.</p>
            </div>
          </body>
          </html>
          EOF

      # Step 11: Create placeholder content for navigation parent nodes
      - name: Create Default Content
        run: |
          # Create placeholder content for parent nodes that may not have actual content
          mkdir -p ./site/content
          
          # Find all IDs in navigation-config.js 
          echo "Ensuring all navigation items have content..."
          
          # Use grep to extract IDs from the navigation config
          nav_ids=$(grep -o '"id": "[^"]*"' ./site/js/navigation-config.js | sed 's/"id": "\([^"]*\)"/\1/')
          
          # Process each ID
          for id in $nav_ids; do
            if [ ! -f "./site/content/$id.html" ]; then
              echo "Creating placeholder for $id"
              
              # Convert ID to title
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
              
              # Create placeholder content file
              cat > "./site/content/$id.html" << EOF
          <h1>${title}</h1>
          <p>Information about ${title}.</p>
          <p>Please use the navigation menu to explore subtopics.</p>
          EOF
            fi
          done

      # Step 12: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true