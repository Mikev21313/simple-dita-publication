name: DITA to SPA Production System

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install DITA-OT and required tools
      - name: Set up DITA-OT and XML tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils xsltproc postgresql-client curl jq

          # Install DITA-OT
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # Step 4: DITA Processing
      - name: Process DITA Files
        run: |
          echo "🔄 Processing DITA transformation..."
          
          # Run DITA transformation
          if [ -f "dita-source/automotive.ditamap" ]; then
            ./dita-ot-4.0.2/bin/dita --input=dita-source/automotive.ditamap --format=html5 --output=./site --debug
            echo "✅ DITA transformation completed"
          else
            echo "❌ DITAMAP not found"
            exit 1
          fi
          
          # Create necessary directories
          mkdir -p ./site/content ./site/images ./site/js ./site/css ./site/archives ./site/review

      # Step 5: Extract Navigation Structure
      - name: Extract Navigation Structure
        run: |
          echo "📖 Extracting navigation structure..."

          cat > extract-nav.xsl << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            <xsl:output method="text"/>
            <xsl:template match="/">
              [<xsl:apply-templates select="//topicref[not(ancestor::topicref)]"/>]
            </xsl:template>
            <xsl:template match="topicref">
              <xsl:variable name="href" select="@href"/>
              <xsl:variable name="filename">
                <xsl:choose>
                  <xsl:when test="contains($href, '/')">
                    <xsl:value-of select="substring-after(substring-before($href, '.'), '/')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="substring-before($href, '.')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:variable name="id">
                <xsl:choose>
                  <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                  <xsl:otherwise><xsl:value-of select="translate($filename, '_', '-')"/></xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:variable name="title">
                <xsl:choose>
                  <xsl:when test="@navtitle"><xsl:value-of select="@navtitle"/></xsl:when>
                  <xsl:when test="topicmeta/navtitle"><xsl:value-of select="topicmeta/navtitle"/></xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="translate(translate($id, '-', ' '), '_', ' ')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              {
                "id": "<xsl:value-of select="$id"/>",
                "title": "<xsl:value-of select="$title"/>",
                "filename": "<xsl:value-of select="$filename"/>",
                "href": "<xsl:value-of select="$href"/>"
                <xsl:if test="topicref">
                  ,"children": [<xsl:apply-templates select="topicref"/>]
                </xsl:if>
              }<xsl:if test="following-sibling::topicref">,</xsl:if>
            </xsl:template>
          </xsl:stylesheet>
          EOF

          xsltproc extract-nav.xsl dita-source/automotive.ditamap > navigation-structure.json || echo '[]' > navigation-structure.json
          sed -i 's/\\n//g; s/\\t//g; s/  */ /g' navigation-structure.json

      # Step 6: Process HTML Content for SPA
      - name: Process HTML Content for SPA
        run: |
          echo "🔄 Processing HTML content for SPA..."
          
          find ./site -type f -name "*.html" 2>/dev/null | grep -v "index.html" | grep -v "404.html" | grep -v "review.html" | while read file; do
            if [[ "$file" == "./site/index.html" ]]; then continue; fi

            filename=$(basename "$file")
            id="${filename%.html}"
            hyphenated_id="${id//_/-}"

            echo "📄 Processing: $file -> $id"

            # Extract content between body tags, remove header/nav/footer
            content=$(sed -n '/<body/,/<\/body>/p' "$file" 2>/dev/null | sed '/<body/d;/<\/body>/d' | sed '/<header/,/<\/header>/d' | sed '/<nav/,/<\/nav>/d' | sed '/<footer/,/<\/footer>/d')
            
            # Fix image paths
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="[^"]*\/([^\/"]*)\.([a-zA-Z0-9]+)"/<img\1src="images\/\2.\3"/gi')
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="([^\/:"]*)\.(jpg|jpeg|png|gif|svg)"/<img\1src="images\/\2.\3"/gi')

            # Create content files
            echo "$content" > "./site/content/$id.html"
            if [[ "$id" != "$hyphenated_id" ]]; then
              echo "$content" > "./site/content/$hyphenated_id.html"
            fi
          done

      # Step 7: Create Supabase Configuration
      - name: Create Supabase Configuration
        run: |
          cat > ./site/js/supabase-config.js << 'EOF'
          // Supabase Configuration
          const SUPABASE_URL = 'https://placeholder.supabase.co';
          const SUPABASE_ANON_KEY = 'placeholder-key';

          // Mock Supabase for demo purposes
          window.supabase = {
            from: function(table) {
              return {
                select: function() {
                  return {
                    eq: function() {
                      return Promise.resolve({ data: [], error: null });
                    },
                    order: function() {
                      return Promise.resolve({ data: [], error: null });
                    }
                  };
                },
                insert: function() {
                  return Promise.resolve({ data: null, error: null });
                },
                delete: function() {
                  return {
                    eq: function() {
                      return Promise.resolve({ data: null, error: null });
                    }
                  };
                }
              };
            }
          };

          console.log('[Supabase] Mock configuration loaded');
          EOF

      # Step 8: Create Navigation Configuration
      - name: Create Navigation Configuration
        run: |
          echo "const navigationData = " > ./site/js/navigation-config.js
          cat navigation-structure.json >> ./site/js/navigation-config.js
          echo ";" >> ./site/js/navigation-config.js

      # Step 9: Create Content ID Mapping
      - name: Create Content ID Mapping
        run: |
          echo "📋 Creating content ID mapping..."
          
          cat > ./site/js/content-id-map.js << 'EOF'
          const contentIdMap = {};
          
          // Auto-populate from navigation data
          if (typeof navigationData !== 'undefined') {
            function mapNavigationIds(items, parentPath = '') {
              items.forEach(item => {
                const fullPath = parentPath ? `${parentPath}/${item.id}` : item.id;
                contentIdMap[item.id] = item.id;
                contentIdMap[item.filename] = item.id;
                
                if (item.children) {
                  mapNavigationIds(item.children, fullPath);
                }
              });
            }
            
            mapNavigationIds(navigationData);
          }
          
          console.log('[Content-ID-Map] Mapping generated:', contentIdMap);
          EOF

      # Step 10: Create Production CSS
      - name: Create Production CSS
        run: |
          cat > ./site/css/style.css << 'EOF'
          /* Production DITA SPA Styles */
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            background: #fafafa;
          }

          .container {
            display: flex;
            min-height: 100vh;
          }

          /* Sidebar Styles */
          .sidebar {
            width: 280px;
            background: #fff;
            border-right: 1px solid #e0e0e0;
            padding: 20px;
            overflow-y: auto;
            position: fixed;
            height: 100vh;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
          }

          .sidebar h2 {
            color: #1976d2;
            margin-bottom: 20px;
            font-size: 1.4em;
            font-weight: 600;
          }

          /* Search Styles */
          .search-container {
            position: relative;
            margin-bottom: 20px;
          }

          .search-container input {
            width: 100%;
            padding: 10px 40px 10px 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
          }

          .search-container button {
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            cursor: pointer;
            font-size: 16px;
          }

          /* Navigation Styles */
          .sidebar-nav nav ul {
            list-style: none;
          }

          .sidebar-nav nav ul li {
            margin-bottom: 5px;
          }

          .sidebar-nav nav ul li a {
            display: block;
            padding: 8px 12px;
            color: #555;
            text-decoration: none;
            border-radius: 4px;
            transition: all 0.2s ease;
          }

          .sidebar-nav nav ul li a:hover {
            background: #e3f2fd;
            color: #1976d2;
          }

          .sidebar-nav nav ul li a.active {
            background: #1976d2;
            color: white;
          }

          .sidebar-nav nav ul li ul {
            margin-left: 16px;
            margin-top: 5px;
          }

          /* Action Buttons */
          .review-controls {
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #e0e0e0;
          }

          .review-controls h3 {
            color: #666;
            font-size: 1em;
            margin-bottom: 15px;
          }

          .action-button {
            display: block;
            width: 100%;
            padding: 10px 15px;
            margin-bottom: 10px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            text-align: center;
            text-decoration: none;
            transition: all 0.2s ease;
          }

          .review-button {
            background: #2196f3;
            color: white;
          }

          .review-button:hover {
            background: #1976d2;
            transform: translateY(-1px);
          }

          .archive-button {
            background: #9c27b0;
            color: white;
          }

          .archive-button:hover {
            background: #7b1fa2;
            transform: translateY(-1px);
          }

          /* Main Content Styles */
          .main-content {
            flex: 1;
            margin-left: 280px;
            padding: 40px;
            max-width: calc(100% - 280px);
          }

          .main-content h1 {
            color: #1976d2;
            margin-bottom: 20px;
            font-size: 2.2em;
            font-weight: 300;
          }

          .main-content h2 {
            color: #333;
            margin: 30px 0 15px 0;
            font-size: 1.6em;
            font-weight: 400;
          }

          .main-content h3 {
            color: #555;
            margin: 25px 0 12px 0;
            font-size: 1.3em;
            font-weight: 500;
          }

          .main-content p {
            margin-bottom: 16px;
            color: #666;
            line-height: 1.7;
          }

          .main-content ul, .main-content ol {
            margin: 16px 0 16px 20px;
          }

          .main-content li {
            margin-bottom: 8px;
            color: #666;
            line-height: 1.6;
          }

          .main-content code {
            background: #f5f5f5;
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Monaco', 'Consolas', monospace;
            font-size: 0.9em;
          }

          .main-content pre {
            background: #f8f8f8;
            padding: 15px;
            border-radius: 6px;
            overflow-x: auto;
            margin: 20px 0;
          }

          /* Welcome Screen */
          .welcome-screen {
            text-align: center;
            padding: 60px 20px;
            color: #666;
          }

          .welcome-screen h2 {
            color: #1976d2;
            margin-bottom: 15px;
          }

          /* Search Results */
          .search-results {
            list-style: none;
            margin-top: 15px;
          }

          .search-results li {
            margin-bottom: 8px;
          }

          .search-results a {
            display: block;
            padding: 8px 12px;
            background: #fff3e0;
            border: 1px solid #ffcc02;
            border-radius: 4px;
            color: #f57c00;
            text-decoration: none;
            font-size: 0.9em;
          }

          .search-results a:hover {
            background: #fff8e1;
          }

          /* Responsive Design */
          @media (max-width: 768px) {
            .sidebar {
              width: 100%;
              position: relative;
              height: auto;
            }
            
            .main-content {
              margin-left: 0;
              max-width: 100%;
              padding: 20px;
            }
          }

          /* Review Mode Styles */
          .review-highlight {
            background: rgba(255, 235, 59, 0.3);
            cursor: pointer;
            position: relative;
          }

          .review-tooltip {
            position: absolute;
            background: #333;
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.2s;
            pointer-events: none;
          }

          .review-highlight:hover .review-tooltip {
            opacity: 1;
          }
          EOF

      # Step 11: Create Main Application JavaScript
      - name: Create Main Application JavaScript
        run: |
          cat > ./site/js/app.js << 'EOF'
          // Production DITA SPA Application
          class DITASPAApp {
            constructor() {
              this.contentEl = null;
              this.titleEl = null;
              this.currentContent = '';
              this.searchResults = [];
              
              this.init();
            }

            init() {
              document.addEventListener('DOMContentLoaded', () => {
                this.initializeDOMElements();
                this.createActionButtons();
                this.setupNavigation();
                this.setupSearch();
                this.setupEventListeners();
                
                console.log('[DITA-SPA] Application initialized successfully');
              });
            }

            initializeDOMElements() {
              this.contentEl = document.getElementById('content');
              this.titleEl = document.getElementById('content-title');
            }

            createActionButtons() {
              const reviewControls = document.querySelector('.review-controls');
              if (!reviewControls) return;

              const reviewButton = document.createElement('button');
              reviewButton.textContent = '🔍 Review Mode';
              reviewButton.className = 'action-button review-button';
              reviewButton.onclick = () => this.openReviewMode();

              const archiveButton = document.createElement('button');
              archiveButton.textContent = '📁 View Archives';
              archiveButton.className = 'action-button archive-button';
              archiveButton.onclick = () => this.openArchiveViewer();

              reviewControls.appendChild(reviewButton);
              reviewControls.appendChild(archiveButton);
            }

            setupNavigation() {
              if (typeof navigationData === 'undefined') return;

              const nav = document.getElementById('navigation');
              if (!nav) return;

              const navHTML = this.buildNavigationHTML(navigationData);
              nav.innerHTML = navHTML;

              // Set up click handlers
              nav.addEventListener('click', (e) => {
                if (e.target.tagName === 'A') {
                  e.preventDefault();
                  const contentId = e.target.getAttribute('data-content-id');
                  if (contentId) {
                    this.loadContent(contentId);
                    this.setActiveNavItem(e.target);
                  }
                }
              });
            }

            buildNavigationHTML(items) {
              let html = '<ul>';
              items.forEach(item => {
                html += `<li>`;
                html += `<a href="#" data-content-id="${item.id}">${item.title}</a>`;
                if (item.children && item.children.length > 0) {
                  html += this.buildNavigationHTML(item.children);
                }
                html += `</li>`;
              });
              html += '</ul>';
              return html;
            }

            setActiveNavItem(activeLink) {
              document.querySelectorAll('.sidebar-nav a').forEach(link => {
                link.classList.remove('active');
              });
              activeLink.classList.add('active');
            }

            async loadContent(contentId) {
              try {
                const response = await fetch(`content/${contentId}.html`);
                if (!response.ok) throw new Error(`Content not found: ${contentId}`);
                
                const content = await response.text();
                this.currentContent = content;
                
                if (this.contentEl) {
                  this.contentEl.innerHTML = content;
                }
                
                const title = this.extractTitle(content) || contentId.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                if (this.titleEl) {
                  this.titleEl.textContent = title;
                }
                
                console.log(`[DITA-SPA] Loaded content: ${contentId}`);
              } catch (error) {
                console.error(`[DITA-SPA] Error loading content:`, error);
                if (this.contentEl) {
                  this.contentEl.innerHTML = `<p>Content not found: ${contentId}</p>`;
                }
              }
            }

            extractTitle(html) {
              const match = html.match(/<h1[^>]*>(.*?)<\/h1>/i);
              return match ? match[1].replace(/<[^>]*>/g, '') : null;
            }

            setupSearch() {
              const searchInput = document.getElementById('searchInput');
              const searchButton = document.getElementById('searchButton');
              const searchResults = document.getElementById('searchResults');

              if (!searchInput || !searchButton || !searchResults) return;

              const performSearch = () => {
                const query = searchInput.value.toLowerCase().trim();
                if (!query) {
                  searchResults.innerHTML = '';
                  return;
                }

                const results = this.searchContent(query);
                this.displaySearchResults(results, searchResults);
              };

              searchButton.addEventListener('click', performSearch);
              searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') performSearch();
              });
            }

            searchContent(query) {
              if (!navigationData) return [];
              
              const results = [];
              const searchItems = (items) => {
                items.forEach(item => {
                  if (item.title.toLowerCase().includes(query) || 
                      item.id.toLowerCase().includes(query)) {
                    results.push(item);
                  }
                  if (item.children) {
                    searchItems(item.children);
                  }
                });
              };
              
              searchItems(navigationData);
              return results;
            }

            displaySearchResults(results, container) {
              if (results.length === 0) {
                container.innerHTML = '<li><span style="color: #999; font-style: italic;">No results found</span></li>';
                return;
              }

              const html = results.map(item => 
                `<li><a href="#" data-content-id="${item.id}">${item.title}</a></li>`
              ).join('');

              container.innerHTML = html;

              // Add click handlers for search results
              container.addEventListener('click', (e) => {
                if (e.target.tagName === 'A') {
                  e.preventDefault();
                  const contentId = e.target.getAttribute('data-content-id');
                  if (contentId) {
                    this.loadContent(contentId);
                    this.setActiveNavItem(e.target);
                    // Clear search
                    document.getElementById('searchInput').value = '';
                    container.innerHTML = '';
                  }
                }
              });
            }

            setupEventListeners() {
              // Handle browser back/forward
              window.addEventListener('popstate', (e) => {
                if (e.state && e.state.contentId) {
                  this.loadContent(e.state.contentId);
                }
              });

              // Load initial content if hash present
              const hash = window.location.hash.substring(1);
              if (hash && navigationData) {
                const found = this.findItemById(navigationData, hash);
                if (found) {
                  this.loadContent(hash);
                }
              }
            }

            findItemById(items, id) {
              for (const item of items) {
                if (item.id === id) return item;
                if (item.children) {
                  const found = this.findItemById(item.children, id);
                  if (found) return found;
                }
              }
              return null;
            }

            openReviewMode() {
              if (!this.currentContent) {
                alert('Please select a document first');
                return;
              }

              const reviewWin = window.open('', 'ReviewWindow', 'width=1200,height=800,scrollbars=yes,resizable=yes');
              
              reviewWin.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Review Mode</title>
                  <style>
                    body { font-family: Arial, sans-serif; margin: 0; display: flex; }
                    .content-panel { flex: 1; padding: 20px; overflow-y: auto; }
                    .feedback-panel { width: 280px; background: #f5f5f5; padding: 20px; border-left: 1px solid #ddd; overflow-y: auto; }
                    .highlight { background: rgba(255, 235, 59, 0.5); cursor: pointer; }
                    .feedback-item { background: white; padding: 10px; margin-bottom: 10px; border-radius: 4px; border-left: 3px solid #2196f3; }
                  </style>
                </head>
                <body>
                  <div class="content-panel" id="reviewContent">${this.currentContent}</div>
                  <div class="feedback-panel" id="feedbackPanel">
                    <h3>Feedback</h3>
                    <p>Select text to add comments</p>
                  </div>
                  <script>
                    // Review mode functionality
                    document.getElementById('reviewContent').addEventListener('mouseup', function() {
                      const selection = window.getSelection();
                      if (selection.toString().trim()) {
                        const feedback = prompt('Add your feedback:');
                        if (feedback) {
                          const feedbackPanel = document.getElementById('feedbackPanel');
                          const feedbackItem = document.createElement('div');
                          feedbackItem.className = 'feedback-item';
                          feedbackItem.innerHTML = '<strong>Selected:</strong> "' + selection.toString().substring(0, 50) + '..."<br><strong>Comment:</strong> ' + feedback;
                          feedbackPanel.appendChild(feedbackItem);
                        }
                      }
                    });
                  </script>
                </body>
                </html>
              `);
              
              reviewWin.document.close();
            }

            openArchiveViewer() {
              const archiveWin = window.open('', 'ArchiveWindow', 'width=1000,height=700,scrollbars=yes,resizable=yes');
              
              archiveWin.document.write(`
                <!DOCTYPE html>
                <html>
                <head>
                  <title>Archive Viewer</title>
                  <style>
                    body { font-family: Arial, sans-serif; padding: 20px; }
                    .archive-item { background: #f9f9f9; padding: 15px; margin-bottom: 15px; border-radius: 6px; }
                    .archive-title { font-weight: bold; color: #1976d2; margin-bottom: 8px; }
                    .archive-date { color: #666; font-size: 0.9em; }
                    .download-btn { background: #4caf50; color: white; border: none; padding: 8px 15px; border-radius: 4px; cursor: pointer; margin: 5px; }
                  </style>
                </head>
                <body>
                  <h1>📁 Archive Viewer</h1>
                  <div class="archive-item">
                    <div class="archive-title">Sample Archive Entry</div>
                    <div class="archive-date">Created: ${new Date().toLocaleString()}</div>
                    <button class="download-btn" onclick="alert('Download functionality ready')">Download HTML</button>
                    <button class="download-btn" onclick="alert('Download functionality ready')">Download Comments</button>
                  </div>
                </body>
                </html>
              `);
              
              archiveWin.document.close();
            }
          }

          // Initialize application
          new DITASPAApp();
          EOF

      # Step 12: Create Clean Main HTML Page
      - name: Create Clean Main HTML Page
        run: |
          cat > ./site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Automotive Documentation</title>
            <link rel="stylesheet" href="css/style.css">
            <script src="js/supabase-config.js"></script>
            <script src="js/navigation-config.js"></script>
            <script src="js/content-id-map.js"></script>
          </head>
          <body>
            <div class="sidebar">
              <h2>📚 Documentation</h2>
              
              <div class="search-container">
                <input type="text" id="searchInput" placeholder="Search documentation...">
                <button id="searchButton">🔍</button>
              </div>
              
              <div class="sidebar-nav">
                <nav id="navigation" role="navigation"></nav>
                <ul id="searchResults" class="search-results"></ul>
              </div>
              
              <div class="review-controls">
                <h3>📋 Review Tools</h3>
              </div>
            </div>
            
            <div class="main-content">
              <h1 id="content-title">Welcome</h1>
              <div id="content">
                <div class="welcome-screen">
                  <h2>🚗 Automotive Documentation System</h2>
                  <p>Select a topic from the navigation menu to begin.</p>
                </div>
              </div>
            </div>
            
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF

      # Step 13: Copy Images
      - name: Copy Images
        run: |
          if [ -d "./site/images" ]; then
            echo "✅ Images directory exists"
          else
            mkdir -p ./site/images
            echo "📁 Created images directory"
          fi
          
          # Copy any images from DITA output
          find ./site -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" | while read img; do
            if [[ "$img" != "./site/images/"* ]]; then
              cp "$img" ./site/images/ 2>/dev/null || true
            fi
          done

      # Step 14: Create 404 Page
      - name: Create 404 Page
        run: |
          cat > ./site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Page Not Found - Automotive Documentation</title>
            <link rel="stylesheet" href="css/style.css">
          </head>
          <body>
            <div class="main-content" style="margin-left: 0; text-align: center; padding-top: 100px;">
              <h1>404 - Page Not Found</h1>
              <p>The requested page could not be found.</p>
              <p><a href="index.html">Return to Documentation</a></p>
            </div>
          </body>
          </html>
          EOF

      # Step 15: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true