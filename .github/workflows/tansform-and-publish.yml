name: Transform DITA to HTML

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up DITA-OT
        run: |
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      - name: Transform DITA to HTML
        run: |
          ./dita-ot-4.0.2/bin/dita --input=dita-source/automotive.ditamap --format=html5 --output=./site
          echo "DITA transformation complete"
          
          # List files for debugging
          echo "Generated files:"
          find ./site -type f | sort

      - name: Create Sidebar Navigation
        run: |
          # Create directories for assets
          mkdir -p ./site/css ./site/js
          
          # Create CSS file
          cat > ./site/css/style.css << 'EOF'
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            display: flex;
            min-height: 100vh;
            width: 100%;
          }
          
          .sidebar {
            width: 250px;
            background-color: #f5f5f5;
            padding: 20px;
            min-height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            overflow-y: auto;
            border-right: 1px solid #ddd;
          }
          
          .main-content {
            margin-left: 250px;
            padding: 20px;
            width: calc(100% - 250px);
          }
          
          .sidebar h2 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
          }
          
          .sidebar ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 15px;
          }
          
          .sidebar ul ul {
            padding-left: 20px;
            margin-top: 5px;
          }
          
          .sidebar li {
            margin-bottom: 8px;
          }
          
          .sidebar a {
            color: #2c3e50;
            text-decoration: none;
            display: block;
            padding: 5px;
            border-radius: 4px;
            transition: background-color 0.2s;
          }
          
          .sidebar a:hover {
            background-color: #e0e0e0;
          }
          
          .sidebar a.active {
            background-color: #dbeafe;
            font-weight: bold;
          }
          
          /* Improve readability in main content */
          .main-content h1, .main-content h2, .main-content h3 {
            margin-top: 1em;
            margin-bottom: 0.5em;
          }
          
          .main-content p {
            margin-bottom: 1em;
          }
          
          .main-content img {
            max-width: 100%;
            height: auto;
          }
          EOF
          
          # Create JavaScript file for content loading
          cat > ./site/js/navigation.js << 'EOF'
          document.addEventListener('DOMContentLoaded', function() {
            // Get all navigation links
            const navLinks = document.querySelectorAll('.sidebar a');
            
            // Add click event listener to each link
            navLinks.forEach(link => {
              link.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Remove active class from all links
                navLinks.forEach(l => l.classList.remove('active'));
                
                // Add active class to clicked link
                this.classList.add('active');
                
                // Get the href attribute
                const href = this.getAttribute('href');
                
                // Load content into main area
                fetch(href)
                  .then(response => response.text())
                  .then(html => {
                    // Create a temporary element to parse the HTML
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = html;
                    
                    // Extract the main content from the loaded page
                    // First look for main-content div in the loaded page
                    let content = tempDiv.querySelector('.main-content');
                    
                    if (content) {
                      // If main-content div exists, use its inner content
                      document.querySelector('.main-content').innerHTML = content.innerHTML;
                    } else {
                      // Otherwise, try to extract the body content
                      const bodyContent = tempDiv.querySelector('body');
                      if (bodyContent) {
                        // Exclude navigation elements
                        const navElements = bodyContent.querySelectorAll('ul');
                        navElements.forEach(nav => {
                          if (nav.innerHTML.includes('Automotive Theories') && 
                              nav.innerHTML.includes('History of Automobiles')) {
                            nav.remove();
                          }
                        });
                        
                        document.querySelector('.main-content').innerHTML = bodyContent.innerHTML;
                      } else {
                        document.querySelector('.main-content').innerHTML = '<h1>Content not found</h1>';
                      }
                    }
                    
                    // Update the page title
                    const title = tempDiv.querySelector('title');
                    if (title) {
                      document.title = title.textContent;
                    }
                    
                    // Update the URL without refreshing the page
                    history.pushState({}, '', href);
                  })
                  .catch(error => {
                    console.error('Error loading content:', error);
                    document.querySelector('.main-content').innerHTML = 
                      '<h1>Error</h1><p>Could not load the requested content. Please try again.</p>';
                  });
              });
            });
            
            // Handle browser back/forward buttons
            window.addEventListener('popstate', function() {
              loadContent(window.location.pathname);
            });
            
            // Function to load content based on URL
            function loadContent(url) {
              // Extract the filename from the URL
              const filename = url.split('/').pop() || 'index.html';
              
              // Find and click the corresponding navigation link
              const link = document.querySelector(`.sidebar a[href="${filename}"]`);
              if (link) {
                link.click();
              } else {
                // If no matching link, load the index page
                const indexLink = document.querySelector('.sidebar a[href="index.html"]');
                if (indexLink) {
                  indexLink.click();
                }
              }
            }
            
            // Load initial content based on URL
            if (window.location.pathname === '/' || window.location.pathname.endsWith('/')) {
              // Load index page for root URL
              loadContent('index.html');
            } else {
              loadContent(window.location.pathname);
            }
          });
          EOF
          
          # Create the base index.html file
          cat > ./site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Automotive Documentation</title>
            <link rel="stylesheet" href="css/style.css">
            <script src="js/navigation.js"></script>
          </head>
          <body>
            <div class="sidebar">
              <h2>Navigation</h2>
              <ul>
                <li><a href="automotive-theories.html">Automotive Theories</a>
                  <ul>
                    <li><a href="history-of-automobiles.html">History of Automobiles</a></li>
                    <li><a href="types-of-vehicles.html">Types of Vehicles</a></li>
                    <li><a href="automobile-fundamentals.html">Automobile Fundamentals</a></li>
                    <li><a href="major-vehicle-components.html">Major Vehicle Components</a>
                      <ul>
                        <li><a href="electrical-systems.html">Electrical Systems</a></li>
                        <li><a href="engine-systems.html">Engine Systems</a></li>
                        <li><a href="electric-vehicles.html">Electric Vehicles</a></li>
                        <li><a href="braking-systems.html">Braking Systems</a></li>
                      </ul>
                    </li>
                  </ul>
                </li>
                <li><a href="basic-maintenance.html">Basic Maintenance</a></li>
                <li><a href="vehicle-maintenance.html">Vehicle Maintenance</a></li>
                <li><a href="emergency-repairs.html">Emergency Repairs</a></li>
              </ul>
            </div>
            <div class="main-content">
              <h1>Automotive Documentation</h1>
              <p>Welcome to the automotive documentation. Please select a topic from the navigation menu.</p>
              <div id="content-container"></div>
            </div>
          </body>
          </html>
          EOF
          
          # Find all content HTML files
          find ./site -name "*.html" -not -path "./site/index.html" | while read -r file; do
            echo "Processing $file"
            
            # Extract content from HTML files
            # Create temp file for content extraction
            CONTENT_FILE=$(mktemp)
            
            # Extract body content while removing navigation elements
            sed -n '/<body/,/<\/body>/p' "$file" | 
              sed '/<body/d; /<\/body>/d' | 
              awk '
                # Skip blocks that look like navigation
                /<ul>/ {
                  if (nav_depth == 0 && index($0, "Automotive Theories") > 0) {
                    nav_depth = 1
                    next
                  }
                }
                /<\/ul>/ {
                  if (nav_depth > 0) {
                    nav_depth--
                    if (nav_depth == 0) next
                  }
                }
                nav_depth == 0 { print }
              ' > "$CONTENT_FILE"
            
            # Create content-only HTML file with the same name
            # But don't overwrite the original file yet
            BASENAME=$(basename "$file")
            TEMP_FILE=$(mktemp)
            
            # Create a simplified HTML structure for AJAX loading
            cat > "$TEMP_FILE" << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>$(grep -o '<title>[^<]*</title>' "$file" | sed 's/<title>\(.*\)<\/title>/\1/' || echo "Automotive Documentation")</title>
          </head>
          <body>
          $(cat "$CONTENT_FILE")
          </body>
          </html>
          EOF
            
            # Replace the original file
            cp "$TEMP_FILE" "$file"
            
            # Clean up temp files
            rm -f "$CONTENT_FILE" "$TEMP_FILE"
          done
          
          echo "Content files processed successfully."

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true