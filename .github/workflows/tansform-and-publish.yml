name: DITA to SPA Transformation with Auto-Generated Navigation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 1: Checkout repository 
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install DITA-OT and required tools
      - name: Set up DITA-OT and XML tools
        run: |
          # Install XML tools
          sudo apt-get update
          sudo apt-get install -y libxml2-utils xsltproc

          # Install DITA-OT
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # Step 4: Parse DITAMAP to generate navigation structure
      - name: Parse DITAMAP Structure
        run: |
          echo "Parsing DITAMAP structure from dita-source/automotive.ditamap"
          
          # Create an XSLT file to transform DITAMAP to JSON navigation structure
          cat > extract-nav.xsl << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            <xsl:output method="text"/>
            
            <!-- Start of the JSON array -->
            <xsl:template match="/">
              [
                <xsl:apply-templates select="//topicref[not(ancestor::topicref)]"/>
              ]
            </xsl:template>
            
            <!-- Process each top-level topicref -->
            <xsl:template match="topicref">
              <xsl:variable name="href" select="@href"/>
              <xsl:variable name="filename">
                <xsl:choose>
                  <xsl:when test="contains($href, '/')">
                    <xsl:value-of select="substring-after(substring-before($href, '.'), '/')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="substring-before($href, '.')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              
              <xsl:variable name="id">
                <xsl:choose>
                  <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                  <xsl:otherwise><xsl:value-of select="translate($filename, '_', '-')"/></xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              
              <xsl:variable name="title">
                <xsl:choose>
                  <xsl:when test="@navtitle"><xsl:value-of select="@navtitle"/></xsl:when>
                  <xsl:when test="topicmeta/navtitle"><xsl:value-of select="topicmeta/navtitle"/></xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="translate(translate($id, '-', ' '), '_', ' ')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              
              {
                "id": "<xsl:value-of select="$id"/>",
                "title": "<xsl:value-of select="$title"/>",
                "filename": "<xsl:value-of select="$filename"/>",
                "href": "<xsl:value-of select="$href"/>"
                <xsl:if test="topicref">
                  ,
                  "children": [
                    <xsl:apply-templates select="topicref"/>
                  ]
                </xsl:if>
              }<xsl:if test="following-sibling::topicref">,</xsl:if>
            </xsl:template>
          </xsl:stylesheet>
          EOF
          
          # Apply XSLT to extract navigation from DITAMAP
          xsltproc extract-nav.xsl dita-source/automotive.ditamap > ./navigation-structure.json
          
          # Fix any JSON syntax issues
          sed -i 's/\\n//g; s/\\t//g; s/\\"//g; s/\\//g; s/  / /g' ./navigation-structure.json
          
          # Create a shell script to handle filename to id mapping
          cat > ./generate-id-map.sh << 'EOF'
          #!/bin/bash
          
          # Function to convert underscore filenames to hyphenated ids
          function filename_to_id() {
            local filename=$1
            echo "${filename//_/-}"
          }
          
          # Function to generate a title from an ID
          function id_to_title() {
            local id=$1
            # Replace hyphens with spaces and capitalize each word
            echo "$id" | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g'
          }
          
          # Ensure directory exists
          mkdir -p ./site/js
          
          # Generate ID to title mapping as JavaScript
          echo "// Auto-generated content ID mapping" > ./site/js/content-id-map.js
          echo "const contentIdMap = {" >> ./site/js/content-id-map.js
          
          # Process each HTML file in the site directory
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            filename=$(basename "$file" .html)
            id=$(filename_to_id "$filename")
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            
            # If no title found, generate one from the ID
            if [ -z "$title" ]; then
              title=$(id_to_title "$id")
            fi
            
            # Handle special characters for shell safety
            title=$(echo "$title" | sed 's/"/\\"/g')
            
            # Add to content map file directly
            echo "  \"$id\": { \"title\": \"$title\", \"filename\": \"$filename\" }," >> ./site/js/content-id-map.js
          done
          
          # Close the mapping object
          echo "  \"default\": { \"title\": \"Automotive Documentation\" }" >> ./site/js/content-id-map.js
          echo "};" >> ./site/js/content-id-map.js
          EOF
          
          chmod +x ./generate-id-map.sh
          
          echo "DITAMAP parsing complete"
          cat ./navigation-structure.json

      # Step 5: Transform DITA to HTML and prepare images
      - name: Transform DITA to HTML and Prepare Images
        run: |
          # Using HTML5 format with parameters for better output
          ./dita-ot-4.0.2/bin/dita --input=dita-source/automotive.ditamap --format=html5 --output=./site
          echo "DITA transformation complete"
          
          # Create content directory for SPA fragments
          mkdir -p ./site/content
          mkdir -p ./site/images
          
          # List all files to see what's available
          echo "Listing all files in dita-source:"
          find ./dita-source -type f | sort
          
          # Find and copy all image files from dita-source to the images directory
          find ./dita-source -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -exec cp -v {} ./site/images/ \;
          
          # Find any image references in the HTML output
          echo "Finding image references in HTML output:"
          grep -r "img src" ./site --include="*.html" || echo "No direct img tags found"
          grep -r "image href" ./site --include="*.html" || echo "No image hrefs found"
          grep -r "<image" ./site --include="*.html" || echo "No image tags found"
          
          # Attempt to find images in the HTML output and copy them
          find ./site -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -not -path "./site/images/*" -exec cp -v {} ./site/images/ \;
          
          # Also copy any files from potential 'img' directories
          if [ -d "./site/img" ]; then
            cp -r ./site/img/* ./site/images/ || echo "No files in img directory"
          fi
          
          # Check if images directory in DITA-OT output and copy from there
          if [ -d "./site/images" ]; then
            echo "Images directory exists in DITA-OT output"
            find ./site/images -type f | sort
          else
            echo "No images directory in DITA-OT output"
          fi
          
          # List all files in images directory to confirm
          echo "Files in images directory:"
          ls -la ./site/images/ || echo "No files in images directory"
          
          # Manually copy image files if they exist in expected locations
          find ./dita-source -name "2.jpg" -exec cp -v {} ./site/images/ \;
          find ./dita-source -name "3.jpg" -exec cp -v {} ./site/images/ \;
          
          # List files to check output
          echo "Generated files:"
          find ./site -type f | sort

      # Step 6: Process HTML files into content fragments with improved image handling
      - name: Process HTML Content
        run: |
          # Create content directory for SPA fragments
          mkdir -p ./site/content
          mkdir -p ./site/js
          
          # Create a folder to store folder-based content
          mkdir -p ./site/content/folders

          # Process each HTML file to extract content
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            # Skip processing if this is the index.html we'll create later
            if [[ "$file" == "./site/index.html" ]]; then
              continue
            fi
            
            filename=$(basename "$file")
            id="${filename%.html}"
            hyphenated_id="${id//_/-}"
            echo "Processing $filename (ID: $id, Hyphenated ID: $hyphenated_id)"
            
            # Extract content from file 
            content=$(sed -n '/<body/,/<\/body>/p' "$file" | 
                     sed '/<body/d;/<\/body>/d' | 
                     sed '/<header/,/<\/header>/d' | 
                     sed '/<nav/,/<\/nav>/d' | 
                     sed '/<footer/,/<\/footer>/d')
            
            # Log original image references for debugging
            echo "Original image references in $filename:"
            echo "$content" | grep -o '<img [^>]*src="[^"]*"[^>]*>' || echo "No img tags found"
            echo "$content" | grep -o '<image [^>]*href="[^"]*"[^>]*>' || echo "No image tags found"
            
            # Fix image paths - update to use SPA image directory
            # First, handle standard <img> tags
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="([^":]*)\.([^":]+)"/<img\1src="\/images\/\2.\3"/gi')
            
            # Handle DITA <image> tags - convert to standard <img> tags
            content=$(echo "$content" | sed -E 's/<image([^>]*)href="([^":]*)\.([^":]+)"/<img\1src="\/images\/\2.\3"/gi')
            
            # Handle paths with folder structure
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="[^"]*\/([^\/"]*)\.([^":]+)"/<img\1src="\/images\/\2.\3"/gi')
            
            # Handle absolute paths in the site
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="\/[^\/]*\/([^\/"]*)\.([^":]+)"/<img\1src="\/images\/\2.\3"/gi')
            
            # Log transformed image references
            echo "Transformed image references in $filename:"
            echo "$content" | grep -o '<img [^>]*src="[^"]*"[^>]*>' || echo "No img tags found after transformation"
            
            # Get title from the original file
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '_-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi
            
            # Determine parent folder (if any)
            parent_dir=$(dirname "$file" | xargs basename)
            if [[ "$parent_dir" != "site" ]]; then
              echo "File is in subdirectory: $parent_dir"
              # Create folder content path to handle nested structure
              mkdir -p "./site/content/$parent_dir"
              echo "$content" > "./site/content/$parent_dir/$id.html"
              echo "Created folder-based content: ./site/content/$parent_dir/$id.html"
              
              # Also create a path mapping entry
              echo "  \"$hyphenated_id\": { \"path\": \"$parent_dir/$id.html\" }," >> ./site/js/path-mapping.tmp
            fi
            
            # Create content file with original filename
            echo "$content" > "./site/content/$id.html"
            
            # Also create a hyphenated version
            if [[ "$id" != "$hyphenated_id" ]]; then
              echo "$content" > "./site/content/$hyphenated_id.html"
              echo "Created mapping: $id.html → $hyphenated_id.html"
            fi
          done
          
          # Create a mapping file directly
          echo "// Auto-generated content ID mapping" > ./site/js/content-id-map.js
          echo "const contentIdMap = {" >> ./site/js/content-id-map.js
          
          # Process each HTML file for the mapping
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            filename=$(basename "$file" .html)
            id="${filename//_/-}"
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            
            # Skip if already processed
            if grep -q "\"$id\":" ./site/js/content-id-map.js; then
              continue
            fi
            
            # If no title found, generate one from the ID
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi
            
            # Escape quotes in title
            title=$(echo "$title" | sed 's/"/\\"/g')
            
            echo "  \"$id\": { \"title\": \"$title\", \"filename\": \"$filename\" }," >> ./site/js/content-id-map.js
          done
          
          # Close the mapping object
          echo "  \"default\": { \"title\": \"Automotive Documentation\" }" >> ./site/js/content-id-map.js
          echo "};" >> ./site/js/content-id-map.js
          
          # Create path mapping if needed
          if [ -f "./site/js/path-mapping.tmp" ]; then
            echo "// Auto-generated path mapping" > ./site/js/path-mapping.js
            echo "const pathMapping = {" >> ./site/js/path-mapping.js
            cat ./site/js/path-mapping.tmp >> ./site/js/path-mapping.js
            echo "  \"default\": { \"path\": \"\" }" >> ./site/js/path-mapping.js
            echo "};" >> ./site/js/path-mapping.js
            rm ./site/js/path-mapping.tmp
          else
            echo "// Auto-generated path mapping" > ./site/js/path-mapping.js
            echo "const pathMapping = { \"default\": { \"path\": \"\" } };" >> ./site/js/path-mapping.js
          fi

      # Step 7: Generate Navigation Configuration
      - name: Generate Navigation Configuration
        run: |
          mkdir -p ./site/js ./site/css
          
          # Convert JSON to JavaScript navigation config
          cat > ./site/js/navigation-config.js << 'EOF'
          // Auto-generated navigation structure from DITAMAP
          const navigationConfig = 
          EOF
          
          # Append the parsed JSON structure
          cat ./navigation-structure.json >> ./site/js/navigation-config.js
          echo ";" >> ./site/js/navigation-config.js
          
          echo "Navigation configuration generated from DITAMAP structure"

      # Step 8: Create SPA CSS with improved navigation styling and search UI
      - name: Create SPA CSS
        run: |
          cat > ./site/css/style.css << 'EOF'
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            display: flex;
            height: 100vh;
            width: 100%;
            overflow: hidden;
          }
          
          .sidebar {
            width: 250px;
            background-color: #f5f5f5;
            padding: 20px;
            height: 100vh;
            overflow-y: auto;
            border-right: 1px solid #ddd;
            display: flex;
            flex-direction: column;
          }
          
          .main-content {
            flex: 1;
            padding: 20px;
            height: 100vh;
            overflow-y: auto;
          }
          
          .sidebar h2 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
          }
          
          /* Search bar styling */
          .search-container {
            margin-bottom: 20px;
            position: relative;
          }
          
          .search-input-wrap {
            position: relative;
            display: flex;
            margin-bottom: 5px;
          }
          
          #search-input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
          }
          
          #search-input:focus {
            outline: none;
            border-color: #4a90e2;
            box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
          }
          
          .search-scope {
            display: flex;
            align-items: center;
            font-size: 12px;
            color: #666;
            margin-bottom: 10px;
          }
          
          .search-scope input {
            margin-right: 5px;
          }
          
          #search-results {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            max-height: 300px;
            overflow-y: auto;
            z-index: 100;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: none;
          }
          
          .search-result-item {
            padding: 10px 15px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
          }
          
          .search-result-item:hover {
            background-color: #f5f5f5;
          }
          
          .search-result-item h4 {
            font-size: 14px;
            margin-bottom: 5px;
            color: #2c3e50;
          }
          
          .search-result-item p {
            font-size: 12px;
            color: #666;
            margin: 0;
          }
          
          .search-result-item strong {
            background-color: rgba(255, 230, 0, 0.4);
            font-weight: normal;
          }
          
          .search-no-results {
            padding: 15px;
            text-align: center;
            color: #666;
            font-style: italic;
          }
          
          /* Improved navigation styling for hierarchy */
          .sidebar-nav {
            flex: 1;
            overflow-y: auto;
          }
          
          .sidebar ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 5px;
          }
          
          .sidebar ul ul {
            padding-left: 20px;
            margin-top: 5px;
            margin-bottom: 0;
          }
          
          .sidebar li {
            margin-bottom: 5px;
            position: relative;
          }
          
          /* Toggle arrow styling */
          .sidebar .toggle-arrow {
            display: inline-block;
            width: 16px;
            height: 16px;
            position: absolute;
            left: 0;
            top: 5px;
            cursor: pointer;
            z-index: 10;
          }
          
          .sidebar .toggle-arrow:before {
            content: "▶";
            display: inline-block;
            font-size: 10px;
            transition: transform 0.2s;
          }
          
          .sidebar li.expanded > .toggle-arrow:before {
            transform: rotate(90deg);
          }
          
          .sidebar li.has-children > ul {
            display: none;
          }
          
          .sidebar li.has-children.expanded > ul {
            display: block;
          }
          
          .sidebar a {
            color: #2c3e50;
            text-decoration: none;
            display: block;
            padding: 5px 5px 5px 20px; /* Add left padding for arrow */
            border-radius: 4px;
            transition: background-color 0.2s;
            cursor: pointer;
          }
          
          .sidebar a:hover {
            background-color: #e0e0e0;
          }
          
          .sidebar a.active {
            background-color: #dbeafe;
            font-weight: bold;
          }
          
          /* Content styling */
          .main-content h1, .main-content h2, .main-content h3 {
            margin-top: 1em;
            margin-bottom: 0.5em;
          }
          
          .main-content p {
            margin-bottom: 1em;
          }
          
          .main-content img {
            max-width: 100%;
            height: auto;
          }
          
          /* Fix for duplicate headings */
          .main-content h1:first-child + h1 {
            display: none;
          }
          
          /* Loading state */
          #loading {
            display: none;
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
          }
          
          .loading #loading {
            display: block;
          }
          
          /* Error state */
          .error {
            background-color: #fff8f8;
            border-left: 4px solid #e74c3c;
            padding: 15px;
            margin-bottom: 20px;
            color: #333;
          }
          
          .error h2 {
            color: #e74c3c;
            margin-top: 0;
          }
          
          /* Responsive design for mobile */
          @media (max-width: 768px) {
            body {
              flex-direction: column;
              height: auto;
            }
            
            .sidebar {
              width: 100%;
              height: auto;
              max-height: 40vh;
            }
            
            .main-content {
              height: auto;
              min-height: 60vh;
            }
            
            #search-results {
              position: fixed;
              top: auto;
              left: 10px;
              right: 10px;
              max-height: 50vh;
            }
          }
          EOF

      # Step 9: Create SPA JavaScript Application with auto-generated navigation
      - name: Create SPA Application
        run: |
          cat > ./site/js/app.js << 'EOF'
          // SPA Application with dynamic navigation from DITAMAP
          
          // DOM Elements
          const contentEl = document.getElementById('content');
          const contentTitleEl = document.getElementById('content-title');
          const navigationEl = document.getElementById('navigation');
          
          // Base path handling for GitHub Pages
          const getBasePath = () => {
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) {
                return '/' + pathSegments[1];
              }
            }
            return '';
          };
          
          // Current state
          let currentPage = null;
          const basePath = getBasePath();
          
          // Debug logging function
          function debug(message, data) {
            console.log(`[DITA-SPA] ${message}`, data || '');
          }
          
          // Initialize the application
          function initApp() {
            debug('Initializing app with base path:', basePath);
            
            // Render navigation
            renderNavigation(navigationConfig);
            
            // Set up event listeners
            window.addEventListener('popstate', handlePopState);
            
            // Load initial page based on URL or default
            const initialPageId = getPageIdFromUrl() || navigationConfig[0].id;
            debug('Initial page ID:', initialPageId);
            navigateToPage(initialPageId, false);
          }
          
          // Render the navigation menu with hierarchy
          function renderNavigation(items, parentEl = navigationEl) {
            const ul = document.createElement('ul');
            
            items.forEach(item => {
              const li = document.createElement('li');
              
              // Add class if item has children
              if (item.children && item.children.length > 0) {
                li.classList.add('has-children');
                
                // Create a toggle arrow element
                const toggle = document.createElement('span');
                toggle.className = 'toggle-arrow';
                toggle.addEventListener('click', (e) => {
                  e.stopPropagation();
                  li.classList.toggle('expanded');
                });
                li.appendChild(toggle);
              }
              
              const a = document.createElement('a');
              a.textContent = item.title;
              a.setAttribute('data-id', item.id);
              a.href = `#${item.id}`;
              
              // Click handler for navigation items
              a.addEventListener('click', (e) => {
                e.preventDefault();
                
                // If this is a parent item with children, toggle expansion
                if (item.children && item.children.length > 0) {
                  li.classList.toggle('expanded');
                }
                
                // Always navigate to the page
                navigateToPage(item.id);
              });
              
              li.appendChild(a);
              
              // Recursively render children if any
              if (item.children && item.children.length > 0) {
                renderNavigation(item.children, li);
              }
              
              ul.appendChild(li);
            });
            
            parentEl.appendChild(ul);
          }
          
          // Expand navigation path to the current page
          function expandNavigationTo(pageId) {
            // Helper to search for a page in the navigation tree
            function findPageInNavigation(items, id, path = []) {
              for (let i = 0; i < items.length; i++) {
                const item = items[i];
                const currentPath = [...path, item];
                
                if (item.id === id) {
                  return currentPath;
                }
                
                if (item.children && item.children.length > 0) {
                  const result = findPageInNavigation(item.children, id, currentPath);
                  if (result) {
                    return result;
                  }
                }
              }
              
              return null;
            }
            
            // Find the path to the page
            const path = findPageInNavigation(navigationConfig, pageId);
            if (!path) return;
            
            // Expand all parent items in the path
            for (let i = 0; i < path.length - 1; i++) {
              const item = path[i];
              const li = document.querySelector(`.sidebar li a[data-id="${item.id}"]`).parentElement;
              li.classList.add('expanded');
            }
          }
          
          // Navigate to a specific page
          function navigateToPage(pageId, pushState = true) {
            debug('Navigating to page:', pageId);
            
            // Update active state in navigation
            updateActiveNavItem(pageId);
            
            // Expand navigation to show the current page
            expandNavigationTo(pageId);
            
            // Update the URL
            if (pushState) {
              history.pushState({ pageId }, '', `#${pageId}`);
            }
            
            // Show loading indicator
            document.body.classList.add('loading');
            
            // Update current page
            currentPage = pageId;
            
            // Get filename from ID (using contentIdMap if available)
            let contentFileName = pageId;
            if (window.contentIdMap && contentIdMap[pageId] && contentIdMap[pageId].filename) {
              contentFileName = contentIdMap[pageId].filename;
            }
            
            // Try both hyphenated and underscore versions
            loadContent(pageId)
              .then(content => {
                // Update title
                const title = getPageTitle(pageId);
                contentTitleEl.textContent = title;
                document.title = title;
                
                // Fix for duplicate headings
                if (content.includes(`<h1>${title}</h1>`)) {
                  content = content.replace(`<h1>${title}</h1>`, '');
                }
                
                // Update content
                contentEl.innerHTML = content;
                
                // Hide loading indicator
                document.body.classList.remove('loading');
                debug('Content loaded successfully');
              })
              .catch(error => {
                debug('Error loading with ID, trying original filename:', contentFileName);
                // Try with original filename if different from ID
                if (contentFileName !== pageId) {
                  loadContent(contentFileName)
                    .then(content => {
                      contentTitleEl.textContent = getPageTitle(pageId);
                      document.title = getPageTitle(pageId);
                      contentEl.innerHTML = content;
                      document.body.classList.remove('loading');
                      debug('Content loaded from original filename');
                    })
                    .catch(altError => {
                      showErrorContent(pageId);
                    });
                } else {
                  showErrorContent(pageId);
                }
              });
          }
          
          // Show error content when page cannot be loaded
          function showErrorContent(pageId) {
            console.error('Failed to load content:', pageId);
            contentEl.innerHTML = `
              <div class="error">
                <h2>Content Not Found</h2>
                <p>The requested content "${pageId}" could not be loaded.</p>
                <p>Please select another topic from the navigation menu.</p>
              </div>
            `;
            document.body.classList.remove('loading');
          }
          
          // Load content for a page
          async function loadContent(pageId) {
            const contentPath = `${basePath}/content/${pageId}.html`;
            debug('Fetching from URL:', contentPath);
            
            const response = await fetch(contentPath);
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return await response.text();
          }
          
          // Update active state in navigation
          function updateActiveNavItem(pageId) {
            // Remove active class from all nav items
            const allNavItems = document.querySelectorAll('.sidebar a');
            allNavItems.forEach(item => item.classList.remove('active'));
            
            // Add active class to current page nav item
            const activeItem = document.querySelector(`.sidebar a[data-id="${pageId}"]`);
            if (activeItem) {
              activeItem.classList.add('active');
              
              // Make sure the parents are expanded
              let parent = activeItem.parentElement;
              while (parent && !parent.classList.contains('sidebar')) {
                if (parent.classList.contains('has-children')) {
                  parent.classList.add('expanded');
                }
                parent = parent.parentElement;
              }
            }
          }
          
          // Handle popstate event (browser back/forward)
          function handlePopState(event) {
            const pageId = event.state?.pageId || getPageIdFromUrl() || navigationConfig[0].id;
            debug('Popstate event, loading page:', pageId);
            navigateToPage(pageId, false);
          }
          
          // Get page ID from URL hash
          function getPageIdFromUrl() {
            return window.location.hash.substring(1) || null;
          }
          
          // Get page title from content manifest
          function getPageTitle(pageId) {
            // First try contentIdMap
            if (window.contentIdMap && contentIdMap[pageId]) {
              return contentIdMap[pageId].title;
            }
            
            // Then try navigation config
            function findTitleInNav(items, id) {
              for (const item of items) {
                if (item.id === id) {
                  return item.title;
                }
                if (item.children && item.children.length > 0) {
                  const title = findTitleInNav(item.children, id);
                  if (title) return title;
                }
              }
              return null;
            }
            
            const navTitle = findTitleInNav(navigationConfig, pageId);
            if (navTitle) return navTitle;
            
            // Fallback: generate title from ID
            return pageId.split(/-|_/).map(word => 
              word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
          }
          
          // Initialize the app when DOM is ready
          document.addEventListener('DOMContentLoaded', initApp);
          EOF

      # Step 10: Update index.html to include path mapping
      - name: Update Index HTML with Search
        run: |
          cat > ./site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
            <meta http-equiv="Pragma" content="no-cache">
            <meta http-equiv="Expires" content="0">
            
            <!-- Base path handling for GitHub Pages -->
            <script>
              // Dynamically set the base href based on deployment environment
              (function() {
                // For GitHub Pages repository sites
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    const basePath = '/' + pathSegments[1];
                    document.write('<base href="' + basePath + '/">');
                    console.log('Base path set to:', basePath);
                  }
                }
              })();
            </script>
            
            <title>Automotive Documentation</title>
            <link rel="stylesheet" href="css/style.css">
          </head>
          <body>
            <div class="sidebar">
              <div class="search-container">
                <div class="search-input-wrap">
                  <input type="text" id="search-input" placeholder="Search documentation...">
                </div>
                <div class="search-scope">
                  <input type="checkbox" id="search-toggle">
                  <label for="search-toggle">Search only current article</label>
                </div>
                <div id="search-results"></div>
              </div>
              
              <div class="sidebar-nav">
                <h2>Navigation</h2>
                <div id="navigation"></div>
              </div>
            </div>
            
            <div class="main-content">
              <h1 id="content-title">Loading...</h1>
              <div id="loading">Loading content...</div>
              <div id="content">
                <!-- Content will load here -->
                <div class="initial-loading">
                  <p>Initializing documentation viewer...</p>
                </div>
              </div>
            </div>
            
            <!-- Load JavaScript files -->
            <script src="js/navigation-config.js"></script>
            <script src="js/content-id-map.js"></script>
            <script src="js/path-mapping.js"></script>
            <script src="js/search-index.js"></script>
            <script src="js/search.js"></script>
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF

      # Step 11: Create 404.html page for SPA routing
      - name: Create 404 Page for SPA Routing
        run: |
          cat > ./site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redirecting...</title>
            <script>
              // Store the requested URL for processing after redirect
              sessionStorage.redirect = location.href;
              
              // Dynamically determine the correct base path
              function getBasePath() {
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    return '/' + pathSegments[1];
                  }
                }
                return '';
              }
              
              // Redirect to the main site with the correct base path
              const basePath = getBasePath();
              window.location.href = basePath + '/';
            </script>
          </head>
          <body>
            <div style="text-align: center; font-family: Arial, sans-serif; margin-top: 100px;">
              <h1>Redirecting to documentation...</h1>
              <p>If you are not redirected automatically, <a href="/">click here</a>.</p>
            </div>
          </body>
          </html>
          EOF

      # Step 12: Create default content for navigation containers
      - name: Create Default Content
        run: |
          # Create content directory if it doesn't exist
          mkdir -p ./site/content

          # Extract container nodes from navigation structure
          if command -v jq >/dev/null 2>&1; then
            # Use jq if available
            jq -r '.[] | select(.children != null) | .id' ./navigation-structure.json > container-nodes.txt
          else
            # Fallback to grep and sed
            grep -o '"id": "[^"]*".*"children"' ./navigation-structure.json | 
            sed 's/"id": "\([^"]*\)".*/\1/' > container-nodes.txt
          fi
          
          # Create default content for container nodes
          while IFS= read -r id || [ -n "$id" ]; do
            if [ ! -f "./site/content/$id.html" ]; then
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
              
              echo "Creating default content for container node: $id ($title)"
              cat > "./site/content/$id.html" << EOF
          <h1>${title}</h1>
          <p>This section contains information about ${title}.</p>
          <p>Use the navigation menu to explore topics within this section.</p>
          EOF
            fi
          done < container-nodes.txt
          
          # Handle error if no container nodes were found
          if [ ! -s container-nodes.txt ]; then
            echo "No container nodes found in navigation. Creating default containers."
            
            # Create default containers
            for id in automotive-information basic-maintenance major-vehicle-components; do
              title=$(echo "$id" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
              
              echo "Creating default container: $id ($title)"
              cat > "./site/content/$id.html" << EOF
          <h1>${title}</h1>
          <p>This section contains information about ${title}.</p>
          <p>Use the navigation menu to explore topics within this section.</p>
          EOF
            done
          fi

      # Step 13: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true