# Step 1: Modify the HTML to add a search button and update the main structure
# In Step 10: Update Index HTML with Search, replace the search-container div with:

<div class="search-container">
  <div class="search-input-wrap">
    <input type="text" id="search-input" placeholder="Search documentation...">
    <button id="search-button" aria-label="Search">Search</button>
  </div>
  <div class="search-scope">
    <input type="checkbox" id="search-toggle">
    <label for="search-toggle">Search only current article</label>
  </div>
  <div id="search-results"></div>
</div>

# Step 2: Update the CSS to style the search button and search results in the main window
# In Step 8: Create SPA CSS, add these styles after the search-container styles:

#search-button {
  padding: 8px 12px;
  background-color: #4a90e2;
  color: white;
  border: none;
  border-radius: 0 4px 4px 0;
  cursor: pointer;
  margin-left: -1px;
}

#search-button:hover {
  background-color: #3a7fcf;
}

#search-input {
  width: calc(100% - 90px);
  border-radius: 4px 0 0 4px;
}

/* Search results in main content area */
.search-results-container {
  padding: 10px 0;
}

.search-results-count {
  margin-bottom: 20px;
  color: #666;
  font-style: italic;
}

.search-results-list {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.content-search-result {
  padding: 15px;
  border: 1px solid #eee;
  border-radius: 5px;
  transition: background-color 0.2s;
  margin-bottom: 15px;
}

.content-search-result:hover {
  background-color: #f9f9f9;
}

.content-search-result h3 {
  margin-top: 0;
  margin-bottom: 10px;
}

.content-search-result a {
  color: #4a90e2;
  text-decoration: none;
}

.content-search-result a:hover {
  text-decoration: underline;
}

.search-result-excerpt {
  color: #666;
  font-size: 14px;
  margin-top: 5px;
}

.search-result-excerpt strong {
  background-color: rgba(255, 230, 0, 0.4);
  font-weight: normal;
}

.welcome-screen {
  text-align: center;
  padding: 40px 20px;
}

.welcome-screen h2 {
  margin-bottom: 20px;
}

# Step 3: Create a new search.js file to implement the search functionality
# Add a new step in the workflow after Step 12:

# Step 13 (New): Create Search JavaScript
- name: Create Search JavaScript
  run: |
    cat > ./site/js/search-index.js << 'EOF'
    // This file will be populated at runtime by the search.js script
    const searchIndexData = {};
    EOF
    
    cat > ./site/js/search.js << 'EOF'
    // Search functionality for DITA SPA
    let searchIndex = {};
    let contentCache = {};

    // Initialize search functionality
    function initSearch() {
      const searchInput = document.getElementById('search-input');
      const searchButton = document.getElementById('search-button');
      
      // Add event listeners
      searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          performSearch();
        }
      });
      
      searchButton.addEventListener('click', performSearch);
      
      // Create simple search index from navigation
      createSearchIndexFromNavigation();
    }

    // Create a basic search index from navigation structure
    function createSearchIndexFromNavigation() {
      function processItems(items) {
        items.forEach(item => {
          // Add item to search index
          searchIndex[item.id] = {
            id: item.id,
            title: item.title,
            content: item.title, // Initially just use title as content
            filename: item.filename || item.id
          };
          
          // Process children if any
          if (item.children && item.children.length > 0) {
            processItems(item.children);
          }
        });
      }
      
      // Process all navigation items
      processItems(window.navigationConfig);
      
      // Pre-fetch content for search indexing
      prefetchContent();
    }

    // Load content for a page - duplicated from app.js for proper encapsulation
    async function fetchContentForSearch(pageId) {
      const basePath = getBasePathForSearch();
      const contentPath = `${basePath}/content/${pageId}.html`;
      
      const response = await fetch(contentPath);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      return await response.text();
    }

    // Get base path helper function - duplicated from app.js
    function getBasePathForSearch() {
      if (location.hostname.includes('github.io')) {
        const pathSegments = location.pathname.split('/');
        if (pathSegments.length > 1) {
          return '/' + pathSegments[1];
        }
      }
      return '';
    }

    // Pre-fetch content for search indexing
    async function prefetchContent() {
      for (const id in searchIndex) {
        try {
          const content = await fetchContentForSearch(id);
          
          // Store in cache
          contentCache[id] = content;
          
          // Extract text content for search
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = content;
          const textContent = tempDiv.textContent || tempDiv.innerText;
          
          // Update search index with actual content
          searchIndex[id].content = textContent;
        } catch (error) {
          console.warn(`Failed to prefetch content for ${id}:`, error);
        }
      }
      
      console.log('[DITA-SPA] Search index created with', Object.keys(searchIndex).length, 'entries');
    }

    // Perform the search
    function performSearch() {
      const searchInput = document.getElementById('search-input');
      const searchTerm = searchInput.value.trim().toLowerCase();
      const searchScope = document.getElementById('search-toggle').checked;
      
      if (!searchTerm) {
        return;
      }
      
      // If search scope is checked, only search current article
      if (searchScope && window.currentPage) {
        // Search only in current page
        const results = searchInPage(window.currentPage, searchTerm);
        if (results) {
          displaySearchResults([results], searchTerm);
        } else {
          displaySearchResults([], searchTerm);
        }
      } else {
        // Search all content
        const results = searchAllContent(searchTerm);
        displaySearchResults(results, searchTerm);
      }
    }

    // Search within a specific page
    function searchInPage(pageId, term) {
      if (!searchIndex[pageId]) {
        return null;
      }
      
      const item = searchIndex[pageId];
      const content = item.content.toLowerCase();
      
      if (content.includes(term) || item.title.toLowerCase().includes(term)) {
        return {
          id: item.id,
          title: item.title,
          score: calculateScore(item, term),
          excerpt: generateExcerpt(content, term)
        };
      }
      
      return null;
    }

    // Search all content
    function searchAllContent(term) {
      const results = [];
      
      for (const id in searchIndex) {
        const item = searchIndex[id];
        const titleLower = item.title.toLowerCase();
        const contentLower = item.content.toLowerCase();
        
        if (titleLower.includes(term) || contentLower.includes(term)) {
          results.push({
            id: item.id,
            title: item.title,
            score: calculateScore(item, term),
            excerpt: generateExcerpt(contentLower, term)
          });
        }
      }
      
      // Sort results by score
      results.sort((a, b) => b.score - a.score);
      
      return results;
    }

    // Calculate search relevance score
    function calculateScore(item, term) {
      let score = 0;
      const titleLower = item.title.toLowerCase();
      const contentLower = item.content.toLowerCase();
      
      // Higher score for title matches
      if (titleLower === term) {
        score += 100;
      } else if (titleLower.includes(term)) {
        score += 50;
      }
      
      // Score based on content matches
      const contentMatches = contentLower.split(term).length - 1;
      score += contentMatches;
      
      return score;
    }

    // Generate a search result excerpt
    function generateExcerpt(content, term) {
      const index = content.indexOf(term);
      if (index === -1) return '';
      
      const start = Math.max(0, index - 50);
      const end = Math.min(content.length, index + term.length + 50);
      let excerpt = content.substring(start, end);
      
      if (start > 0) excerpt = '...' + excerpt;
      if (end < content.length) excerpt += '...';
      
      // Highlight the search term
      return excerpt.replace(new RegExp(term, 'gi'), match => `<strong>${match}</strong>`);
    }

    // Display search results in the main content area
    function displaySearchResults(results, searchTerm) {
      const contentEl = document.getElementById('content');
      const contentTitleEl = document.getElementById('content-title');
      
      // Update page title
      contentTitleEl.textContent = `Search Results for "${searchTerm}"`;
      document.title = `Search Results - ${searchTerm}`;
      
      // Filter out null results
      const validResults = results.filter(result => result !== null);
      
      if (validResults.length === 0) {
        contentEl.innerHTML = `
          <div class="search-results-container">
            <p class="search-no-results">No results found for "${searchTerm}".</p>
            <p>Try a different search term or browse topics from the navigation menu.</p>
          </div>
        `;
        return;
      }
      
      // Build HTML for search results
      let resultsHtml = `
        <div class="search-results-container">
          <p class="search-results-count">Found ${validResults.length} result${validResults.length !== 1 ? 's' : ''} for "${searchTerm}"</p>
          <div class="search-results-list">
      `;
      
      validResults.forEach(result => {
        resultsHtml += `
          <div class="content-search-result" data-id="${result.id}">
            <h3><a href="#${result.id}" class="search-result-link">${result.title}</a></h3>
            <p class="search-result-excerpt">${result.excerpt}</p>
          </div>
        `;
      });
      
      resultsHtml += `
          </div>
        </div>
      `;
      
      contentEl.innerHTML = resultsHtml;
      
      // Add click handlers to search result links
      document.querySelectorAll('.search-result-link').forEach(link => {
        link.addEventListener('click', function(e) {
          e.preventDefault();
          const id = this.closest('.content-search-result').getAttribute('data-id');
          if (typeof window.navigateToPage === 'function') {
            window.navigateToPage(id);
          } else {
            // Fallback if function isn't available
            window.location.hash = id;
          }
        });
      });
    }

    // Initialize search when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      initSearch();
    });
    EOF

# Step 4: Modify the app.js file to keep the main window blank initially
# In Step 9: Create SPA Application, modify the initApp function:

function initApp() {
  debug('Initializing app with base path:', basePath);
  
  // Render navigation
  renderNavigation(navigationConfig);
  
  // Set up event listeners
  window.addEventListener('popstate', handlePopState);
  
  // Check if we have a hash in the URL
  const initialPageId = getPageIdFromUrl();
  
  if (initialPageId) {
    // If we have a page ID in the URL, load that page
    navigateToPage(initialPageId, false);
  } else {
    // Otherwise, show a welcome screen
    showWelcomeScreen();
  }
}

# Add the showWelcomeScreen function to app.js right after the initApp function:

// Function to show welcome screen
function showWelcomeScreen() {
  contentTitleEl.textContent = 'Documentation';
  document.title = 'Automotive Documentation';
  
  contentEl.innerHTML = `
    <div class="welcome-screen">
      <h2>Welcome to Automotive Documentation</h2>
      <p>Please select a topic from the navigation menu or use the search bar to find specific information.</p>
    </div>
  `;
  
  document.body.classList.remove('loading');
}

# Finally, update the workflow step numbering so the GitHub Pages deployment becomes Step 14
# Change the deployment step to:

# Step 14: Deploy to GitHub Pages
- name: Deploy to GitHub Pages
  uses: peaceiris/actions-gh-pages@v3
  with:
    github_token: ${{ secrets.GITHUB_TOKEN }}
    publish_dir: ./site
    force_orphan: true