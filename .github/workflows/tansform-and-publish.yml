name: DITA to SPA Transformation

# Trigger on pushes to the main branch or manual workflow dispatch
on:
  push:
    branches: [ main ]
    paths:
      - 'dita-source/**'        # Only run when DITA content changes
      - '.github/workflows/**'   # Or when workflow itself changes
  workflow_dispatch:            # Allow manual trigger

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write           # Needed for GitHub Pages deployment
    steps:
      # Step 1: Checkout repository 
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install DITA-OT
      - name: Set up DITA-OT
        run: |
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # Step 4: List DITA files for verification
      - name: List DITA files
        run: |
          echo "DITA files in repository:"
          find dita-source -name "*.dita" -o -name "*.ditamap" | sort
          echo "--------------------------------------"

      # Step 5: Transform DITA to HTML5
      - name: Transform DITA to HTML5
        run: |
          ./dita-ot-4.0.2/bin/dita --input="dita-source/automotive.ditamap" --format=html5 --output=./site --nav-toc=partial
          echo "DITA transformation complete"
          
          # Create content directory for SPA fragments
          mkdir -p ./site/content
          
          # Debug information
          echo "Generated files:"
          find ./site -type f | sort

      # Step 6: Process HTML files into content fragments
      - name: Process HTML Content
        run: |
          # Process each HTML file to extract content only
          for file in ./site/*.html; do
            # Skip processing if this is the index.html file we'll create later
            if [[ "$file" == "./site/index.html" ]]; then
              continue
            fi
            
            filename=$(basename "$file")
            id="${filename%.html}"
            echo "Processing $filename (ID: $id)"
            
            # Extract content from file (body content excluding navigation)
            content=$(sed -n '/<body/,/<\/body>/p' "$file" | 
                      sed '/<body/d;/<\/body>/d' | 
                      awk '
                        BEGIN { skip=0; count=0; }
                        /<div class=".*\bnav\b.*">/ { skip=1; }
                        /<\/div>/ { if (skip==1) { skip=0; } }
                        { if (skip == 0) print $0; }
                      ')
            
            # Get title from the original file
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            if [ -z "$title" ]; then
              # Create a title from the filename if none found
              title=$(echo "$id" | tr '_-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi
            
            # Create a clean HTML fragment file in the content directory
            echo "$content" > "./site/content/$id.html"
            
            # Add to the content manifest
            echo "  \"$id\": { \"title\": \"$title\" }," >> ./site/content-list.tmp
          done

      # Step 7: Create navigation configuration exactly matching screenshot
      - name: Create Navigation Config
        run: |
          mkdir -p ./site/js ./site/css
          
          # Create navigation structure exactly matching the screenshot
          cat > ./site/js/navigation-config.js << 'EOF'
          // Navigation structure based on your DITA files
          const navigationConfig = [
            {
              id: "automotive-theories",
              title: "Automotive Theories",
              children: [
                { id: "history-of-automobiles", title: "History of Automobiles" },
                { id: "types-of-vehicles", title: "Types of Vehicles" },
                { id: "automobile-fundamentals", title: "Automobile Fundamentals" },
                { 
                  id: "major-vehicle-components", 
                  title: "Major Vehicle Components",
                  children: [
                    { id: "electrical-systems", title: "Electrical Systems" },
                    { id: "engine-systems", title: "Engine Systems" },
                    { id: "electric-vehicles", title: "Electric Vehicles" },
                    { id: "braking-systems", title: "Braking Systems" }
                  ]
                }
              ]
            },
            { id: "basic-maintenance", title: "Basic Maintenance" },
            { id: "vehicle-maintenance", title: "Vehicle Maintenance" },
            { id: "emergency-repairs", title: "Emergency Repairs" }
          ];
          EOF
          
          # Create content manifest from processed content
          echo "// Content manifest - maps IDs to content files" > ./site/js/content-manifest.js
          echo "const contentManifest = {" >> ./site/js/content-manifest.js
          
          # Add entries from our temp file if it exists
          if [ -f "./site/content-list.tmp" ]; then
            cat ./site/content-list.tmp >> ./site/js/content-manifest.js
          fi
          
          # Add specific ID mappings to ensure all navigation items have content
          echo "  \"automotive-theories\": { \"title\": \"Automotive Theories\" }," >> ./site/js/content-manifest.js
          echo "  \"major-vehicle-components\": { \"title\": \"Major Vehicle Components\" }," >> ./site/js/content-manifest.js
          echo "  \"history-of-automobiles\": { \"title\": \"History of Automobiles\" }," >> ./site/js/content-manifest.js
          echo "  \"types-of-vehicles\": { \"title\": \"Types of Vehicles\" }," >> ./site/js/content-manifest.js
          echo "  \"automobile-fundamentals\": { \"title\": \"Automobile Fundamentals\" }," >> ./site/js/content-manifest.js
          echo "  \"electrical-systems\": { \"title\": \"Electrical Systems\" }," >> ./site/js/content-manifest.js
          echo "  \"engine-systems\": { \"title\": \"Engine Systems\" }," >> ./site/js/content-manifest.js
          echo "  \"electric-vehicles\": { \"title\": \"Electric Vehicles\" }," >> ./site/js/content-manifest.js
          echo "  \"braking-systems\": { \"title\": \"Braking Systems\" }," >> ./site/js/content-manifest.js
          echo "  \"basic-maintenance\": { \"title\": \"Basic Maintenance\" }," >> ./site/js/content-manifest.js
          echo "  \"vehicle-maintenance\": { \"title\": \"Vehicle Maintenance\" }," >> ./site/js/content-manifest.js
          echo "  \"emergency-repairs\": { \"title\": \"Emergency Repairs\" }," >> ./site/js/content-manifest.js
          
          # Close the manifest object with default entry
          echo "  \"default\": { \"title\": \"Automotive Documentation\" }" >> ./site/js/content-manifest.js
          echo "};" >> ./site/js/content-manifest.js
          
          # Clean up temp file
          rm -f ./site/content-list.tmp

      # Step 8: Create ID mapping function to handle filename variations
      - name: Create ID Mapping Function
        run: |
          cat > ./site/js/id-mapper.js << 'EOF'
          // ID mapping function to handle various filename patterns
          const idMappings = {
            // Map navigation IDs to possible content file names
            // Many-to-one mappings to handle different naming conventions
            
            // Engine Systems variations
            "engine-systems": ["engine-systems", "engines", "engine_systems", "engine", "engine-system"],
            
            // Electric Vehicles variations
            "electric-vehicles": ["electric-vehicles", "evs", "electric_vehicles", "ev", "electric-vehicle"],
            
            // Other potential variations
            "electrical-systems": ["electrical-systems", "electrical", "electrical_systems", "electrical-system"],
            "braking-systems": ["braking-systems", "brakes", "braking_systems", "braking"],
            "automobile-fundamentals": ["automobile-fundamentals", "car_basics", "car-basics", "automobile_fundamentals"],
            "history-of-automobiles": ["history-of-automobiles", "car_history", "car-history", "history"],
            "types-of-vehicles": ["types-of-vehicles", "car_types", "car-types", "types"],
            "basic-maintenance": ["basic-maintenance", "basic_maintenance", "maintenance-basic"],
            "vehicle-maintenance": ["vehicle-maintenance", "car_maintenance", "car-maintenance"],
            "emergency-repairs": ["emergency-repairs", "emergency_repairs", "repairs"]
          };
          
          // Function to try all possible file names for a given ID
          async function tryAllPossibleFiles(baseId, basePath = '') {
            // Get all possible filenames for this ID
            const possibleIds = idMappings[baseId] || [baseId];
            
            // Try each possible filename
            for (const id of possibleIds) {
              try {
                const contentPath = `${basePath}/content/${id}.html`;
                console.log(`[DITA-SPA] Trying path: ${contentPath}`);
                
                const response = await fetch(contentPath);
                if (response.ok) {
                  const content = await response.text();
                  if (content && content.trim() !== '') {
                    console.log(`[DITA-SPA] Successfully loaded content from: ${contentPath}`);
                    return content;
                  }
                }
              } catch (error) {
                console.log(`[DITA-SPA] Failed to load ${id}.html: ${error.message}`);
              }
            }
            
            // If we get here, all attempts failed
            throw new Error(`Could not load content for ${baseId} after trying all possible filenames`);
          }
          EOF

      # Step 9: Create SPA CSS
      - name: Create SPA CSS
        run: |
          cat > ./site/css/style.css << 'EOF'
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            display: flex;
            height: 100vh;
            width: 100%;
            overflow: hidden;
          }
          
          .sidebar {
            width: 250px;
            background-color: #f5f5f5;
            padding: 20px;
            height: 100vh;
            overflow-y: auto;
            border-right: 1px solid #ddd;
          }
          
          .main-content {
            flex: 1;
            padding: 20px;
            height: 100vh;
            overflow-y: auto;
          }
          
          .sidebar h2 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
          }
          
          .sidebar ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 15px;
          }
          
          .sidebar ul ul {
            padding-left: 20px;
            margin-top: 5px;
          }
          
          .sidebar li {
            margin-bottom: 8px;
          }
          
          .sidebar a {
            color: #2c3e50;
            text-decoration: none;
            display: block;
            padding: 5px;
            border-radius: 4px;
            transition: background-color 0.2s;
            cursor: pointer;
          }
          
          .sidebar a:hover {
            background-color: #e0e0e0;
          }
          
          .sidebar a.active {
            background-color: #dbeafe;
            font-weight: bold;
          }
          
          /* Improve readability in main content */
          .main-content h1, .main-content h2, .main-content h3 {
            margin-top: 1em;
            margin-bottom: 0.5em;
          }
          
          .main-content p {
            margin-bottom: 1em;
          }
          
          .main-content img {
            max-width: 100%;
            height: auto;
          }
          
          #loading {
            display: none;
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
          }
          
          .loading #loading {
            display: block;
          }
          
          /* Add loading animation */
          .loading #content::before {
            content: "";
            display: block;
            width: 40px;
            height: 40px;
            position: absolute;
            top: 50%;
            left: 50%;
            margin-top: -20px;
            margin-left: -20px;
            border-radius: 50%;
            border: 3px solid #f3f3f3;
            border-top-color: #3498db;
            animation: spin 1s ease-in-out infinite;
          }
          
          @keyframes spin {
            to { transform: rotate(360deg); }
          }
          
          /* Error styling */
          .error {
            background-color: #fff8f8;
            border-left: 4px solid #e74c3c;
            padding: 15px;
            margin-bottom: 20px;
            color: #333;
          }
          
          .error h2 {
            color: #e74c3c;
            margin-top: 0;
          }
          
          /* Debug panel styling */
          #debug-panel {
            font-family: monospace;
            z-index: 1000;
            font-size: 12px;
            opacity: 0.9;
          }
          
          #debug-content div {
            border-bottom: 1px dotted #ccc;
            padding: 2px 0;
          }
          EOF

      # Step 10: Create SPA JavaScript Application with ID mapping
      - name: Create SPA Application
        run: |
          cat > ./site/js/app.js << 'EOF'
          // SPA Application with path handling for GitHub Pages and ID mapping
          
          // DOM Elements
          const contentEl = document.getElementById('content');
          const contentTitleEl = document.getElementById('content-title');
          const navigationEl = document.getElementById('navigation');
          
          // Base path handling for GitHub Pages
          const getBasePath = () => {
            // For GitHub Pages repository sites, we need to include the repo name in paths
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) {
                return '/' + pathSegments[1];
              }
            }
            return '';
          };
          
          // Current state
          let currentPage = null;
          const basePath = getBasePath();
          
          // Debug logging function
          function debug(message, data) {
            console.log(`[DITA-SPA] ${message}`, data || '');
            if (window.debugLog) {
              window.debugLog(message + (data ? ': ' + JSON.stringify(data) : ''));
            }
          }
          
          // Initialize the application
          function initApp() {
            debug('Initializing app with base path:', basePath);
            
            // Render navigation
            renderNavigation(navigationConfig);
            
            // Set up event listeners
            window.addEventListener('popstate', handlePopState);
            
            // Load initial page based on URL or default
            const initialPageId = getPageIdFromUrl() || "automotive-theories";
            debug('Initial page ID:', initialPageId);
            navigateToPage(initialPageId, false);
          }
          
          // Render the navigation menu
          function renderNavigation(items, parentEl = navigationEl) {
            debug('Rendering navigation items:', items.length);
            const ul = document.createElement('ul');
            
            items.forEach(item => {
              const li = document.createElement('li');
              
              const a = document.createElement('a');
              a.textContent = item.title;
              a.setAttribute('data-id', item.id);
              a.href = `#${item.id}`;
              a.addEventListener('click', (e) => {
                e.preventDefault();
                navigateToPage(item.id);
              });
              li.appendChild(a);
              
              // Recursively render children if any
              if (item.children && item.children.length > 0) {
                renderNavigation(item.children, li);
              }
              
              ul.appendChild(li);
            });
            
            parentEl.appendChild(ul);
          }
          
          // Navigate to a specific page
          function navigateToPage(pageId, pushState = true) {
            debug('Navigating to page:', pageId);
            
            // Update active state in navigation
            updateActiveNavItem(pageId);
            
            // Update the URL
            if (pushState) {
              history.pushState({ pageId }, '', `#${pageId}`);
            }
            
            // Show loading indicator
            document.body.classList.add('loading');
            
            // Update current page
            currentPage = pageId;
            
            // Load content
            loadContent(pageId)
              .then(content => {
                // Update title
                const title = getPageTitle(pageId);
                contentTitleEl.textContent = title;
                document.title = title;
                
                // Update content
                contentEl.innerHTML = content;
                
                // Hide loading indicator
                document.body.classList.remove('loading');
                debug('Content loaded successfully for:', pageId);
              })
              .catch(error => {
                console.error('Error loading content:', error);
                contentEl.innerHTML = `
                  <div class="error">
                    <h2>Content Not Found</h2>
                    <p>The requested content "${pageId}" could not be loaded.</p>
                    <p>Please select another topic from the navigation menu.</p>
                    <p><small>Technical details: ${error.message}</small></p>
                  </div>
                `;
                document.body.classList.remove('loading');
              });
          }
          
          // Load content for a page using ID mapping
          async function loadContent(pageId) {
            debug('Attempting to load content for:', pageId);
            
            try {
              // First try the direct ID
              const contentPath = `${basePath}/content/${pageId}.html`;
              debug('Fetching from URL:', contentPath);
              
              const response = await fetch(contentPath);
              if (response.ok) {
                const content = await response.text();
                if (content && content.trim() !== '') {
                  return content;
                }
              }
              
              // If direct ID fails, try all possible alternatives using the ID mapper
              if (typeof tryAllPossibleFiles === 'function') {
                debug('Direct fetch failed, trying alternative IDs');
                return await tryAllPossibleFiles(pageId, basePath);
              }
              
              throw new Error(`HTTP error! status: ${response.status}`);
            } catch (error) {
              debug('Error in loadContent:', error.message);
              
              // Last resort: try some common patterns manually
              try {
                // Try with hyphens instead of underscores
                const altId = pageId.replace(/_/g, '-');
                if (altId !== pageId) {
                  const altPath = `${basePath}/content/${altId}.html`;
                  debug('Trying alternative ID format:', altPath);
                  const altResponse = await fetch(altPath);
                  if (altResponse.ok) {
                    const content = await altResponse.text();
                    if (content && content.trim() !== '') {
                      return content;
                    }
                  }
                }
                
                // Try with underscores instead of hyphens
                const altId2 = pageId.replace(/-/g, '_');
                if (altId2 !== pageId && altId2 !== altId) {
                  const altPath2 = `${basePath}/content/${altId2}.html`;
                  debug('Trying another alternative ID format:', altPath2);
                  const altResponse2 = await fetch(altPath2);
                  if (altResponse2.ok) {
                    const content = await altResponse2.text();
                    if (content && content.trim() !== '') {
                      return content;
                    }
                  }
                }
              } catch (altError) {
                debug('Alternative ID attempts also failed');
              }
              
              throw error; // Re-throw the original error
            }
          }
          
          // Update active state in navigation
          function updateActiveNavItem(pageId) {
            // Remove active class from all nav items
            const allNavItems = document.querySelectorAll('.sidebar a');
            allNavItems.forEach(item => item.classList.remove('active'));
            
            // Add active class to current page nav item
            const activeItem = document.querySelector(`.sidebar a[data-id="${pageId}"]`);
            if (activeItem) {
              activeItem.classList.add('active');
              
              // Expand parent sections if needed
              let parent = activeItem.parentElement;
              while (parent && parent !== navigationEl) {
                if (parent.tagName === 'LI') {
                  const parentLink = parent.querySelector('a');
                  if (parentLink) {
                    parentLink.classList.add('active');
                  }
                }
                parent = parent.parentElement;
              }
            } else {
              debug('Warning: No navigation item found for:', pageId);
            }
          }
          
          // Handle popstate event (browser back/forward)
          function handlePopState(event) {
            const pageId = event.state?.pageId || getPageIdFromUrl() || 'default';
            debug('Popstate event, loading page:', pageId);
            navigateToPage(pageId, false);
          }
          
          // Get page ID from URL hash
          function getPageIdFromUrl() {
            return window.location.hash.substring(1) || null;
          }
          
          // Get page title from content manifest
          function getPageTitle(pageId) {
            if (!contentManifest[pageId]) {
              debug('Warning: No manifest entry for:', pageId);
              return pageId.split(/[-_]/).map(word => 
                word.charAt(0).toUpperCase() + word.slice(1)
              ).join(' ');
            }
            return contentManifest[pageId].title;
          }
          
          // Check content directory structure on load
          async function checkContentStructure() {
            try {
              debug('Checking for default content file...');
              const response = await fetch(`${basePath}/content/default.html`);
              if (response.ok) {
                debug('Default content exists, structure seems correct');
              } else {
                console.warn('Default content not found, may indicate path issues');
              }
            } catch (error) {
              console.error('Error checking content structure:', error);
            }
          }
          
          // Initialize the app when DOM is ready
          document.addEventListener('DOMContentLoaded', () => {
            debug('DOM loaded, initializing app...');
            checkContentStructure();
            initApp();
          });
          
          // Display loading error if content doesn't load within 5 seconds
          setTimeout(() => {
            if (document.body.classList.contains('loading')) {
              debug('Still loading after timeout, may indicate a problem');
              const errorMsg = document.createElement('div');
              errorMsg.className = 'error';
              errorMsg.innerHTML = `
                <h2>Content Loading Issue</h2>
                <p>The content is taking too long to load. This may indicate a path or configuration issue.</p>
                <p>Current page ID: ${currentPage}</p>
                <p>Try adding "?debug=true" to the URL for more information.</p>
              `;
              contentEl.appendChild(errorMsg);
            }
          }, 5000);
          EOF

      # Step 11: Create main index.html
      - name: Create Index HTML
        run: |
          cat > ./site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            
            <!-- Base path handling for GitHub Pages -->
            <script>
              // Dynamically set the base href based on deployment environment
              (function() {
                // For GitHub Pages repository sites
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    const basePath = '/' + pathSegments[1];
                    document.write('<base href="' + basePath + '/">');
                    console.log('[DITA-SPA] Base path set to:', basePath);
                  }
                }
              })();
              
              // Handle redirects from 404 page 
              (function() {
                var redirect = sessionStorage.redirect;
                delete sessionStorage.redirect;
                if (redirect && redirect !== location.href) {
                  var cleanPath = redirect.split('/').pop();
                  if (cleanPath) {
                    history.replaceState(null, null, "#" + cleanPath.replace('.html', ''));
                    console.log('[DITA-SPA] Redirected from:', redirect);
                  }
                }
              })();
            </script>
            
            <title>Automotive Documentation</title>
            <link rel="stylesheet" href="css/style.css">
            
            <!-- Error handling and diagnostics -->
            <script>
              window.onerror = function(message, source, lineno, colno, error) {
                console.error('[DITA-SPA] Error:', message, 'at', source, lineno, colno);
                document.getElementById('error-display') && 
                  (document.getElementById('error-display').innerHTML = 
                    '<p>Error: ' + message + '</p><p>Source: ' + source + ':' + lineno + '</p>');
                return false;
              };
            </script>
          </head>
          <body>
            <div class="sidebar">
              <h2>Navigation</h2>
              <div id="navigation"></div>
            </div>
            <div class="main-content">
              <h1 id="content-title">Loading...</h1>
              <div id="loading">Loading content...</div>
              <div id="content">
                <!-- Content will load here -->
                <!-- Initial loading message -->
                <div class="initial-loading">
                  <p>Initializing documentation viewer...</p>
                  <p><small>If content doesn't appear in a few seconds, check the console for errors.</small></p>
                </div>
              </div>
              <div id="error-display"></div>
            </div>
            
            <!-- Debug panel (hidden by default, can be shown with ?debug=true in URL) -->
            <div id="debug-panel" style="display: none; position: fixed; bottom: 0; right: 0; background: #f0f0f0; padding: 10px; border: 1px solid #ccc; max-width: 400px; max-height: 300px; overflow: auto; font-size: 12px;">
              <h4>Debug Information</h4>
              <div id="debug-content"></div>
            </div>
            
            <!-- Add debug panel toggle -->
            <script>
              if (location.search.includes('debug=true')) {
                document.getElementById('debug-panel').style.display = 'block';
                window.debugLog = function(msg) {
                  const panel = document.getElementById('debug-content');
                  if (panel) {
                    const line = document.createElement('div');
                    line.textContent = new Date().toISOString().substr(11, 8) + ': ' + msg;
                    panel.appendChild(line);
                    panel.scrollTop = panel.scrollHeight;
                  }
                  console.log('[DEBUG] ' + msg);
                };
                debugLog('Debug mode enabled');
                debugLog('URL: ' + location.href);
              } else {
                window.debugLog = function() {};
              }
            </script>
            
            <!-- Load JavaScript files -->
            <script src="js/id-mapper.js"></script>
            <script src="js/navigation-config.js"></script>
            <script src="js/content-manifest.js"></script>
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF

      # Step 12: Create 404.html page for SPA routing
      - name: Create 404 Page for SPA Routing
        run: |
          cat > ./site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redirecting...</title>
            <script>
              // Store the requested URL for processing after redirect
              sessionStorage.redirect = location.href;
              
              // Dynamically determine the correct base path
              function getBasePath() {
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    return '/' + pathSegments[1];
                  }
                }
                return '';
              }
              
              // Redirect to the main site with the correct base path
              const basePath = getBasePath();
              window.location.href = basePath + '/';
              
              // Log for debugging
              console.log('404 Redirect - Original URL:', location.href);
              console.log('404 Redirect - Base Path:', basePath);
              console.log('404 Redirect - Redirecting to:', basePath + '/');
            </script>
          </head>
          <body>
            <div style="text-align: center; font-family: Arial, sans-serif; margin-top: 100px;">
              <h1>Redirecting to documentation...</h1>
              <p>If you are not redirected automatically, <a href="/">click here</a>.</p>
            </div>
          </body>
          </html>
          EOF

      # Step 13: Debug Content Files
      - name: Debug Content Files
        run: |
          echo "Content directory listing:"
          ls -la ./site/content/
          echo "---------------------"
          
          # Check for specific problematic files
          for id in engine-systems engines engine_systems engine electrical-systems electrical electrical_systems electrical-system electric-vehicles evs electric_vehicles ev electric-vehicle braking-systems brakes braking_systems braking; do
            if [ -f "./site/content/$id.html" ]; then
              echo "✓ Found content file: $id.html"
            else
              echo "✗ Missing content file: $id.html"
            fi
          done

      # Step 14: Create Default Content and Placeholders with Multiple Variations
      - name: Create Default Content and Duplicates
        run: |
          # Create default/fallback content page
          mkdir -p ./site/content
          cat > ./site/content/default.html << 'EOF'
          <h1>Automotive Documentation</h1>
          <p>Welcome to the automotive documentation. Please select a topic from the navigation menu.</p>
          <p>This documentation provides information about various aspects of automotive technology, maintenance, and repair.</p>
          EOF
          
          # Create empty placeholder content files for each navigation item with multiple filename variations
          declare -A content_map
          content_map=(
            ["automotive-theories"]="<h1>Automotive Theories</h1><p>Explore the fundamental theories and concepts behind automotive technology.</p>"
            ["history-of-automobiles"]="<h1>History of Automobiles</h1><p>Learn about the rich history and evolution of automobiles through the decades.</p>"
            ["types-of-vehicles"]="<h1>Types of Vehicles</h1><p>Discover the different types and classifications of vehicles.</p>"
            ["automobile-fundamentals"]="<h1>Automobile Fundamentals</h1><p>Understand the basic principles and components that make up a modern automobile.</p>"
            ["major-vehicle-components"]="<h1>Major Vehicle Components</h1><p>An overview of the primary systems and components in modern vehicles.</p>"
            ["electrical-systems"]="<h1>Electrical Systems</h1><p>Learn about the electrical systems that power vehicle functions.</p>"
            ["engine-systems"]="<h1>Engine Systems</h1><p>Explore the mechanics and operation of different engine types.</p>"
            ["electric-vehicles"]="<h1>Electric Vehicles</h1><p>Understand the technology behind modern electric vehicles.</p>"
            ["braking-systems"]="<h1>Braking Systems</h1><p>Learn how vehicle braking systems function and their components.</p>"
            ["basic-maintenance"]="<h1>Basic Maintenance</h1><p>Essential maintenance tasks for keeping your vehicle in good condition.</p>"
            ["vehicle-maintenance"]="<h1>Vehicle Maintenance</h1><p>Comprehensive guide to maintaining various vehicle systems.</p>"
            ["emergency-repairs"]="<h1>Emergency Repairs</h1><p>Quick fixes and temporary repairs for common roadside emergencies.</p>"
          )
          
          # Create multiple filename variations for each content file
          for id in "${!content_map[@]}"; do
            content="${content_map[$id]}"
            
            # Standard hyphenated version
            echo "$content" > "./site/content/$id.html"
            echo "Created $id.html"
            
            # Underscore version
            underscore_id="${id//-/_}"
            echo "$content" > "./site/content/$underscore_id.html"
            echo "Created $underscore_id.html"
            
            # Simplified version (last part only)
            simple_id=$(echo "$id" | awk -F'-' '{print $NF}')
            if [[ "$simple_id" != "$id" ]]; then
              echo "$content" > "./site/content/$simple_id.html"
              echo "Created $simple_id.html"
            fi
          done
          
          # Special cases for engines
          echo "${content_map["engine-systems"]}" > "./site/content/engines.html"
          echo "Created engines.html"
          
          # Special cases for electric vehicles
          echo "${content_map["electric-vehicles"]}" > "./site/content/evs.html"
          echo "Created evs.html"
          
          # Special case for braking systems
          echo "${content_map["braking-systems"]}" > "./site/content/brakes.html"
          echo "Created brakes.html"

      # Step 15: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true  # Creates a clean commit without history