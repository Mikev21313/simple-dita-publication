name: DITA to SPA with Branch Preview System

on:
  push:
    branches:
      - main      
      - "**"      
      - "!gh-pages" 
    tags-ignore:
      - "**"      
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Extract branch information
      - name: Extract branch information
        id: branch
        run: |
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr '/' '-' | tr '[:upper:]' '[:lower:]')
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "CURRENT_DATE=${CURRENT_DATE}" >> $GITHUB_ENV
          echo "Branch name: ${BRANCH_NAME}"
          
          # Extract branch author and commit message for review info
          AUTHOR=$(git log -1 --pretty=format:'%an')
          COMMIT_MSG=$(git log -1 --pretty=format:'%s')
          COMMIT_SHA=$(git log -1 --pretty=format:'%h')
          
          echo "AUTHOR=${AUTHOR}" >> $GITHUB_ENV
          echo "COMMIT_MSG=${COMMIT_MSG}" >> $GITHUB_ENV
          echo "COMMIT_SHA=${COMMIT_SHA}" >> $GITHUB_ENV
          
          # Detect if this is a PR branch
          PR_NUMBER=$(gh pr list --head ${BRANCH_NAME} --json number -q '.[0].number' || echo "")
          if [ ! -z "$PR_NUMBER" ]; then
            echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_ENV
            echo "PR branch detected: PR #${PR_NUMBER}"
          fi

      # Step 3: Set up Java and DITA-OT
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up DITA-OT
        run: |
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # Step 4: Transform DITA to HTML
      - name: Transform DITA to HTML
        run: |
          # Using HTML5 format with parameters for better output
          ./dita-ot-4.0.2/bin/dita --input=dita-source/automotive.ditamap --format=html5 --output=./site
          echo "DITA transformation complete"
          
          # Create content directory for SPA fragments
          mkdir -p ./site/content
          
          # Process each HTML file to extract content
          for file in ./site/*.html; do
            # Skip processing if this is the index.html we'll create later
            if [[ "$file" == "./site/index.html" ]]; then
              continue
            fi
            
            filename=$(basename "$file")
            id="${filename%.html}"
            echo "Processing $filename (ID: $id)"
            
            # Extract content from file 
            content=$(sed -n '/<body/,/<\/body>/p' "$file" | 
                     sed '/<body/d;/<\/body>/d' | 
                     sed '/<header/,/<\/header>/d' | 
                     sed '/<nav/,/<\/nav>/d' | 
                     sed '/<footer/,/<\/footer>/d')
            
            # Get title from the original file
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '_' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi
            
            # Create content file
            echo "$content" > "./site/content/$id.html"
          done

      # Step 5: Create hierarchical navigation from ditamap
      - name: Extract Navigation from DITAMAP
        run: |
          echo "Extracting navigation from DITAMAP"
          
          # Create a simple XSLT to extract the navigation structure
          cat > extract-nav.xsl << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            <xsl:output method="text"/>
            
            <xsl:template match="/">
              <xsl:text>const navigationConfig = [&#10;</xsl:text>
              <xsl:apply-templates select="//topicref"/>
              <xsl:text>];&#10;</xsl:text>
            </xsl:template>
            
            <xsl:template match="topicref">
              <xsl:text>  {&#10;</xsl:text>
              <xsl:text>    "id": "</xsl:text>
              <xsl:value-of select="translate(@href, '.dita', '')"/>
              <xsl:text>",&#10;</xsl:text>
              <xsl:text>    "title": "</xsl:text>
              <xsl:value-of select="@navtitle"/>
              <xsl:text>",&#10;</xsl:text>
              
              <xsl:if test="topicref">
                <xsl:text>    "children": [&#10;</xsl:text>
                <xsl:apply-templates select="topicref"/>
                <xsl:text>    ]&#10;</xsl:text>
              </xsl:if>
              
              <xsl:text>  }</xsl:text>
              <xsl:if test="position() != last()">
                <xsl:text>,&#10;</xsl:text>
              </xsl:if>
            </xsl:template>
          </xsl:stylesheet>
          EOF
          
          # Run the XSLT transform
          xsltproc extract-nav.xsl dita-source/automotive.ditamap > ./site/js/navigation-config.js
          
          # Also create a content mapping
          echo "// Content manifest - maps IDs to content files" > ./site/js/content-manifest.js
          echo "const contentManifest = {" >> ./site/js/content-manifest.js
          
          # Add entries from generated content
          for file in ./site/content/*.html; do
            filename=$(basename "$file" .html)
            title=$(grep -o "<h1>.*</h1>" "$file" | sed 's/<h1>\(.*\)<\/h1>/\1/' | head -1)
            if [ -z "$title" ]; then
              title=$(echo "$filename" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi
            echo "  \"$filename\": { \"title\": \"$title\" }," >> ./site/js/content-manifest.js
          done
          
          # Close the manifest
          echo "  \"default\": { \"title\": \"Documentation\" }" >> ./site/js/content-manifest.js
          echo "};" >> ./site/js/content-manifest.js

      # Step 6: Create SPA CSS and JavaScript
      - name: Create SPA assets
        run: |
          # Create CSS file
          cat > ./site/css/style.css << 'EOF'
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }
          
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            display: flex;
            height: 100vh;
            width: 100%;
            overflow: hidden;
          }
          
          .review-banner {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background-color: #f0f8ff;
            border-bottom: 1px solid #007bff;
            padding: 10px 20px;
            z-index: 1000;
            display: flex;
            justify-content: space-between;
            align-items: center;
          }
          
          .review-banner-text {
            font-size: 14px;
          }
          
          .review-banner-buttons {
            display: flex;
            gap: 10px;
          }
          
          .review-banner-buttons button {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
          }
          
          .approve-btn {
            background-color: #28a745;
            color: white;
          }
          
          .reject-btn {
            background-color: #dc3545;
            color: white;
          }
          
          .comment-btn {
            background-color: #007bff;
            color: white;
          }
          
          .sidebar {
            width: 250px;
            background-color: #f5f5f5;
            padding: 20px;
            height: 100vh;
            overflow-y: auto;
            border-right: 1px solid #ddd;
          }
          
          .main-content {
            flex: 1;
            padding: 20px;
            height: 100vh;
            overflow-y: auto;
            margin-top: 40px; /* Add space for review banner */
          }
          
          /* Improved navigation styling for hierarchy */
          .sidebar ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 5px;
          }
          
          .sidebar ul ul {
            padding-left: 20px;
            margin-top: 5px;
            margin-bottom: 0;
          }
          
          .sidebar li {
            margin-bottom: 5px;
            position: relative;
          }
          
          /* Toggle arrow styling */
          .sidebar .toggle-arrow {
            display: inline-block;
            width: 16px;
            height: 16px;
            position: absolute;
            left: 0;
            top: 5px;
            cursor: pointer;
            z-index: 10;
          }
          
          .sidebar .toggle-arrow:before {
            content: "â–¶";
            display: inline-block;
            font-size: 10px;
            transition: transform 0.2s;
          }
          
          .sidebar li.expanded > .toggle-arrow:before {
            transform: rotate(90deg);
          }
          
          .sidebar li.has-children > ul {
            display: none;
          }
          
          .sidebar li.has-children.expanded > ul {
            display: block;
          }
          
          .sidebar a {
            color: #2c3e50;
            text-decoration: none;
            display: block;
            padding: 5px 5px 5px 20px; /* Add left padding for arrow */
            border-radius: 4px;
            transition: background-color 0.2s;
            cursor: pointer;
          }
          
          .sidebar a:hover {
            background-color: #e0e0e0;
          }
          
          .sidebar a.active {
            background-color: #dbeafe;
            font-weight: bold;
          }
          
          /* Content styling */
          .main-content h1, .main-content h2, .main-content h3 {
            margin-top: 1em;
            margin-bottom: 0.5em;
          }
          
          .main-content p {
            margin-bottom: 1em;
          }
          
          /* Comment system styling */
          .comment-box {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 300px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: none;
            z-index: 1000;
          }
          
          .comment-box-header {
            background: #f5f5f5;
            padding: 10px;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;
          }
          
          .comment-box-content {
            padding: 10px;
          }
          
          .comment-box textarea {
            width: 100%;
            min-height: 100px;
            margin-bottom: 10px;
            padding: 5px;
          }
          
          .comment-box-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
          }
          
          .comment-list {
            border-top: 1px solid #eee;
            margin-top: 10px;
            padding-top: 10px;
          }
          
          .comment-item {
            padding: 10px;
            border-bottom: 1px solid #eee;
          }
          
          .comment-meta {
            font-size: 12px;
            color: #666;
            margin-bottom: 5px;
          }
          
          .comment-text {
            font-size: 14px;
          }
          
          /* Mobile responsiveness */
          @media (max-width: 768px) {
            body {
              flex-direction: column;
              height: auto;
            }
            
            .sidebar {
              width: 100%;
              height: auto;
              max-height: 40vh;
            }
            
            .main-content {
              height: auto;
              min-height: 60vh;
            }
            
            .review-banner {
              flex-direction: column;
              align-items: flex-start;
              padding: 5px;
            }
            
            .review-banner-buttons {
              margin-top: 5px;
            }
          }
          EOF
          
          # Create JavaScript for SPA
          cat > ./site/js/app.js << 'EOF'
          // SPA Application with review functionality
          
          // DOM Elements
          const contentEl = document.getElementById('content');
          const contentTitleEl = document.getElementById('content-title');
          const navigationEl = document.getElementById('navigation');
          const reviewBannerEl = document.getElementById('review-banner');
          const commentBoxEl = document.getElementById('comment-box');
          
          // Base path handling for GitHub Pages
          const getBasePath = () => {
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) {
                return '/' + pathSegments[1];
              }
            }
            return '';
          };
          
          // Current state
          let currentPage = null;
          const basePath = getBasePath();
          
          // Review information
          const branchInfo = {
            name: document.body.getAttribute('data-branch-name') || 'unknown',
            author: document.body.getAttribute('data-author') || 'unknown',
            commitMsg: document.body.getAttribute('data-commit-msg') || 'unknown',
            commitSha: document.body.getAttribute('data-commit-sha') || 'unknown',
            prNumber: document.body.getAttribute('data-pr-number') || null
          };
          
          // Debug logging function
          function debug(message, data) {
            console.log(`[DITA-SPA] ${message}`, data || '');
          }
          
          // Initialize the application
          function initApp() {
            debug('Initializing app with base path:', basePath);
            
            // Render navigation
            renderNavigation(navigationConfig);
            
            // Setup review banner if in review mode
            setupReviewBanner();
            
            // Set up event listeners
            window.addEventListener('popstate', handlePopState);
            
            // Load initial page based on URL or default
            const initialPageId = getPageIdFromUrl() || navigationConfig[0].id;
            debug('Initial page ID:', initialPageId);
            navigateToPage(initialPageId, false);
            
            // Set up comment box functionality
            setupCommentBox();
          }
          
          // Setup review banner
          function setupReviewBanner() {
            if (reviewBannerEl) {
              const bannerTextEl = reviewBannerEl.querySelector('.review-banner-text');
              
              if (bannerTextEl) {
                let bannerText = `Reviewing branch: ${branchInfo.name}`;
                if (branchInfo.prNumber) {
                  bannerText += ` (PR #${branchInfo.prNumber})`;
                }
                bannerText += ` - Latest commit: ${branchInfo.commitMsg} (${branchInfo.commitSha}) by ${branchInfo.author}`;
                
                bannerTextEl.textContent = bannerText;
              }
              
              // Set up button event listeners
              const approveBtn = reviewBannerEl.querySelector('.approve-btn');
              const rejectBtn = reviewBannerEl.querySelector('.reject-btn');
              const commentBtn = reviewBannerEl.querySelector('.comment-btn');
              
              if (approveBtn) {
                approveBtn.addEventListener('click', () => {
                  alert('Approved! In a real implementation, this would trigger an API call to approve the PR or branch.');
                });
              }
              
              if (rejectBtn) {
                rejectBtn.addEventListener('click', () => {
                  alert('Rejected! In a real implementation, this would trigger an API call to request changes on the PR or branch.');
                });
              }
              
              if (commentBtn) {
                commentBtn.addEventListener('click', () => {
                  toggleCommentBox();
                });
              }
            }
          }
          
          // Set up comment box
          function setupCommentBox() {
            if (commentBoxEl) {
              const closeBtn = commentBoxEl.querySelector('.close-btn');
              const submitBtn = commentBoxEl.querySelector('.submit-btn');
              const commentTextarea = commentBoxEl.querySelector('textarea');
              
              if (closeBtn) {
                closeBtn.addEventListener('click', () => {
                  commentBoxEl.style.display = 'none';
                });
              }
              
              if (submitBtn && commentTextarea) {
                submitBtn.addEventListener('click', () => {
                  const commentText = commentTextarea.value.trim();
                  if (commentText) {
                    // In a real implementation, this would post to an API
                    alert(`Comment submitted: ${commentText}`);
                    commentTextarea.value = '';
                    commentBoxEl.style.display = 'none';
                  }
                });
              }
            }
          }
          
          // Toggle comment box
          function toggleCommentBox() {
            if (commentBoxEl) {
              if (commentBoxEl.style.display === 'none' || !commentBoxEl.style.display) {
                commentBoxEl.style.display = 'block';
              } else {
                commentBoxEl.style.display = 'none';
              }
            }
          }
          
          // Render the navigation menu with hierarchy
          function renderNavigation(items, parentEl = navigationEl) {
            const ul = document.createElement('ul');
            
            items.forEach(item => {
              const li = document.createElement('li');
              
              // Add class if item has children
              if (item.children && item.children.length > 0) {
                li.classList.add('has-children');
                
                // Create a toggle arrow element
                const toggle = document.createElement('span');
                toggle.className = 'toggle-arrow';
                toggle.addEventListener('click', (e) => {
                  e.stopPropagation();
                  li.classList.toggle('expanded');
                });
                li.appendChild(toggle);
              }
              
              const a = document.createElement('a');
              a.textContent = item.title;
              a.setAttribute('data-id', item.id);
              a.href = `#${item.id}`;
              
              // Click handler for navigation
              a.addEventListener('click', (e) => {
                e.preventDefault();
                
                // If this is a parent item with children, toggle expansion
                if (item.children && item.children.length > 0) {
                  li.classList.toggle('expanded');
                }
                
                // Always navigate to the page
                navigateToPage(item.id);
              });
              
              li.appendChild(a);
              
              // Recursively render children if any
              if (item.children && item.children.length > 0) {
                renderNavigation(item.children, li);
              }
              
              ul.appendChild(li);
            });
            
            parentEl.appendChild(ul);
          }
          
          // Expand navigation path to the current page
          function expandNavigationTo(pageId) {
            // Helper to search for a page in the navigation tree
            function findPageInNavigation(items, id, path = []) {
              for (let i = 0; i < items.length; i++) {
                const item = items[i];
                const currentPath = [...path, item];
                
                if (item.id === id) {
                  return currentPath;
                }
                
                if (item.children && item.children.length > 0) {
                  const result = findPageInNavigation(item.children, id, currentPath);
                  if (result) {
                    return result;
                  }
                }
              }
              
              return null;
            }
            
            // Find the path to the page
            const path = findPageInNavigation(navigationConfig, pageId);
            if (!path) return;
            
            // Expand all parent items in the path
            for (let i = 0; i < path.length - 1; i++) {
              const item = path[i];
              const li = document.querySelector(`.sidebar li a[data-id="${item.id}"]`).parentElement;
              li.classList.add('expanded');
            }
          }
          
          // Navigate to a specific page
          function navigateToPage(pageId, pushState = true) {
            debug('Navigating to page:', pageId);
            
            // Update active state in navigation
            updateActiveNavItem(pageId);
            
            // Expand navigation to show the current page
            expandNavigationTo(pageId);
            
            // Update the URL
            if (pushState) {
              history.pushState({ pageId }, '', `#${pageId}`);
            }
            
            // Show loading indicator
            document.body.classList.add('loading');
            
            // Update current page
            currentPage = pageId;
            
            // Get alternate ID (convert underscores to hyphens)
            const altPageId = pageId.replace(/_/g, '-');
            
            // Load content
            loadContent(pageId)
              .then(content => {
                // Update title
                const title = getPageTitle(pageId);
                contentTitleEl.textContent = title;
                document.title = title;
                
                // Update content
                contentEl.innerHTML = content;
                
                // Add data attributes for content review
                contentEl.setAttribute('data-page-id', pageId);
                
                // Hide loading indicator
                document.body.classList.remove('loading');
                debug('Content loaded successfully');
              })
              .catch(error => {
                debug('Error loading content:', error.message);
                // Try alternate ID
                loadContent(altPageId)
                  .then(content => {
                    contentTitleEl.textContent = getPageTitle(pageId);
                    document.title = getPageTitle(pageId);
                    contentEl.innerHTML = content;
                    contentEl.setAttribute('data-page-id', pageId);
                    document.body.classList.remove('loading');
                    debug('Content loaded from alternate ID');
                  })
                  .catch(altError => {
                    console.error('Failed to load content:', altError);
                    contentEl.innerHTML = `
                      <div class="error">
                        <h2>Content Not Found</h2>
                        <p>The requested content "${pageId}" could not be loaded.</p>
                        <p>Please select another topic from the navigation menu.</p>
                      </div>
                    `;
                    document.body.classList.remove('loading');
                  });
              });
          }
          
          // Load content for a page
          async function loadContent(pageId) {
            const contentPath = `${basePath}/content/${pageId}.html`;
            debug('Fetching from URL:', contentPath);
            
            const response = await fetch(contentPath);
            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return await response.text();
          }
          
          // Update active state in navigation
          function updateActiveNavItem(pageId) {
            // Remove active class from all nav items
            const allNavItems = document.querySelectorAll('.sidebar a');
            allNavItems.forEach(item => item.classList.remove('active'));
            
            // Add active class to current page nav item
            const activeItem = document.querySelector(`.sidebar a[data-id="${pageId}"]`);
            if (activeItem) {
              activeItem.classList.add('active');
              
              // Make sure the parents are expanded
              let parent = activeItem.parentElement;
              while (parent && !parent.classList.contains('sidebar')) {
                if (parent.classList.contains('has-children')) {
                  parent.classList.add('expanded');
                }
                parent = parent.parentElement;
              }
            }
          }
          
          // Handle popstate event (browser back/forward)
          function handlePopState(event) {
            const pageId = event.state?.pageId || getPageIdFromUrl() || navigationConfig[0].id;
            debug('Popstate event, loading page:', pageId);
            navigateToPage(pageId, false);
          }
          
          // Get page ID from URL hash
          function getPageIdFromUrl() {
            return window.location.hash.substring(1) || null;
          }
          
          // Get page title from content manifest
          function getPageTitle(pageId) {
            if (!contentManifest[pageId]) {
              return pageId.split(/-|_/).map(word => 
                word.charAt(0).toUpperCase() + word.slice(1)
              ).join(' ');
            }
            return contentManifest[pageId].title;
          }
          
          // Initialize the app when DOM is ready
          document.addEventListener('DOMContentLoaded', initApp);
          EOF

      # Step 7: Create index.html with branch review info
      - name: Create Index HTML with Review Info
        run: |
          cat > ./site/index.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
            <meta http-equiv="Pragma" content="no-cache">
            <meta http-equiv="Expires" content="0">
            
            <!-- Branch information metadata -->
            <meta name="branch-name" content="${BRANCH_NAME}">
            <meta name="branch-author" content="${AUTHOR}">
            <meta name="branch-commit" content="${COMMIT_SHA}">
            <meta name="branch-commit-msg" content="${COMMIT_MSG}">
            <meta name="pr-number" content="${PR_NUMBER:-}">
            
            <!-- Base path handling for GitHub Pages -->
            <script>
              // Dynamically set the base href based on deployment environment
              (function() {
                // For GitHub Pages repository sites
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    const basePath = '/' + pathSegments[1];
                    document.write('<base href="' + basePath + '/">');
                    console.log('Base path set to:', basePath);
                  }
                }
              })();
            </script>
            
            <title>Documentation Review - ${BRANCH_NAME}</title>
            <link rel="stylesheet" href="css/style.css">
          </head>
          <body data-branch-name="${BRANCH_NAME}" data-author="${AUTHOR}" data-commit-msg="${COMMIT_MSG}" data-commit-sha="${COMMIT_SHA}" data-pr-number="${PR_NUMBER:-}">
            <!-- Review banner for branch previews -->
            <div id="review-banner" class="review-banner">
              <div class="review-banner-text">
                Reviewing branch: ${BRANCH_NAME}
              </div>
              <div class="review-banner-buttons">
                <button class="approve-btn">Approve</button>
                <button class="reject-btn">Request Changes</button>
                <button class="comment-btn">Comment</button>
              </div>
            </div>
            
            <div class="sidebar">
              <h2>Navigation</h2>
              <div id="navigation"></div>
            </div>
            
            <div class="main-content">
              <h1 id="content-title">Loading...</h1>
              <div id="loading">Loading content...</div>
              <div id="content">
                <!-- Content will load here -->
                <div class="initial-loading">
                  <p>Initializing documentation viewer...</p>
                </div>
              </div>
            </div>
            
            <!-- Comment box -->
            <div id="comment-box" class="comment-box">
              <div class="comment-box-header">
                <h3>Add Comment</h3>
                <button class="close-btn">Ã—</button>
              </div>
              <div class="comment-box-content">
                <textarea placeholder="Enter your comment here..."></textarea>
                <div class="comment-box-buttons">
                  <button class="submit-btn">Submit</button>
                </div>
                <div class="comment-list">
                  <!-- Comments will be listed here -->
                </div>
              </div>
            </div>
            
            <!-- Load JavaScript files -->
            <script src="js/navigation-config.js"></script>
            <script src="js/content-manifest.js"></script>
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF

      # Step 8: Create Branch Previews Index (Main branch only)
      - name: Create Branch Previews Index
        if: github.ref == 'refs/heads/main'
        run: |
          # Create branches directory if it doesn't exist
          mkdir -p ./site/previews
          
          # Create branch previews index
          cat > ./site/previews/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Documentation Branch Reviews</title>
            <style>
              body {
                font-family: Arial, sans-serif;
                max-width: 1000px;
                margin: 0 auto;
                padding: 20px;
                color: #333;
              }
              h1 {
                border-bottom: 1px solid #eee;
                padding-bottom: 10px;
                margin-bottom: 20px;
              }
              .branch-list {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                gap: 20px;
              }
              .branch-card {
                border: 1px solid #ddd;
                border-radius: 6px;
                padding: 15px;
                background: white;
                box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                transition: transform 0.2s, box-shadow 0.2s;
              }
              .branch-card:hover {
                transform: translateY(-3px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
              }
              .branch-name {
                font-weight: bold;
                margin-bottom: 10px;
                font-size: 18px;
              }
              .branch-meta {
                color: #666;
                font-size: 14px;
                margin-bottom: 15px;
              }
              .branch-meta div {
                margin-bottom: 3px;
              }
              .branch-actions {
                display: flex;
                justify-content: space-between;
              }
              .branch-view {
                display: inline-block;
                background: #0366d6;
                color: white;
                padding: 8px 16px;
                border-radius: 4px;
                text-decoration: none;
                font-weight: 500;
              }
              .branch-pr {
                display: inline-block;
                background: #28a745;
                color: white;
                padding: 8px 16px;
                border-radius: 4px;
                text-decoration: none;
                font-weight: 500;
              }
              .branch-pr.no-pr {
                background: #666;
                cursor: not-allowed;
              }
              .refresh-bar {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
              }
              .refresh-button {
                background: #0366d6;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
                font-weight: 500;
              }
              .last-update {
                color: #666;
                font-style: italic;
              }
              .empty-state {
                text-align: center;
                padding: 40px;
                color: #666;
                background: #f9f9f9;
                border-radius: 8px;
              }
              @media (max-width: 768px) {
                .branch-list {
                  grid-template-columns: 1fr;
                }
              }
            </style>
          </head>
          <body>
            <h1>Documentation Branch Reviews</h1>
            
            <div class="refresh-bar">
              <button id="refresh-button" class="refresh-button">Refresh Branch List</button>
              <span id="last-update" class="last-update">Last updated: Never</span>
            </div>
            
            <div id="branch-container" class="branch-list">
              <div class="empty-state">
                Loading branch previews...
              </div>
            </div>
            
            <script>
              document.addEventListener('DOMContentLoaded', () => {
                const refreshButton = document.getElementById('refresh-button');
                const lastUpdateElement = document.getElementById('last-update');
                const branchContainer = document.getElementById('branch-container');
                
                refreshButton.addEventListener('click', fetchBranches);
                
                async function fetchBranches() {
                  try {
                    // Add timestamp to prevent caching
                    const response = await fetch('./branches.json?' + Date.now());
                    const data = await response.json();
                    
                    if (data.last_updated) {
                      lastUpdateElement.textContent = 'Last updated: ' + new Date(data.last_updated).toLocaleString();
                    }
                    
                    if (!data.branches || data.branches.length === 0) {
                      branchContainer.innerHTML = `
                        <div class="empty-state">
                          No branch previews are currently available.
                        </div>
                      `;
                      return;
                    }
                    
                    let html = '';
                    data.branches.forEach(branch => {
                      const hasPR = branch.pr_number ? true : false;
                      
                      html += `
                        <div class="branch-card">
                          <div class="branch-name">${branch.name}</div>
                          <div class="branch-meta">
                            <div>Updated: ${new Date(branch.updated_at).toLocaleString()}</div>
                            <div>Author: ${branch.author || 'Unknown'}</div>
                            ${branch.commit_sha ? `<div>Commit: ${branch.commit_sha}</div>` : ''}
                            ${branch.pr_number ? `<div>PR: #${branch.pr_number}</div>` : ''}
                          </div>
                          <div class="branch-actions">
                            <a href="../preview/branch-${branch.slug || branch.name}/" class="branch-view">View Preview</a>
                            ${hasPR 
                              ? `<a href="https://github.com/${window.location.pathname.split('/')[1]}/pull/${branch.pr_number}" class="branch-pr">View PR</a>`
                              : `<span class="branch-pr no-pr">No PR</span>`
                            }
                          </div>
                        </div>
                      `;
                    });
                    
                    branchContainer.innerHTML = html;
                  } catch (error) {
                    console.error('Error fetching branches:', error);
                    branchContainer.innerHTML = `
                      <div class="empty-state">
                        Error loading branch data. Please try again.
                      </div>
                    `;
                  }
                }
                
                // Initial fetch
                fetchBranches();
              });
            </script>
          </body>
          </html>
          EOF
          
          # Create branches.json with current branch metadata
          cat > ./site/previews/branches.json << EOF
          {
            "last_updated": "${CURRENT_DATE}",
            "branches": [
              {
                "name": "${BRANCH_NAME}",
                "slug": "${BRANCH_NAME}",
                "updated_at": "${CURRENT_DATE}",
                "author": "${AUTHOR}",
                "commit_sha": "${COMMIT_SHA}",
                "commit_msg": "${COMMIT_MSG}"
                ${PR_NUMBER:+, "pr_number": "${PR_NUMBER}"}
              }
            ]
          }
          EOF

      # Step 9: Create branch metadata
      - name: Create branch metadata
        run: |
          mkdir -p ./branch-metadata
          cat > "./branch-metadata/${BRANCH_NAME}.json" << EOF
          {
            "name": "${GITHUB_REF#refs/heads/}",
            "slug": "${BRANCH_NAME}",
            "updated_at": "${CURRENT_DATE}",
            "author": "${AUTHOR}",
            "commit_sha": "${COMMIT_SHA}",
            "commit_msg": "${COMMIT_MSG}"
            ${PR_NUMBER:+, "pr_number": "${PR_NUMBER}"}
          }
          EOF

      # Step 10: Update branches.json with all available branch data (main branch only)
      - name: Update branches list (main branch only)
        if: github.ref == 'refs/heads/main'
        run: |
          # Create a composite branches.json from all branch metadata
          echo "{" > ./site/previews/branches.json
          echo "  \"last_updated\": \"${CURRENT_DATE}\"," >> ./site/previews/branches.json
          echo "  \"branches\": [" >> ./site/previews/branches.json
          
          # List all branch metadata files
          BRANCH_FILES=$(ls -1 ./branch-metadata/*.json 2>/dev/null || echo "")
          
          if [ ! -z "$BRANCH_FILES" ]; then
            FIRST=true
            for file in $BRANCH_FILES; do
              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                echo "," >> ./site/previews/branches.json
              fi
              # Extract content without the outer braces
              cat "$file" | sed '1d;$d' >> ./site/previews/branches.json
              echo "    }" >> ./site/previews/branches.json
            done
          fi
          
          echo "  ]" >> ./site/previews/branches.json
          echo "}" >> ./site/previews/branches.json

      # Step 11: Deploy main site
      - name: Deploy main site
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

      # Step 12: Deploy branch preview
      - name: Deploy branch preview
        if: github.ref != 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          destination_dir: preview/branch-${{ env.BRANCH_NAME }}

      # Step 13: Deploy branch metadata (all branches)
      - name: Deploy branch metadata
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./branch-metadata
          destination_dir: branch-metadata
          keep_files: true