name: DITA to SPA Transformation with Auto-Generated Navigation and Review System

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Install DITA-OT and required tools
      - name: Set up DITA-OT and XML tools
        run: |
          # Install XML tools
          sudo apt-get update
          sudo apt-get install -y libxml2-utils xsltproc

          # Install DITA-OT
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

          echo "DITA-OT installation complete"
          ls -la dita-ot-4.0.2/bin/

      # Step 4: Verify DITA source structure
      - name: Verify DITA Source Structure
        run: |
          echo "=== DITA Source Directory Structure ==="
          find dita-source -type f -name "*.dita" -o -name "*.ditamap" | sort
          
          echo "=== Checking for DITAMAP files ==="
          find dita-source -name "*.ditamap" | head -5
          
          # If no automotive.ditamap, look for any .ditamap file
          if [ ! -f "dita-source/automotive.ditamap" ]; then
            echo "automotive.ditamap not found, looking for any .ditamap file..."
            FIRST_DITAMAP=$(find dita-source -name "*.ditamap" | head -1)
            if [ -n "$FIRST_DITAMAP" ]; then
              echo "Found DITAMAP: $FIRST_DITAMAP"
              echo "DITAMAP_FILE=$FIRST_DITAMAP" >> $GITHUB_ENV
            else
              echo "No DITAMAP files found, creating a basic one..."
              mkdir -p dita-source
              cat > dita-source/automotive.ditamap << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE map PUBLIC "-//OASIS//DTD DITA Map//EN" "map.dtd">
          <map>
            <title>Automotive Documentation</title>
            <topicref href="welcome.dita" navtitle="Welcome"/>
            <topicref href="car-types.dita" navtitle="Car Types"/>
            <topicref href="maintenance.dita" navtitle="Basic Maintenance"/>
            <topicref href="components.dita" navtitle="Vehicle Components"/>
          </map>
          EOF
              echo "DITAMAP_FILE=dita-source/automotive.ditamap" >> $GITHUB_ENV
              
              # Create basic DITA files
              cat > dita-source/welcome.dita << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
          <topic id="welcome">
            <title>Welcome to Automotive Documentation</title>
            <body>
              <p>This is your comprehensive automotive documentation system with integrated review capabilities.</p>
              <section>
                <title>Getting Started</title>
                <ul>
                  <li>Browse topics using the navigation menu</li>
                  <li>Search for specific information</li>
                  <li>Use Review Mode for collaborative editing</li>
                </ul>
              </section>
            </body>
          </topic>
          EOF

              cat > dita-source/car-types.dita << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
          <topic id="car-types">
            <title>Types of Vehicles</title>
            <body>
              <p>Different classifications and categories of modern vehicles.</p>
              <section>
                <title>Passenger Cars</title>
                <p>Sedans, hatchbacks, and coupes designed for personal transportation.</p>
              </section>
              <section>
                <title>SUVs and Trucks</title>
                <p>Sport Utility Vehicles and pickup trucks for versatile use.</p>
              </section>
            </body>
          </topic>
          EOF

              cat > dita-source/maintenance.dita << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
          <topic id="maintenance">
            <title>Basic Maintenance</title>
            <body>
              <p>Essential maintenance tasks every vehicle owner should know.</p>
              <section>
                <title>Regular Inspections</title>
                <p>Checking fluids, tires, lights, and other critical components.</p>
              </section>
              <section>
                <title>Oil Changes</title>
                <p>Maintaining proper engine lubrication through regular oil changes.</p>
              </section>
            </body>
          </topic>
          EOF

              cat > dita-source/components.dita << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
          <topic id="components">
            <title>Vehicle Components</title>
            <body>
              <p>Understanding major vehicle systems and components.</p>
              <section>
                <title>Engine System</title>
                <p>The engine converts fuel into mechanical energy to power the vehicle.</p>
              </section>
              <section>
                <title>Transmission</title>
                <p>Transfers power from the engine to the wheels efficiently.</p>
              </section>
            </body>
          </topic>
          EOF
            fi
          else
            echo "DITAMAP_FILE=dita-source/automotive.ditamap" >> $GITHUB_ENV
          fi

      # Step 5: Parse DITAMAP to generate navigation structure
      - name: Parse DITAMAP Structure
        run: |
          DITAMAP_FILE="${DITAMAP_FILE:-dita-source/automotive.ditamap}"
          echo "Parsing DITAMAP structure from $DITAMAP_FILE"
          
          # Verify the DITAMAP file exists and show its content
          if [ -f "$DITAMAP_FILE" ]; then
            echo "=== DITAMAP Content ==="
            cat "$DITAMAP_FILE"
            echo "========================"
          else
            echo "ERROR: DITAMAP file not found: $DITAMAP_FILE"
            exit 1
          fi

          # Create XSLT transformation
          cat > extract-nav.xsl << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
            <xsl:output method="text"/>

            <xsl:template match="/">
              [
                <xsl:apply-templates select="//topicref[not(ancestor::topicref)]"/>
              ]
            </xsl:template>

            <xsl:template match="topicref">
              <xsl:variable name="href" select="@href"/>
              <xsl:variable name="filename">
                <xsl:choose>
                  <xsl:when test="contains($href, '/')">
                    <xsl:value-of select="substring-after(substring-before($href, '.'), '/')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="substring-before($href, '.')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              <xsl:variable name="id">
                <xsl:choose>
                  <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
                  <xsl:otherwise><xsl:value-of select="translate($filename, '_', '-')"/></xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              <xsl:variable name="title">
                <xsl:choose>
                  <xsl:when test="@navtitle"><xsl:value-of select="@navtitle"/></xsl:when>
                  <xsl:when test="topicmeta/navtitle"><xsl:value-of select="topicmeta/navtitle"/></xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="translate(translate($id, '-', ' '), '_', ' ')"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>

              {
                "id": "<xsl:value-of select="$id"/>",
                "title": "<xsl:value-of select="$title"/>",
                "filename": "<xsl:value-of select="$filename"/>",
                "href": "<xsl:value-of select="$href"/>"
                <xsl:if test="topicref">
                  ,
                  "children": [
                    <xsl:apply-templates select="topicref"/>
                  ]
                </xsl:if>
              }<xsl:if test="following-sibling::topicref">,</xsl:if>
            </xsl:template>
          </xsl:stylesheet>
          EOF

          # Apply XSLT to extract navigation from DITAMAP
          echo "Applying XSLT transformation..."
          xsltproc extract-nav.xsl "$DITAMAP_FILE" > ./navigation-structure.json

          # Clean up JSON
          sed -i 's/\r//g; s/\n//g; s/\t//g' ./navigation-structure.json
          
          echo "=== Generated Navigation Structure ==="
          cat ./navigation-structure.json
          echo ""
          echo "===================================="
          
          # Validate JSON
          if command -v python3 >/dev/null 2>&1; then
            echo "Validating JSON structure..."
            python3 -c "import json; json.loads(open('./navigation-structure.json').read()); print('JSON is valid')"
          fi

      # Step 6: Transform DITA to HTML
      - name: Transform DITA to HTML
        run: |
          DITAMAP_FILE="${DITAMAP_FILE:-dita-source/automotive.ditamap}"
          echo "Transforming DITA to HTML using $DITAMAP_FILE"
          
          # Run DITA-OT transformation
          ./dita-ot-4.0.2/bin/dita --input="$DITAMAP_FILE" --format=html5 --output=./site --args.input.dir=dita-source/
          
          echo "DITA transformation complete"
          
          # List generated HTML files
          echo "=== Generated HTML Files ==="
          find ./site -name "*.html" | sort
          echo "============================"

      # Step 7: Prepare directories and process images
      - name: Prepare Site Structure and Images
        run: |
          # Create required directories
          mkdir -p ./site/content
          mkdir -p ./site/images
          mkdir -p ./site/js
          mkdir -p ./site/css

          echo "=== Processing Images ==="
          
          # Copy all images from DITA source
          find ./dita-source -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -exec cp -v {} ./site/images/ \; || echo "No images found in dita-source"

          # Copy images from generated HTML output
          find ./site -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" -o -name "*.gif" -o -name "*.svg" \) -not -path "./site/images/*" -exec cp -v {} ./site/images/ \; || echo "No additional images found"

          # Create test images if none exist
          if [ ! "$(ls -A ./site/images 2>/dev/null)" ]; then
            echo "Creating placeholder images for testing"
            # Create a simple SVG placeholder
            cat > ./site/images/placeholder.svg << 'EOF'
          <svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
            <rect width="100%" height="100%" fill="#f0f0f0"/>
            <text x="50%" y="50%" font-family="Arial" font-size="16" fill="#666" text-anchor="middle" dy=".3em">Sample Image</text>
          </svg>
          EOF
            cp ./site/images/placeholder.svg ./site/images/test.png
          fi

          echo "Images in ./site/images/:"
          ls -la ./site/images/ || echo "No images directory"

      # Step 8: Process HTML content for SPA
      - name: Process HTML Content for SPA
        run: |
          echo "Processing HTML files for SPA structure..."

          # Process each HTML file
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            if [[ "$file" == "./site/index.html" ]]; then
              continue
            fi

            filename=$(basename "$file")
            id="${filename%.html}"
            hyphenated_id="${id//_/-}"
            
            echo "Processing: $filename -> content/$hyphenated_id.html"

            # Extract body content, remove navigation and headers
            content=$(sed -n '/<body/,/<\/body>/p' "$file" | 
                      sed '/<body/d;/<\/body>/d' |
                      sed '/<header/,/<\/header>/d' |
                      sed '/<nav/,/<\/nav>/d' |
                      sed '/<footer/,/<\/footer>/d' |
                      sed 's/<main[^>]*>//g' | 
                      sed 's/<\/main>//g')

            # Fix image paths
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="[^"]*\/([^\/]*\.(jpg|jpeg|png|gif|svg))"/<img\1src="images\/\2"/gi')
            content=$(echo "$content" | sed -E 's/<img([^>]*)src="([^\/]*\.(jpg|jpeg|png|gif|svg))"/<img\1src="images\/\2"/gi')

            # Create content file
            echo "$content" > "./site/content/$hyphenated_id.html"
            
            # Also create underscore version if different
            if [[ "$id" != "$hyphenated_id" ]]; then
              echo "$content" > "./site/content/$id.html"
            fi
          done

          echo "Content processing complete"
          echo "Generated content files:"
          ls -la ./site/content/ || echo "No content files generated"

      # Step 9: Generate content ID mapping
      - name: Generate Content ID Mapping
        run: |
          echo "Generating content ID mapping..."

          cat > ./site/js/content-id-map.js << 'EOF'
          // Auto-generated content ID mapping
          const contentIdMap = {
          EOF

          # Process each HTML file to create mapping
          find ./site -type f -name "*.html" | grep -v "index.html" | grep -v "404.html" | while read file; do
            filename=$(basename "$file" .html)
            id="${filename//_/-}"
            
            # Get title from file
            title=$(grep -o "<title>.*</title>" "$file" | sed 's/<title>\(.*\)<\/title>/\1/' | head -1)
            if [ -z "$title" ]; then
              title=$(echo "$id" | tr '-_' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')
            fi
            
            # Get content for search
            raw_content=$(cat "$file" | sed 's/<[^>]*>//g' | sed 's/&nbsp;/ /g' | tr '\n' ' ' | sed 's/  */ /g')
            
            # Escape quotes
            title=$(echo "$title" | sed 's/"/\\"/g')
            raw_content=$(echo "$raw_content" | sed 's/"/\\"/g')

            echo "  \"$id\": { \"title\": \"$title\", \"filename\": \"$filename\", \"content\": \"$raw_content\" }," >> ./site/js/content-id-map.js
          done

          cat >> ./site/js/content-id-map.js << 'EOF'
            "default": { "title": "Automotive Documentation", "filename": "", "content": "" }
          };
          EOF

          echo "Content ID mapping generated"

      # Step 10: Generate Navigation Configuration
      - name: Generate Navigation Configuration
        run: |
          echo "Generating navigation configuration..."

          cat > ./site/js/navigation-config.js << 'EOF'
          // Auto-generated navigation structure from DITAMAP
          const navigationConfig = 
          EOF

          cat ./navigation-structure.json >> ./site/js/navigation-config.js
          echo ";" >> ./site/js/navigation-config.js

          echo "Navigation configuration generated"
          echo "=== Final Navigation Config ==="
          cat ./site/js/navigation-config.js
          echo "==============================="

      # Step 11: Create CSS Styles
      - name: Create CSS Styles
        run: |
          cat > ./site/css/style.css << 'EOF'
          /* DITA SPA Styling with Review System */
          * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
          }

          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            display: flex;
            height: 100vh;
            width: 100%;
            overflow: hidden;
            color: #333;
            background-color: #f8f8f8;
          }

          /* Sidebar */
          .sidebar {
            width: 280px;
            background-color: #e0f7f7;
            padding: 15px;
            height: 100vh;
            overflow-y: auto;
            border-right: 1px solid #c0e0e0;
            display: flex;
            flex-direction: column;
            box-shadow: 2px 0 5px rgba(0,0,0,0.05);
          }

          .main-content {
            flex: 1;
            padding: 30px;
            height: 100vh;
            overflow-y: auto;
            background-color: #ffffff;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.02);
            position: relative;
          }

          .sidebar h2 {
            font-weight: 500;
            margin-top: 0;
            margin-bottom: 15px;
            color: #00747a;
            border-bottom: 2px solid #80cbc4;
            padding-bottom: 10px;
            font-size: 1.4em;
          }

          /* Navigation */
          .sidebar-nav {
            flex: 1;
            overflow-y: auto;
            margin-top: 15px;
          }

          .sidebar ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 5px;
          }

          .sidebar ul ul {
            padding-left: 20px;
            margin-top: 5px;
            margin-bottom: 0;
          }

          .sidebar li {
            margin-bottom: 6px;
            position: relative;
          }

          .sidebar .toggle-arrow {
            display: inline-block;
            width: 18px;
            height: 18px;
            position: absolute;
            left: 0;
            top: 4px;
            cursor: pointer;
            z-index: 10;
            color: #00747a;
          }

          .sidebar .toggle-arrow:before {
            content: "▶";
            display: inline-block;
            font-size: 10px;
            transition: transform 0.2s;
          }

          .sidebar li.expanded > .toggle-arrow:before {
            transform: rotate(90deg);
          }

          .sidebar li.has-children > ul {
            display: none;
          }

          .sidebar li.has-children.expanded > ul {
            display: block;
          }

          .sidebar a {
            color: #00747a;
            text-decoration: none;
            display: block;
            padding: 6px 5px 6px 22px;
            border-radius: 4px;
            transition: background-color 0.2s, color 0.2s;
            cursor: pointer;
            font-size: 0.95em;
          }

          .sidebar a:hover {
            background-color: #e1f5fe;
            color: #006064;
          }

          .sidebar a.active {
            background-color: #80deea;
            font-weight: bold;
            color: #006064;
            box-shadow: inset 3px 0 0 #00acc1;
          }

          /* Review Controls */
          .review-controls {
            border-top: 2px solid #80cbc4;
            padding-top: 15px;
            margin-top: 15px;
            display: flex;
            flex-direction: column;
            gap: 10px;
          }

          .review-controls h3 {
            color: #00747a;
            font-size: 1.1em;
            margin-bottom: 10px;
          }

          .review-mode-toggle {
            display: flex;
            gap: 5px;
          }

          .review-btn {
            padding: 10px 15px;
            border: 1px solid #00acc1;
            background: linear-gradient(135deg, #00acc1, #0097a7);
            color: white;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.95em;
            transition: all 0.3s;
            text-align: center;
            width: 100%;
          }

          .review-btn:hover {
            background: linear-gradient(135deg, #0097a7, #00838f);
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
          }

          .review-btn.active {
            background: linear-gradient(135deg, #ff6f00, #e65100);
            border-color: #ff6f00;
          }

          /* Search */
          .search-container {
            margin-bottom: 15px;
            display: flex;
            gap: 5px;
            width: 100%;
          }

          .search-container input[type="text"] {
            flex-grow: 1;
            padding: 8px 10px;
            border: 1px solid #b0e0e6;
            border-radius: 5px;
            font-size: 0.9em;
            outline: none;
          }

          .search-container button {
            padding: 8px 10px;
            background-color: #00acc1;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            min-width: 60px;
          }

          .search-results {
            list-style-type: none;
            padding: 0;
            margin: 15px 0;
            border-top: 1px solid #e0e0e0;
            border-bottom: 1px solid #e0e0e0;
            padding: 10px 0;
            max-height: 300px;
            overflow-y: auto;
            background-color: #f5f9f9;
          }

          .search-results li {
            margin-bottom: 10px;
            padding: 8px;
            border-bottom: 1px dashed #e0e0e0;
          }

          .search-results a {
            color: #0097a7;
            text-decoration: none;
            font-weight: bold;
            display: block;
            padding: 4px 0;
          }

          .highlight {
            background-color: #fff9c4;
            font-weight: bold;
          }

          /* Review Mode Restrictions */
          body:not(.review-mode) .review-toolbar,
          body:not(.review-mode) .comment-panel,
          body:not(.review-mode) .comment-dialog,
          body:not(.review-mode) .dialog-overlay,
          body:not(.review-mode) .image-modal,
          body:not(.review-mode) [data-comment-id],
          body:not(.review-mode) .comment-highlight,
          body:not(.review-mode) .suggestion-highlight,
          body:not(.review-mode) .image-comment-marker,
          body:not(.review-mode) .comment-tooltip {
            display: none !important;
          }

          /* Print Button */
          .main-print-button {
            position: fixed;
            top: 15px;
            right: 15px;
            background: linear-gradient(135deg, #00acc1, #0097a7);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9em;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            z-index: 999;
            display: flex;
            align-items: center;
            gap: 8px;
          }

          /* Review Mode Styles */
          .review-mode .main-print-button {
            background: linear-gradient(135deg, #ff9800, #f57c00);
          }

          .comment-panel {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            margin: 20px 0;
            padding: 20px;
            display: none;
          }

          .review-mode .comment-panel {
            display: block;
          }

          .comment-panel h3 {
            color: #495057;
            margin-bottom: 15px;
            font-size: 1.2em;
            border-bottom: 2px solid #007bff;
            padding-bottom: 8px;
          }

          .review-toolbar {
            background: linear-gradient(135deg, #2c5aa0, #1e3a8a);
            color: white;
            padding: 12px 20px;
            margin: 0 0 20px 0;
            display: none;
            align-items: center;
            border-radius: 6px;
          }

          .review-mode .review-toolbar {
            display: flex;
          }

          .comment-highlight {
            background-color: #e1f5fe;
            border-left: 3px solid #2196f3;
            padding: 2px 4px;
            margin: 2px 0;
            border-radius: 2px;
            cursor: pointer;
          }

          .suggestion-highlight {
            background-color: #fff3e0;
            border-left: 3px solid #ff9800;
            padding: 2px 4px;
            margin: 2px 0;
            border-radius: 2px;
            cursor: pointer;
          }

          /* Comment Dialog */
          .comment-dialog {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border: 2px solid #2c5aa0;
            border-radius: 8px;
            padding: 20px;
            width: 400px;
            max-width: 90vw;
            z-index: 2000;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            display: none;
          }

          .comment-dialog.show {
            display: block;
          }

          .dialog-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0,0,0,0.5);
            z-index: 1999;
            display: none;
          }

          .dialog-overlay.show {
            display: block;
          }

          .comment-dialog textarea {
            width: 100%;
            height: 100px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-family: inherit;
          }

          .dialog-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 15px;
          }

          .dialog-btn {
            padding: 8px 16px;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
          }

          .dialog-btn.primary {
            background: #2c5aa0;
            color: white;
            border-color: #2c5aa0;
          }

          .dialog-btn.secondary {
            background: #f5f5f5;
          }

          /* Image Modal */
          .image-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.9);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            padding: 20px;
          }

          .image-modal.show {
            display: flex;
          }

          .image-modal img {
            max-width: 90%;
            max-height: 90%;
            object-fit: contain;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.5);
          }

          .image-modal .close-btn {
            position: absolute;
            top: 20px;
            right: 30px;
            background: rgba(255,255,255,0.9);
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            font-size: 20px;
            cursor: pointer;
          }

          /* Content Styles */
          .main-content h1, .main-content h2, .main-content h3, .main-content h4 {
            font-weight: 500;
            margin-top: 1.5em;
            margin-bottom: 0.8em;
            color: #00838f;
          }

          .main-content h1 {
            font-size: 2em;
            border-bottom: 1px solid #e0e0e0;
            padding-bottom: 10px;
            margin-top: 0;
          }

          .main-content p {
            margin-bottom: 1em;
            line-height: 1.6;
          }

          .main-content img {
            max-width: 100%;
            height: auto;
            display: block;
            margin: 1em auto;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            cursor: pointer;
            transition: transform 0.2s ease;
          }

          .main-content img:hover {
            transform: scale(1.02);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
          }

          /* Tables */
          .main-content table {
            width: 100%;
            border-collapse: collapse;
            margin: 1.5em 0;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
          }
          
          .main-content th, .main-content td {
            border: 1px solid #b2dfdb;
            padding: 10px;
            text-align: left;
          }
          
          .main-content th {
            background-color: #e0f2f1;
            font-weight: bold;
            color: #00796b;
          }
          
          .main-content tr:nth-child(even) {
            background-color: #f5f9f9;
          }

          .main-content ul, .main-content ol {
            margin-left: 2em;
            margin-bottom: 1em;
          }

          /* Welcome Screen */
          .welcome-screen {
            text-align: center;
            padding: 40px 20px;
            color: #00838f;
          }

          .welcome-screen h2 {
            margin-bottom: 20px;
            font-size: 2em;
          }

          /* Loading */
          #loading {
            display: none;
            text-align: center;
            padding: 20px;
            font-style: italic;
            color: #666;
          }

          .loading #loading {
            display: block;
          }

          /* Error */
          .error {
            background-color: #ffebee;
            border-left: 4px solid #f44336;
            padding: 15px;
            margin-bottom: 20px;
            color: #333;
          }

          .error h2 {
            color: #d32f2f;
            margin-top: 0;
          }

          /* Responsive */
          @media (max-width: 768px) {
            body {
              flex-direction: column;
              height: auto;
            }

            .sidebar {
              width: 100%;
              height: auto;
              max-height: 40vh;
              border-right: none;
              border-bottom: 1px solid #b2ebf2;
            }

            .main-content {
              height: auto;
              min-height: 60vh;
            }
          }
          EOF

      # Step 12: Create JavaScript Application
      - name: Create JavaScript Application
        run: |
          cat > ./site/js/app.js << 'EOF'
          // DITA SPA Application with Review System

          // Debug logging
          function debug(message, data) {
            console.log(`[DITA-SPA] ${message}`, data || '');
          }

          // Base path handling
          const getBasePath = () => {
            if (location.hostname.includes('github.io')) {
              const pathSegments = location.pathname.split('/');
              if (pathSegments.length > 1) {
                return '/' + pathSegments[1];
              }
            }
            return '';
          };

          // Global variables
          let contentEl, contentTitleEl, navigationEl, searchInput, searchButton, searchResultsEl;
          let reviewToggleBtn;
          window.currentPage = null;
          window.reviewMode = false;
          window.reviewData = JSON.parse(localStorage.getItem('reviewData') || '{}');
          const basePath = getBasePath();

          // Initialize application
          function initApp() {
            debug('Initializing DITA SPA application');

            // Get DOM elements
            contentEl = document.getElementById('content');
            contentTitleEl = document.getElementById('content-title');
            navigationEl = document.getElementById('navigation');
            searchInput = document.getElementById('searchInput');
            searchButton = document.getElementById('searchButton');
            searchResultsEl = document.getElementById('searchResults');
            reviewToggleBtn = document.getElementById('reviewToggle');

            if (!contentEl || !contentTitleEl || !navigationEl) {
              console.error('Critical DOM elements not found');
              return;
            }

            // Remove loading class
            document.body.classList.remove('loading');

            // Initialize review system
            initReviewSystem();

            // Render navigation
            if (typeof navigationConfig !== 'undefined' && Array.isArray(navigationConfig)) {
              debug('Rendering navigation with', navigationConfig.length, 'items');
              renderNavigation(navigationConfig);
            } else {
              console.warn('Navigation config not available, creating fallback');
              createFallbackNavigation();
            }

            // Set up event listeners
            setupEventListeners();

            // Handle initial URL
            const initialPageId = getPageIdFromUrl();
            if (initialPageId) {
              navigateToPage(initialPageId, false);
            } else {
              showWelcomeScreen();
            }

            debug('Application initialized successfully');
          }

          // Create fallback navigation
          function createFallbackNavigation() {
            const fallbackNav = [
              { id: "welcome", title: "Welcome", filename: "welcome" },
              { id: "car-types", title: "Car Types", filename: "car-types" },
              { id: "maintenance", title: "Basic Maintenance", filename: "maintenance" },
              { id: "components", title: "Vehicle Components", filename: "components" }
            ];
            
            window.navigationConfig = fallbackNav;
            renderNavigation(fallbackNav);
          }

          // Set up event listeners
          function setupEventListeners() {
            window.addEventListener('popstate', handlePopState);
            
            if (searchButton && searchInput) {
              searchButton.addEventListener('click', performSearch);
              searchInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') performSearch();
              });
            }

            if (reviewToggleBtn) {
              reviewToggleBtn.addEventListener('click', toggleReviewMode);
            }

            const printButton = document.getElementById('mainPrintButton');
            if (printButton) {
              printButton.addEventListener('click', handlePrint);
            }
          }

          // Render navigation menu
          function renderNavigation(items, parentEl = navigationEl) {
            if (!parentEl) return;

            const ul = document.createElement('ul');
            items.forEach(item => {
              const li = document.createElement('li');

              if (item.children && item.children.length > 0) {
                li.classList.add('has-children');
                const toggle = document.createElement('span');
                toggle.className = 'toggle-arrow';
                toggle.addEventListener('click', (e) => {
                  e.stopPropagation();
                  li.classList.toggle('expanded');
                });
                li.appendChild(toggle);
              }

              const a = document.createElement('a');
              a.textContent = item.title;
              a.setAttribute('data-id', item.id);
              a.href = `#${item.id}`;
              a.addEventListener('click', (e) => {
                e.preventDefault();
                navigateToPage(item.id);
                if (searchResultsEl) searchResultsEl.innerHTML = '';
                if (searchInput) searchInput.value = '';
              });

              li.appendChild(a);

              if (item.children && item.children.length > 0) {
                renderNavigation(item.children, li);
              }

              ul.appendChild(li);
            });

            parentEl.appendChild(ul);
          }

          // Navigate to page
          function navigateToPage(pageId, pushState = true) {
            debug('Navigating to page:', pageId);

            if (!pageId) {
              showWelcomeScreen();
              return;
            }

            updateActiveNavItem(pageId);

            if (pushState) {
              history.pushState({ pageId }, '', `#${pageId}`);
            }

            document.body.classList.add('loading');
            window.currentPage = pageId;

            loadContent(pageId)
              .then(content => {
                const title = getPageTitle(pageId);
                contentTitleEl.textContent = title;
                document.title = title;
                contentEl.innerHTML = content;
                
                enhanceContent();
                
                if (window.reviewMode) {
                  initializeReviewForContent();
                  loadReviewDataForPage(pageId);
                }
                
                document.body.classList.remove('loading');
              })
              .catch(error => {
                debug('Error loading content:', error);
                showErrorContent(pageId);
              });
          }

          // Load content
          async function loadContent(pageId) {
            const contentPath = `${basePath}/content/${pageId}.html`;
            debug('Loading content from:', contentPath);

            try {
              const response = await fetch(contentPath);
              if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
              }
              return await response.text();
            } catch (error) {
              debug('Fetch failed, generating fallback content');
              return generateFallbackContent(pageId);
            }
          }

          // Generate fallback content
          function generateFallbackContent(pageId) {
            const title = getPageTitle(pageId);
            return `
              <h1>${title}</h1>
              <p>Welcome to the ${title} section of the automotive documentation.</p>
              <div style="background: #f0f8ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h3>📝 Review System Available</h3>
                <p>Click "📝 Start Review" in the sidebar to enable collaborative commenting features.</p>
                <ul>
                  <li>Select text to add comments or suggestions</li>
                  <li>Click images for contextual feedback</li>
                  <li>Export review data for external processing</li>
                </ul>
              </div>
              <p><em>Content for this section will be populated from your DITA source files.</em></p>
            `;
          }

          // Enhance content (make images clickable, etc.)
          function enhanceContent() {
            const images = contentEl.querySelectorAll('img');
            images.forEach(image => {
              image.addEventListener('click', function(e) {
                if (!window.reviewMode) {
                  showImageModal(image.src, image.alt || 'Image');
                }
              });
            });
          }

          // Show welcome screen
          function showWelcomeScreen() {
            contentTitleEl.textContent = 'Automotive Documentation';
            document.title = 'Automotive Documentation';

            contentEl.innerHTML = `
              <div class="welcome-screen">
                <h2>🚗 Welcome to Automotive Documentation</h2>
                <p>Your comprehensive automotive reference with collaborative review capabilities.</p>
                
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 30px 0;">
                  <div style="background: #e8f5e8; padding: 20px; border-radius: 8px;">
                    <h3>📚 Browse Content</h3>
                    <p>Select topics from the navigation menu or use the search function to find specific information.</p>
                  </div>
                  
                  <div style="background: #f0f8ff; padding: 20px; border-radius: 8px;">
                    <h3>📝 Review System</h3>
                    <p>Enable collaborative features by clicking "📝 Start Review" in the sidebar.</p>
                  </div>
                </div>
                
                <div style="background: #fff3cd; padding: 15px; border-radius: 8px;">
                  <p><strong>Getting Started:</strong> Choose a topic from the navigation menu to begin exploring the documentation.</p>
                </div>
              </div>
            `;

            document.body.classList.remove('loading');
          }

          // Show error content
          function showErrorContent(pageId) {
            contentEl.innerHTML = `
              <div class="error">
                <h2>Content Not Available</h2>
                <p>The content for "${pageId}" could not be loaded.</p>
                <p>Please try selecting another topic from the navigation menu.</p>
              </div>
            `;
            document.body.classList.remove('loading');
          }

          // Update active navigation item
          function updateActiveNavItem(pageId) {
            const allNavItems = document.querySelectorAll('.sidebar a');
            allNavItems.forEach(item => item.classList.remove('active'));

            const activeItem = document.querySelector(`.sidebar a[data-id="${pageId}"]`);
            if (activeItem) {
              activeItem.classList.add('active');
            }
          }

          // Get page title
          function getPageTitle(pageId) {
            if (typeof contentIdMap !== 'undefined' && contentIdMap[pageId]) {
              return contentIdMap[pageId].title;
            }

            // Check navigation config
            function findTitleInNav(items, id) {
              if (!items) return null;
              for (const item of items) {
                if (item.id === id) return item.title;
                if (item.children) {
                  const result = findTitleInNav(item.children, id);
                  if (result) return result;
                }
              }
              return null;
            }

            if (window.navigationConfig) {
              const title = findTitleInNav(window.navigationConfig, pageId);
              if (title) return title;
            }

            // Fallback: format pageId as title
            return pageId.split(/-|_/).map(word =>
              word.charAt(0).toUpperCase() + word.slice(1)
            ).join(' ');
          }

          // Get page ID from URL
          function getPageIdFromUrl() {
            return window.location.hash.substring(1) || null;
          }

          // Handle browser back/forward
          function handlePopState(event) {
            const pageId = event.state?.pageId || getPageIdFromUrl();
            if (pageId) {
              navigateToPage(pageId, false);
            }
          }

          // Search functionality
          function performSearch() {
            if (!searchInput || !searchResultsEl) return;

            const query = searchInput.value.toLowerCase().trim();
            searchResultsEl.innerHTML = '';

            if (query.length < 2) {
              if (query.length > 0) {
                searchResultsEl.innerHTML = '<li><p>Enter at least 2 characters</p></li>';
              }
              return;
            }

            const results = [];
            
            // Search in content map
            if (typeof contentIdMap !== 'undefined') {
              for (const id in contentIdMap) {
                if (id === 'default') continue;
                const item = contentIdMap[id];
                
                let score = 0;
                if (item.title.toLowerCase().includes(query)) score += 10;
                if (item.content && item.content.toLowerCase().includes(query)) score += 1;
                
                if (score > 0) {
                  results.push({ id, title: item.title, score });
                }
              }
            }

            // Search in navigation
            if (window.navigationConfig) {
              window.navigationConfig.forEach(item => {
                if (item.title.toLowerCase().includes(query)) {
                  results.push({ id: item.id, title: item.title, score: 5 });
                }
              });
            }

            results.sort((a, b) => b.score - a.score);

            if (results.length === 0) {
              searchResultsEl.innerHTML = '<li><p>No results found</p></li>';
            } else {
              results.forEach(result => {
                const li = document.createElement('li');
                const link = document.createElement('a');
                link.href = `#${result.id}`;
                link.textContent = result.title;
                link.addEventListener('click', (e) => {
                  e.preventDefault();
                  navigateToPage(result.id);
                  searchResultsEl.innerHTML = '';
                  searchInput.value = '';
                });
                li.appendChild(link);
                searchResultsEl.appendChild(li);
              });
            }
          }

          // Review System Functions
          function initReviewSystem() {
            createCommentPanel();
            createCommentDialog();
            createImageModal();
          }

          function createCommentPanel() {
            const panel = document.createElement('div');
            panel.className = 'comment-panel';
            panel.id = 'commentPanel';
            panel.innerHTML = `
              <h3>Review Comments</h3>
              <div id="commentList"></div>
            `;
            document.body.appendChild(panel);
          }

          function createCommentDialog() {
            const overlay = document.createElement('div');
            overlay.className = 'dialog-overlay';
            overlay.id = 'dialogOverlay';
            overlay.addEventListener('click', closeCommentDialog);

            const dialog = document.createElement('div');
            dialog.className = 'comment-dialog';
            dialog.id = 'commentDialog';
            dialog.innerHTML = `
              <h3>Add Review Comment</h3>
              <div style="margin: 15px 0;">
                <label><input type="radio" name="commentType" value="comment" checked> Comment</label>
                <label style="margin-left: 15px;"><input type="radio" name="commentType" value="suggestion"> Suggestion</label>
              </div>
              <div style="margin: 15px 0;">
                <textarea id="commentText" placeholder="Enter your comment..."></textarea>
              </div>
              <div class="dialog-actions">
                <button class="dialog-btn secondary" onclick="closeCommentDialog()">Cancel</button>
                <button class="dialog-btn primary" onclick="saveComment()">Save</button>
              </div>
            `;

            document.body.appendChild(overlay);
            document.body.appendChild(dialog);
          }

          function createImageModal() {
            const modal = document.createElement('div');
            modal.className = 'image-modal';
            modal.id = 'imageModal';
            modal.innerHTML = `
              <button class="close-btn" onclick="closeImageModal()">✕</button>
              <img id="modalImage" src="" alt="">
            `;
            
            modal.addEventListener('click', (e) => {
              if (e.target === modal) closeImageModal();
            });

            document.body.appendChild(modal);
          }

          function toggleReviewMode() {
            window.reviewMode = !window.reviewMode;
            
            if (window.reviewMode) {
              document.body.classList.add('review-mode');
              if (window.currentPage) {
                initializeReviewForContent();
                updateCommentPanel();
              }
            } else {
              document.body.classList.remove('review-mode');
              clearReviewHighlights();
            }
            
            updateReviewButton();
          }

          function updateReviewButton() {
            if (reviewToggleBtn) {
              reviewToggleBtn.textContent = window.reviewMode ? '🔚 Exit Review' : '📝 Start Review';
              reviewToggleBtn.classList.toggle('active', window.reviewMode);
            }
          }

          function initializeReviewForContent() {
            if (!window.reviewMode) return;

            const textElements = contentEl.querySelectorAll('p, h1, h2, h3, h4, li');
            textElements.forEach(element => {
              element.addEventListener('mouseup', handleTextSelection);
            });

            addReviewToolbar();
          }

          function addReviewToolbar() {
            const existingToolbar = document.querySelector('.review-toolbar');
            if (existingToolbar) existingToolbar.remove();

            const toolbar = document.createElement('div');
            toolbar.className = 'review-toolbar';
            toolbar.innerHTML = `<h3>📝 Review Mode Active: ${getPageTitle(window.currentPage)}</h3>`;
            
            contentEl.insertBefore(toolbar, contentEl.firstChild);
          }

          function handleTextSelection() {
            if (!window.reviewMode) return;

            const selection = window.getSelection();
            const selectedText = selection.toString().trim();
            
            if (selectedText.length === 0) return;

            window.currentSelection = {
              type: 'text',
              text: selectedText,
              range: selection.getRangeAt(0).cloneRange()
            };

            showCommentDialog();
          }

          function showCommentDialog() {
            const dialog = document.getElementById('commentDialog');
            const overlay = document.getElementById('dialogOverlay');
            
            dialog.classList.add('show');
            overlay.classList.add('show');
            
            document.getElementById('commentText').focus();
          }

          function closeCommentDialog() {
            const dialog = document.getElementById('commentDialog');
            const overlay = document.getElementById('dialogOverlay');
            
            dialog.classList.remove('show');
            overlay.classList.remove('show');
            
            document.getElementById('commentText').value = '';
            window.getSelection().removeAllRanges();
            window.currentSelection = null;
          }

          function saveComment() {
            if (!window.currentSelection) return;

            const commentText = document.getElementById('commentText').value.trim();
            const commentType = document.querySelector('input[name="commentType"]:checked').value;

            if (!commentText) {
              alert('Please enter a comment');
              return;
            }

            const comment = {
              id: 'comment_' + Date.now(),
              pageId: window.currentPage,
              type: commentType,
              text: commentText,
              selectedText: window.currentSelection.text,
              timestamp: new Date().toISOString()
            };

            if (!window.reviewData[window.currentPage]) {
              window.reviewData[window.currentPage] = { comments: [] };
            }

            window.reviewData[window.currentPage].comments.push(comment);
            localStorage.setItem('reviewData', JSON.stringify(window.reviewData));

            highlightTextInDocument(comment);
            updateCommentPanel();
            closeCommentDialog();
          }

          function highlightTextInDocument(comment) {
            const span = document.createElement('span');
            span.className = comment.type === 'suggestion' ? 'suggestion-highlight' : 'comment-highlight';
            span.setAttribute('data-comment-id', comment.id);
            span.title = `${comment.type}: ${comment.text}`;

            try {
              window.currentSelection.range.surroundContents(span);
            } catch (e) {
              span.textContent = window.currentSelection.text;
              window.currentSelection.range.deleteContents();
              window.currentSelection.range.insertNode(span);
            }
          }

          function updateCommentPanel() {
            const commentList = document.getElementById('commentList');
            if (!commentList) return;

            const comments = window.reviewData[window.currentPage]?.comments || [];

            if (comments.length === 0) {
              commentList.innerHTML = '<p>No comments yet. Select text to add comments!</p>';
              return;
            }

            commentList.innerHTML = comments.map(comment => `
              <div style="background: white; padding: 15px; margin: 10px 0; border-radius: 6px; border-left: 3px solid ${comment.type === 'suggestion' ? '#ff9800' : '#2196f3'};">
                <div style="font-weight: bold; margin-bottom: 5px;">${comment.type.toUpperCase()}</div>
                <div style="font-style: italic; margin-bottom: 5px;">"${comment.selectedText}"</div>
                <div>${comment.text}</div>
                <div style="font-size: 0.8em; color: #666; margin-top: 5px;">
                  ${new Date(comment.timestamp).toLocaleString()}
                  <button onclick="deleteComment('${comment.id}')" style="float: right; background: #f44336; color: white; border: none; padding: 2px 6px; border-radius: 3px; cursor: pointer;">Delete</button>
                </div>
              </div>
            `).join('');
          }

          function clearReviewHighlights() {
            const highlights = document.querySelectorAll('[data-comment-id]');
            highlights.forEach(highlight => {
              const parent = highlight.parentNode;
              if (parent) {
                parent.insertBefore(document.createTextNode(highlight.textContent), highlight);
                parent.removeChild(highlight);
              }
            });
          }

          function loadReviewDataForPage(pageId) {
            // Re-apply highlights for current page
            const comments = window.reviewData[pageId]?.comments || [];
            // Simplified - in production would need more sophisticated text matching
          }

          function deleteComment(commentId) {
            if (!confirm('Delete this comment?')) return;

            const pageData = window.reviewData[window.currentPage];
            if (pageData) {
              pageData.comments = pageData.comments.filter(c => c.id !== commentId);
              localStorage.setItem('reviewData', JSON.stringify(window.reviewData));

              const highlight = document.querySelector(`[data-comment-id="${commentId}"]`);
              if (highlight) {
                const parent = highlight.parentNode;
                parent.insertBefore(document.createTextNode(highlight.textContent), highlight);
                parent.removeChild(highlight);
              }

              updateCommentPanel();
            }
          }

          function showImageModal(src, alt) {
            const modal = document.getElementById('imageModal');
            const img = document.getElementById('modalImage');
            img.src = src;
            img.alt = alt;
            modal.classList.add('show');
          }

          function closeImageModal() {
            document.getElementById('imageModal').classList.remove('show');
          }

          function handlePrint() {
            if (window.reviewMode) {
              // In review mode, could generate review report
              alert('Review mode print functionality would generate a report with comments');
            } else {
              window.print();
            }
          }

          // Make functions global
          window.navigateToPage = navigateToPage;
          window.closeCommentDialog = closeCommentDialog;
          window.saveComment = saveComment;
          window.deleteComment = deleteComment;
          window.closeImageModal = closeImageModal;

          // Initialize when DOM ready
          document.addEventListener('DOMContentLoaded', function() {
            debug('DOM ready, initializing app');
            
            // Small delay to ensure all scripts loaded
            setTimeout(() => {
              try {
                initApp();
              } catch (error) {
                console.error('Initialization error:', error);
                document.body.classList.remove('loading');
                
                if (contentEl) {
                  contentEl.innerHTML = `
                    <div class="error">
                      <h2>Initialization Error</h2>
                      <p>Failed to initialize the application. Please refresh the page.</p>
                    </div>
                  `;
                }
              }
            }, 200);
          });
          EOF

      # Step 13: Create HTML Index
      - name: Create HTML Index
        run: |
          cat > ./site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Automotive Documentation - DITA SPA</title>
            
            <script>
              // Set base path for GitHub Pages
              if (location.hostname.includes('github.io')) {
                const pathSegments = location.pathname.split('/');
                if (pathSegments.length > 1) {
                  const basePath = '/' + pathSegments[1];
                  document.write('<base href="' + basePath + '/">');
                }
              }
            </script>
            
            <link rel="stylesheet" href="css/style.css">
          </head>
          <body class="loading">
            <div class="sidebar">
              <div class="sidebar-header">
                <h2>Navigation</h2>
                
                <div class="search-container">
                  <input type="text" id="searchInput" placeholder="Search...">
                  <button id="searchButton">Search</button>
                </div>
                
                <ul id="searchResults" class="search-results"></ul>
              </div>
              
              <div class="review-controls">
                <h3>📝 Review System</h3>
                <div class="review-mode-toggle">
                  <button id="reviewToggle" class="review-btn">📝 Start Review</button>
                </div>
              </div>
              
              <div class="sidebar-nav">
                <div id="navigation"></div>
              </div>
            </div>

            <div class="main-content">
              <h1 id="content-title">Loading...</h1>
              <div id="loading">Loading DITA content...</div>
              <div id="content">
                <div style="text-align: center; padding: 40px;">
                  <p>Initializing DITA documentation system...</p>
                </div>
              </div>
            </div>

            <button class="main-print-button" id="mainPrintButton">
              🖨️ <span>Print</span>
            </button>

            <!-- Load scripts in order -->
            <script src="js/navigation-config.js"></script>
            <script src="js/content-id-map.js"></script>
            <script src="js/app.js"></script>
          </body>
          </html>
          EOF

      # Step 14: Create 404 page
      - name: Create 404 Page
        run: |
          cat > ./site/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redirecting...</title>
            <script>
              sessionStorage.redirect = location.href;
              
              function getBasePath() {
                if (location.hostname.includes('github.io')) {
                  const pathSegments = location.pathname.split('/');
                  if (pathSegments.length > 1) {
                    return '/' + pathSegments[1];
                  }
                }
                return '';
              }

              const basePath = getBasePath();
              window.location.href = basePath + '/';
            </script>
          </head>
          <body>
            <div style="text-align: center; font-family: Arial, sans-serif; margin-top: 100px;">
              <h1>Redirecting...</h1>
            </div>
          </body>
          </html>
          EOF

      # Step 15: Final verification and cleanup
      - name: Final Verification
        run: |
          echo "=== Final Site Structure ==="
          find ./site -type f | sort
          
          echo ""
          echo "=== Verifying Key Files ==="
          
          if [ -f "./site/index.html" ]; then
            echo "✅ index.html created"
          else
            echo "❌ index.html missing"
          fi
          
          if [ -f "./site/js/navigation-config.js" ]; then
            echo "✅ navigation-config.js created"
            echo "Navigation items:"
            grep -o '"title"[^,]*' ./site/js/navigation-config.js | head -5
          else
            echo "❌ navigation-config.js missing"
          fi
          
          if [ -f "./site/js/content-id-map.js" ]; then
            echo "✅ content-id-map.js created"
          else
            echo "❌ content-id-map.js missing"
          fi
          
          if [ -f "./site/js/app.js" ]; then
            echo "✅ app.js created ($(wc -l < ./site/js/app.js) lines)"
          else
            echo "❌ app.js missing"
          fi
          
          echo ""
          echo "=== Content Files ==="
          ls -la ./site/content/ | head -10
          
          echo ""
          echo "=== Image Files ==="
          ls -la ./site/images/ | head -5
          
          echo ""
          echo "=== Build Complete ==="

      # Step 16: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          force_orphan: true