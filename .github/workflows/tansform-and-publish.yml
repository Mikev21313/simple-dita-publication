name: Complete DITA Review System Setup

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  setup-complete-system:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    steps:
      # Step 1: Checkout repository with full history
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      # Step 2: Configure Git
      - name: Configure Git
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git config --global init.defaultBranch main

      # Step 3: Set up Java (required for DITA-OT)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 4: Install DITA-OT and required tools
      - name: Set up DITA-OT and XML tools
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils xsltproc postgresql-client curl jq

          # Install DITA-OT
          wget https://github.com/dita-ot/dita-ot/releases/download/4.0.2/dita-ot-4.0.2.zip
          unzip dita-ot-4.0.2.zip
          chmod +x dita-ot-4.0.2/bin/dita

      # Step 5: Create directory structure for all applications
      - name: Create Complete Directory Structure
        run: |
          echo "📁 Creating directory structure for all applications..."
          
          # DITA Publication directories
          mkdir -p ./dita-publication/site/{content,css,js,images,archives,review}
          
          # Review Portal directories
          mkdir -p ./review-portal/{css,js/modules,assets/icons}
          
          # Admin Console directories
          mkdir -p ./admin-console/{css,js,assets/icons}
          
          # Shared resources
          mkdir -p ./shared/{css,js}
          
          echo "✅ Directory structure created"

      # Step 6: Process DITA content (if exists)
      - name: Process DITA Content
        run: |
          echo "📖 Processing DITA content..."
          
          # Initialize navigation structure
          echo "[]" > navigation-structure.json
          
          # Process DITA if source files exist
          if [ -d "dita-source" ] && [ "$(ls -A dita-source/*.ditamap 2>/dev/null)" ]; then
            echo "Found DITA source files, processing..."
            
            # Create XSLT for navigation extraction
            cat > extract-nav.xsl << 'ENDXSL'
<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
    [<xsl:apply-templates select="//topicref[not(ancestor::topicref)]"/>]
  </xsl:template>
  <xsl:template match="topicref">
    <xsl:variable name="href" select="@href"/>
    <xsl:variable name="filename">
      <xsl:choose>
        <xsl:when test="contains($href, '/')">
          <xsl:value-of select="substring-after(substring-before($href, '.'), '/')"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="substring-before($href, '.')"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="id">
      <xsl:choose>
        <xsl:when test="@id"><xsl:value-of select="@id"/></xsl:when>
        <xsl:otherwise><xsl:value-of select="translate($filename, '_', '-')"/></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="title">
      <xsl:choose>
        <xsl:when test="@navtitle"><xsl:value-of select="@navtitle"/></xsl:when>
        <xsl:when test="topicmeta/navtitle"><xsl:value-of select="topicmeta/navtitle"/></xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="translate(translate($id, '-', ' '), '_', ' ')"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    {
      "id": "<xsl:value-of select="$id"/>",
      "title": "<xsl:value-of select="$title"/>",
      "filename": "<xsl:value-of select="$filename"/>",
      "href": "<xsl:value-of select="$href"/>"
      <xsl:if test="topicref">
        "children": [<xsl:apply-templates select="topicref"/>]
      </xsl:if>
    }<xsl:if test="following-sibling::topicref">,</xsl:if>
  </xsl:template>
</xsl:stylesheet>
ENDXSL
            
            # Process DITAMAP
            for ditamap in dita-source/*.ditamap; do
              if [ -f "$ditamap" ]; then
                echo "Processing: $ditamap"
                xsltproc extract-nav.xsl "$ditamap" > navigation-structure.json 2>/dev/null || echo "[]" > navigation-structure.json
                
                # Transform to HTML
                ./dita-ot-4.0.2/bin/dita --input="$ditamap" --format=html5 --output=./dita-publication/site || echo "DITA transformation completed with warnings"
                break
              fi
            done
            
            # Process HTML files
            find ./dita-publication/site -type f -name "*.html" | grep -v "index.html" | while read file; do
              filename=$(basename "$file")
              id="${filename%.html}"
              
              # Extract content
              content=$(sed -n '/<body/,/<\/body>/p' "$file" | sed '/<body/d;/<\/body>/d' | sed '/<header/,/<\/header>/d' | sed '/<nav/,/<\/nav>/d' | sed '/<footer/,/<\/footer>/d')
              
              # Save processed content
              echo "$content" > "./dita-publication/site/content/$id.html"
            done
          else
            echo "No DITA source files found - creating placeholder content"
            echo "<h1>Welcome</h1><p>No DITA content available. Add DITA files to dita-source/ directory.</p>" > ./dita-publication/site/content/welcome.html
          fi

      # Step 7: Create All Application Files
      - name: Create Application Files
        run: |
          # Create shared Supabase config
          mkdir -p ./shared/js
          cat > ./shared/js/supabase-config.js << 'ENDOFFILE'
// Shared Supabase configuration
const SUPABASE_URL = 'https://oiluavgeyngmkqozzmnz.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9pbHVhdmdleW5nbWtxb3p6bW56Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg0NjIxOTgsImV4cCI6MjA2NDAzODE5OH0.zsfYoYDgArOBjP7SziUMgRQpIHhwTb-qgtw7t54MsXQ';

class SupabaseAuthClient {
  constructor() {
    this.baseUrl = SUPABASE_URL;
    this.headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ' + SUPABASE_ANON_KEY,
      'apikey': SUPABASE_ANON_KEY
    };
    this.currentUser = null;
  }

  async login(username, password) {
    const validUsers = {
      'vincent': { password: 'zoox', id: 'user-vincent', role: 'user' },
      'sree': { password: 'zoox', id: 'user-sree', role: 'user' },
      'admin': { password: 'admin123', id: 'user-admin', role: 'admin' }
    };
    
    if (validUsers[username] && validUsers[username].password === password) {
      this.currentUser = {
        id: validUsers[username].id,
        username: username,
        role: validUsers[username].role
      };
      localStorage.setItem('review_user', JSON.stringify(this.currentUser));
      return { success: true, user: this.currentUser };
    }
    
    return { success: false, error: 'Invalid credentials' };
  }

  logout() {
    this.currentUser = null;
    localStorage.removeItem('review_user');
  }

  getCurrentUser() {
    if (!this.currentUser) {
      const stored = localStorage.getItem('review_user');
      if (stored) {
        this.currentUser = JSON.parse(stored);
      }
    }
    return this.currentUser;
  }

  isAuthenticated() {
    return this.getCurrentUser() !== null;
  }

  isAdmin() {
    const user = this.getCurrentUser();
    return user && user.role === 'admin';
  }
}

// Extended client for review operations
class ReviewSystemClient extends SupabaseAuthClient {
  async createReviewDocument(pageId, contentHtml) {
    const user = this.getCurrentUser();
    if (!user) throw new Error('Not authenticated');
    
    const doc = {
      id: 'doc_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
      original_page_id: pageId,
      content_html: contentHtml,
      user_id: user.id,
      review_state: 'draft',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    const docs = this.getReviewDocuments();
    docs.push(doc);
    localStorage.setItem('review_documents', JSON.stringify(docs));
    
    return doc;
  }

  getReviewDocuments() {
    const stored = localStorage.getItem('review_documents');
    return stored ? JSON.parse(stored) : [];
  }

  getUserDocuments() {
    const user = this.getCurrentUser();
    if (!user) return [];
    
    return this.getReviewDocuments().filter(doc => doc.user_id === user.id);
  }

  getAllDocuments() {
    return this.getReviewDocuments();
  }

  async updateDocument(docId, updates) {
    const docs = this.getReviewDocuments();
    const index = docs.findIndex(d => d.id === docId);
    
    if (index !== -1) {
      docs[index] = { ...docs[index], ...updates, updated_at: new Date().toISOString() };
      localStorage.setItem('review_documents', JSON.stringify(docs));
      return docs[index];
    }
    
    throw new Error('Document not found');
  }

  async requestApproval(docId, approverId, message) {
    const request = {
      id: 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
      document_id: docId,
      requester_id: this.getCurrentUser().id,
      approver_id: approverId,
      status: 'pending',
      request_message: message,
      created_at: new Date().toISOString()
    };
    
    const requests = this.getApprovalRequests();
    requests.push(request);
    localStorage.setItem('approval_requests', JSON.stringify(requests));
    
    return request;
  }

  getApprovalRequests() {
    const stored = localStorage.getItem('approval_requests');
    return stored ? JSON.parse(stored) : [];
  }

  getUserApprovalRequests() {
    const user = this.getCurrentUser();
    if (!user) return [];
    
    return this.getApprovalRequests().filter(
      req => req.approver_id === user.id && req.status === 'pending'
    );
  }

  async respondToApproval(requestId, approved, message) {
    const requests = this.getApprovalRequests();
    const index = requests.findIndex(r => r.id === requestId);
    
    if (index !== -1) {
      requests[index].status = approved ? 'approved' : 'rejected';
      requests[index].response_message = message;
      requests[index].responded_at = new Date().toISOString();
      localStorage.setItem('approval_requests', JSON.stringify(requests));
      
      if (approved) {
        await this.updateDocument(requests[index].document_id, {
          review_state: 'approved'
        });
      }
      
      return requests[index];
    }
    
    throw new Error('Request not found');
  }

  async addComment(docId, commentText, selectedText = '') {
    const comment = {
      id: 'com_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
      document_id: docId,
      user_id: this.getCurrentUser().id,
      comment_text: commentText,
      selected_text: selectedText,
      status: 'active',
      created_at: new Date().toISOString()
    };
    
    const comments = this.getComments();
    comments.push(comment);
    localStorage.setItem('review_comments', JSON.stringify(comments));
    
    return comment;
  }

  getComments() {
    const stored = localStorage.getItem('review_comments');
    return stored ? JSON.parse(stored) : [];
  }

  getDocumentComments(docId) {
    return this.getComments().filter(c => c.document_id === docId);
  }
}

// Initialize clients
window.supabaseAuth = new SupabaseAuthClient();
window.reviewSystem = new ReviewSystemClient();
ENDOFFILE

      # Step 8: Create DITA Publication Site
      - name: Create DITA Publication Site
        run: |
          # Create navigation config
          cat > ./dita-publication/site/js/navigation-config.js << 'ENDOFFILE'
const navigationConfig = 
ENDOFFILE
          cat ./navigation-structure.json >> ./dita-publication/site/js/navigation-config.js
          echo ";" >> ./dita-publication/site/js/navigation-config.js
          
          # Create CSS
          cat > ./dita-publication/site/css/style.css << 'ENDOFFILE'
* { margin: 0; padding: 0; box-sizing: border-box; }

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6; display: flex; height: 100vh;
  overflow: hidden; color: #333; background: #f8f8f8;
}

.sidebar {
  width: 300px; background: #e0f7f7; padding: 15px;
  height: 100vh; overflow-y: auto; border-right: 1px solid #c0e0e0;
}

.main-content {
  flex: 1; padding: 30px; height: 100vh; overflow-y: auto;
  background: #ffffff; position: relative;
}

.sidebar h2 {
  font-weight: 500; margin-bottom: 15px; color: #00747a;
  border-bottom: 2px solid #80cbc4; padding-bottom: 10px;
}

.sidebar ul { list-style: none; padding-left: 0; }
.sidebar ul ul { padding-left: 20px; margin-top: 5px; }
.sidebar li { margin-bottom: 6px; position: relative; }

.sidebar a {
  color: #00747a; text-decoration: none; display: block;
  padding: 6px 10px; border-radius: 4px; transition: all 0.2s;
}

.sidebar a:hover { background: #e1f5fe; color: #006064; }
.sidebar a.active { background: #80deea; font-weight: bold; }

.feedback-button {
  position: fixed; bottom: 20px; right: 20px;
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white; padding: 12px 24px; border: none;
  border-radius: 50px; cursor: pointer; font-size: 16px;
  font-weight: 600; box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
  transition: all 0.3s; z-index: 1000;
  display: flex; align-items: center; gap: 8px;
}

.feedback-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
}

.feedback-button:before { content: "💬"; font-size: 20px; }

@media (max-width: 768px) {
  body { flex-direction: column; }
  .sidebar { width: 100%; height: auto; max-height: 30vh; }
  .feedback-button { bottom: 70px; right: 15px; }
}
ENDOFFILE

          # Create JavaScript
          cat > ./dita-publication/site/js/app.js << 'ENDOFFILE'
// DITA SPA Application with Review Integration

let contentEl, navigationEl;
window.currentPage = null;

function initializeDOMElements() {
  contentEl = document.getElementById('content');
  navigationEl = document.getElementById('navigation');
}

function renderNavigation(items, parentEl = navigationEl) {
  if (!parentEl || !items || items.length === 0) return;
  
  const ul = document.createElement('ul');
  items.forEach(item => {
    const li = document.createElement('li');
    const a = document.createElement('a');
    a.textContent = item.title;
    a.setAttribute('data-id', item.id);
    a.href = '#' + item.id;
    
    a.addEventListener('click', (e) => {
      e.preventDefault();
      navigateToPage(item.id);
    });
    
    li.appendChild(a);
    if (item.children && item.children.length > 0) {
      renderNavigation(item.children, li);
    }
    ul.appendChild(li);
  });
  parentEl.appendChild(ul);
}

function navigateToPage(pageId) {
  window.currentPage = pageId;
  updateActiveNavItem(pageId);
  
  fetch('content/' + pageId + '.html')
    .then(response => response.text())
    .then(content => {
      if (contentEl) contentEl.innerHTML = content;
    })
    .catch(() => {
      if (contentEl) {
        contentEl.innerHTML = '<div class="error">Content not found</div>';
      }
    });
}

function updateActiveNavItem(pageId) {
  document.querySelectorAll('.sidebar a').forEach(a => a.classList.remove('active'));
  const activeItem = document.querySelector('.sidebar a[data-id="' + pageId + '"]');
  if (activeItem) activeItem.classList.add('active');
}

function addFeedbackButton() {
  const feedbackBtn = document.createElement('button');
  feedbackBtn.className = 'feedback-button';
  feedbackBtn.innerHTML = 'Provide Feedback';
  feedbackBtn.title = 'Open review portal to provide feedback';
  
  feedbackBtn.addEventListener('click', openReviewPortal);
  document.body.appendChild(feedbackBtn);
}

function openReviewPortal() {
  const currentPageId = window.currentPage || 'home';
  const pageTitle = document.querySelector('.sidebar a.active')?.textContent || 'Document';
  const pageContent = contentEl ? contentEl.innerHTML : '';
  
  sessionStorage.setItem('review_page_id', currentPageId);
  sessionStorage.setItem('review_page_title', pageTitle);
  sessionStorage.setItem('review_page_content', pageContent);
  
  const reviewWindow = window.open('../review-portal/index.html', 'ReviewPortal', 
    'width=1400,height=900,scrollbars=yes,resizable=yes'
  );
  
  if (!reviewWindow) {
    alert('Please allow popups to open the review portal.');
  }
}

document.addEventListener('DOMContentLoaded', function() {
  initializeDOMElements();
  
  if (window.navigationConfig && navigationConfig.length > 0) {
    renderNavigation(navigationConfig);
    navigateToPage(navigationConfig[0].id);
  }
  
  addFeedbackButton();
});
ENDOFFILE

          # Create index.html
          cat > ./dita-publication/site/index.html << 'ENDOFFILE'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DITA Documentation</title>
  <link rel="stylesheet" href="css/style.css">
</head>
<body>
  <div class="sidebar">
    <h2>Documentation</h2>
    <div id="navigation"></div>
  </div>
  
  <div class="main-content">
    <div id="content">
      <h1>Welcome</h1>
      <p>Select a topic from the navigation menu.</p>
    </div>
  </div>
  
  <script src="js/navigation-config.js"></script>
  <script src="js/app.js"></script>
</body>
</html>
ENDOFFILE

      # Step 9: Create Review Portal
      - name: Create Review Portal
        run: |
          # Copy shared config
          cp ./shared/js/supabase-config.js ./review-portal/js/
          
          # Create login page
          cat > ./review-portal/index.html << 'ENDOFFILE'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Review Portal - Login</title>
  <link rel="stylesheet" href="css/auth.css">
</head>
<body>
  <div class="login-container">
    <div class="login-card">
      <h1>📝 Review Portal</h1>
      <p class="subtitle">Sign in to review documents</p>
      
      <form id="login-form">
        <div class="form-group">
          <label for="username">Username</label>
          <input type="text" id="username" required placeholder="vincent or sree">
        </div>
        
        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" id="password" required placeholder="Password">
        </div>
        
        <button type="submit" class="login-button">Sign In</button>
        
        <div id="error-message" class="error-message"></div>
      </form>
      
      <div class="login-hint">
        <p>Demo users:</p>
        <ul>
          <li>vincent / zoox</li>
          <li>sree / zoox</li>
        </ul>
      </div>
    </div>
  </div>
  
  <script src="js/supabase-config.js"></script>
  <script src="js/auth.js"></script>
</body>
</html>
ENDOFFILE

          # Create auth CSS
          cat > ./review-portal/css/auth.css << 'ENDOFFILE'
* { margin: 0; padding: 0; box-sizing: border-box; }

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh; display: flex; align-items: center;
  justify-content: center; padding: 20px;
}

.login-container {
  width: 100%; max-width: 400px;
}

.login-card {
  background: white; border-radius: 12px; padding: 40px;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
}

.login-card h1 {
  color: #333; margin-bottom: 10px; text-align: center;
}

.subtitle {
  color: #666; text-align: center; margin-bottom: 30px;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block; margin-bottom: 8px; color: #333;
  font-weight: 500;
}

.form-group input {
  width: 100%; padding: 12px; border: 2px solid #e0e0e0;
  border-radius: 8px; font-size: 16px; transition: border-color 0.3s;
}

.form-group input:focus {
  outline: none; border-color: #667eea;
}

.login-button {
  width: 100%; padding: 12px; background: linear-gradient(135deg, #667eea, #764ba2);
  color: white; border: none; border-radius: 8px;
  font-size: 16px; font-weight: 600; cursor: pointer;
  transition: transform 0.2s;
}

.login-button:hover {
  transform: translateY(-2px);
}

.error-message {
  color: #e74c3c; text-align: center; margin-top: 20px;
  font-size: 14px; display: none;
}

.error-message.show {
  display: block;
}

.login-hint {
  margin-top: 30px; padding-top: 20px;
  border-top: 1px solid #e0e0e0;
  font-size: 14px; color: #666;
}

.login-hint ul {
  list-style: none; margin-top: 10px;
}

.login-hint li {
  padding: 4px 0; font-family: monospace;
}
ENDOFFILE

          # Create auth.js
          cat > ./review-portal/js/auth.js << 'ENDOFFILE'
document.addEventListener('DOMContentLoaded', function() {
  const loginForm = document.getElementById('login-form');
  const errorMessage = document.getElementById('error-message');
  
  if (window.supabaseAuth.isAuthenticated()) {
    window.location.href = 'dashboard.html';
  }
  
  loginForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    
    errorMessage.classList.remove('show');
    
    try {
      const result = await window.supabaseAuth.login(username, password);
      
      if (result.success) {
        const reviewPageId = sessionStorage.getItem('review_page_id');
        if (reviewPageId) {
          window.location.href = 'review.html?page=' + reviewPageId + '&new=true';
        } else {
          window.location.href = 'dashboard.html';
        }
      } else {
        errorMessage.textContent = result.error || 'Invalid credentials';
        errorMessage.classList.add('show');
      }
    } catch (error) {
      errorMessage.textContent = 'Login failed. Please try again.';
      errorMessage.classList.add('show');
    }
  });
});
ENDOFFILE

          # Create dashboard.html
          cat > ./review-portal/dashboard.html << 'ENDOFFILE'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Review Dashboard</title>
  <style>
    body { font-family: sans-serif; padding: 20px; }
    .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
    .logout-btn { padding: 8px 16px; background: #f44336; color: white; border: none; border-radius: 4px; cursor: pointer; }
    .document-list { background: #f5f5f5; padding: 20px; border-radius: 8px; }
    .document-item { background: white; padding: 15px; margin-bottom: 10px; border-radius: 4px; }
  </style>
</head>
<body>
  <div class="header">
    <h1>Review Dashboard</h1>
    <button class="logout-btn" onclick="logout()">Logout</button>
  </div>
  
  <div class="content">
    <h2>My Review Documents</h2>
    <div class="document-list" id="document-list">
      <p>Loading documents...</p>
    </div>
  </div>
  
  <script src="js/supabase-config.js"></script>
  <script>
    if (!window.supabaseAuth.isAuthenticated()) {
      window.location.href = 'index.html';
    }
    
    function logout() {
      window.supabaseAuth.logout();
      window.location.href = 'index.html';
    }
    
    function loadDocuments() {
      const docs = window.reviewSystem.getUserDocuments();
      const listEl = document.getElementById('document-list');
      
      if (docs.length === 0) {
        listEl.innerHTML = '<p>No review documents yet. Open a documentation page and click "Provide Feedback" to start.</p>';
      } else {
        listEl.innerHTML = docs.map(doc => `
          <div class="document-item">
            <h3>Page: ${doc.original_page_id}</h3>
            <p>Status: ${doc.review_state}</p>
            <p>Created: ${new Date(doc.created_at).toLocaleDateString()}</p>
          </div>
        `).join('');
      }
    }
    
    loadDocuments();
  </script>
</body>
</html>
ENDOFFILE

      # Step 10: Create Admin Console
      - name: Create Admin Console
        run: |
          # Copy shared config
          cp ./shared/js/supabase-config.js ./admin-console/js/ || echo "Shared config copy failed"
          
          # Create admin index
          cat > ./admin-console/index.html << 'ENDOFFILE'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Console</title>
  <style>
    body { font-family: sans-serif; padding: 20px; background: #f5f5f5; }
    .header { background: #333; color: white; padding: 20px; margin: -20px -20px 20px; }
    .card { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
    .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
    .stat-box { background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; }
    .stat-number { font-size: 2em; font-weight: bold; color: #333; }
  </style>
</head>
<body>
  <div class="header">
    <h1>Technical Writer Admin Console</h1>
  </div>
  
  <div class="card">
    <h2>System Statistics</h2>
    <div class="stats">
      <div class="stat-box">
        <div class="stat-number" id="total-docs">0</div>
        <div>Total Documents</div>
      </div>
      <div class="stat-box">
        <div class="stat-number" id="pending-approvals">0</div>
        <div>Pending Approvals</div>
      </div>
      <div class="stat-box">
        <div class="stat-number" id="active-users">2</div>
        <div>Active Users</div>
      </div>
    </div>
  </div>
  
  <div class="card">
    <h2>Recent Activity</h2>
    <div id="activity-list">
      <p>Loading activity...</p>
    </div>
  </div>
  
  <script src="js/supabase-config.js"></script>
  <script>
    function loadStatistics() {
      const docs = window.reviewSystem.getAllDocuments();
      const requests = window.reviewSystem.getApprovalRequests();
      
      document.getElementById('total-docs').textContent = docs.length;
      document.getElementById('pending-approvals').textContent = 
        requests.filter(r => r.status === 'pending').length;
      
      const activityList = document.getElementById('activity-list');
      if (docs.length === 0) {
        activityList.innerHTML = '<p>No activity yet.</p>';
      } else {
        activityList.innerHTML = '<ul>' + 
          docs.slice(-5).reverse().map(doc => 
            `<li>Document created for page: ${doc.original_page_id} (${new Date(doc.created_at).toLocaleDateString()})</li>`
          ).join('') + 
          '</ul>';
      }
    }
    
    loadStatistics();
  </script>
</body>
</html>
ENDOFFILE

      # Step 11: Create Database Schema
      - name: Create Database Schema
        run: |
          cat > ./database-schema.sql << 'ENDOFFILE'
-- Complete Review System Database Schema
-- Run this in your Supabase SQL editor

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Users table
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  username TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  role TEXT NOT NULL CHECK (role IN ('user', 'admin')),
  created_at TIMESTAMP DEFAULT NOW()
);

-- Insert default users (use proper password hashing in production)
INSERT INTO users (id, username, password_hash, role) VALUES
  ('11111111-1111-1111-1111-111111111111', 'vincent', 'zoox', 'user'),
  ('22222222-2222-2222-2222-222222222222', 'sree', 'zoox', 'user'),
  ('33333333-3333-3333-3333-333333333333', 'admin', 'admin123', 'admin')
ON CONFLICT (username) DO NOTHING;

-- Review documents table
CREATE TABLE IF NOT EXISTS review_documents (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  original_page_id TEXT NOT NULL,
  content_html TEXT NOT NULL,
  user_id UUID REFERENCES users(id),
  review_state TEXT DEFAULT 'draft' 
    CHECK (review_state IN ('draft', 'pending_approval', 'approved', 'submitted', 'completed')),
  admin_notes TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Approval requests table
CREATE TABLE IF NOT EXISTS approval_requests (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  document_id UUID REFERENCES review_documents(id) ON DELETE CASCADE,
  requester_id UUID REFERENCES users(id),
  approver_id UUID REFERENCES users(id),
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
  request_message TEXT,
  response_message TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  responded_at TIMESTAMP
);

-- Review comments table
CREATE TABLE IF NOT EXISTS review_comments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  document_id UUID REFERENCES review_documents(id) ON DELETE CASCADE,
  user_id UUID REFERENCES users(id),
  comment_text TEXT NOT NULL,
  selected_text TEXT,
  status TEXT DEFAULT 'active' CHECK (status IN ('active', 'resolved')),
  created_at TIMESTAMP DEFAULT NOW()
);

-- Create indexes
CREATE INDEX idx_review_documents_user_id ON review_documents(user_id);
CREATE INDEX idx_review_documents_state ON review_documents(review_state);
CREATE INDEX idx_approval_requests_approver ON approval_requests(approver_id);
CREATE INDEX idx_approval_requests_status ON approval_requests(status);
CREATE INDEX idx_review_comments_document ON review_comments(document_id);
ENDOFFILE

      # Step 12: Create README
      - name: Create README
        run: |
          cat > ./README.md << 'ENDOFFILE'
# Complete DITA Review System

A comprehensive documentation review system with three integrated applications:

1. **DITA Publication Site** - Static site generated from DITA source files
2. **Review Portal** - User-facing application for document review and collaboration
3. **Admin Console** - Technical writer dashboard for managing all review requests

## Quick Start

### 1. Fork and Enable GitHub Actions
1. Fork this repository
2. Go to Settings → Actions → General
3. Enable "Read and write permissions" for workflows
4. Run the workflow from Actions tab

### 2. Access the Applications
- **DITA Site**: `https://[username].github.io/[repo-name]/dita-publication/site/`
- **Review Portal**: `https://[username].github.io/[repo-name]/review-portal/`
- **Admin Console**: `https://[username].github.io/[repo-name]/admin-console/`

## User Credentials

### Review Portal Users
- Username: `vincent` / Password: `zoox`
- Username: `sree` / Password: `zoox`

### Admin Console
- Username: `admin` / Password: `admin123`

## Features

- User authentication and segregation
- Document review workflow
- Peer approval system
- Admin oversight capabilities
- Comment and feedback system

## License

MIT License
ENDOFFILE

      # Step 13: Create placeholder files
      - name: Create Placeholder Files
        run: |
          touch ./review-portal/assets/icons/.gitkeep
          touch ./admin-console/assets/icons/.gitkeep

      # Step 14: Commit and Push
      - name: Commit and Push
        run: |
          git add -A
          git status
          git commit -m "Complete DITA Review System Setup" -m "- Three integrated applications" -m "- User authentication system" -m "- Review workflow implementation" || echo "No changes to commit"
          git push origin main || git push origin HEAD:main || echo "Push failed - check permissions"