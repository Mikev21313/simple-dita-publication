# File: .github/workflows/publish-dita.yml
name: Publish DITA to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install DITA-OT
        run: |
          wget https://github.com/dita-ot/dita-ot/releases/download/3.6.1/dita-ot-3.6.1.zip
          unzip dita-ot-3.6.1.zip
          chmod +x dita-ot-3.6.1/bin/dita

      # Transform DITA to HTML
      - name: Transform DITA to HTML
        run: |
          ./dita-ot-3.6.1/bin/dita \
          --input=dita-source/maps/simple-guide.ditamap \
          --format=html5 \
          --output=docs \
          --verbose
        continue-on-error: true

      # Create CSS for TOC
      - name: Create CSS for TOC
        run: |
          mkdir -p docs/css
          cat > docs/css/toc-style.css << 'EOL'
          /* Basic styles */
          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            display: flex;
            flex-wrap: wrap;
          }

          /* Left side TOC container */
          .toc-container {
            width: 250px;
            padding-right: 20px;
          }

          /* Main content area */
          .content-container {
            flex: 1;
            min-width: 0;
          }

          /* TOC styling */
          .toc {
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 15px;
          }

          .toc h2 {
            margin-top: 0;
            padding-bottom: 10px;
            border-bottom: 1px solid #ddd;
          }

          .toc ul {
            list-style-type: none;
            padding-left: 0;
          }

          .toc li {
            margin-bottom: 8px;
          }

          .toc a {
            color: #0066cc;
            text-decoration: none;
          }

          .toc a:hover {
            text-decoration: underline;
          }

          /* Responsive design */
          @media (max-width: 768px) {
            body {
              flex-direction: column;
            }
            
            .toc-container {
              width: 100%;
              margin-bottom: 20px;
            }
          }
          EOL

      # Generate TOC from DITA files
      - name: Generate TOC
        run: |
          # Create a file to store TOC links
          mkdir -p docs
          echo "Generating TOC from DITA topics..."
          
          # Start with Home entry
          echo "<li><a href=\"index.html\">Home</a></li>" > toc_entries.txt
          
          # Find all HTML files in docs directory (if they exist yet)
          if [ -d docs ]; then
            find docs -name "*.html" -not -name "index.html" -type f | sort | while read -r file; do
              # Get filename and title
              filename=$(basename "$file")
              title=$(grep -o "<title>.*</title>" "$file" | head -1 | sed 's/<title>\(.*\)<\/title>/\1/' || echo "$filename")
              echo "<li><a href=\"$filename\">$title</a></li>" >> toc_entries.txt
            done
          fi
          
          # Combine entries into TOC
          toc_entries=$(cat toc_entries.txt)
          echo "TOC entries: $toc_entries"

      # Create simple HTML files with TOC
      - name: Create index page
        run: |
          # Generate TOC entries
          toc_entries=$(cat toc_entries.txt)
          
          # Create index.html
          cat > docs/index.html << EOL
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Documentation</title>
    <link rel="stylesheet" href="css/toc-style.css">
</head>
<body>
    <div class="toc-container">
        <div class="toc">
            <h2>Table of Contents</h2>
            <ul>
                $toc_entries
            </ul>
        </div>
    </div>

    <div class="content-container">
        <h1>Documentation</h1>
        <p>Welcome to the documentation. Please select a topic from the table of contents.</p>
        
        <h2>Available Topics</h2>
        <ul>
$(find docs -name "*.html" -not -name "index.html" -type f | sort | while read -r file; do
  filename=$(basename "$file")
  title=$(grep -o "<title>.*</title>" "$file" | head -1 | sed 's/<title>\(.*\)<\/title>/\1/' || echo "$filename")
  echo "            <li><a href=\"$filename\">$title</a></li>"
done)
        </ul>
    </div>
</body>
</html>
EOL

      # Add TOC to all HTML files
      - name: Add TOC to HTML files
        run: |
          # Generate TOC entries
          toc_entries=$(cat toc_entries.txt)
          
          # Process each HTML file except index.html
          find docs -name "*.html" -not -name "index.html" -type f | while read -r file; do
            echo "Adding TOC to $file"
            
            # Create temporary file
            temp=$(mktemp)
            
            # Add TOC to the file by modifying its structure
            awk -v toc="$toc_entries" '
            BEGIN { added_toc = 0; added_css = 0; in_body = 0; }
            
            # Add CSS link to head
            /<\/head>/ && added_css == 0 {
              print "    <link rel=\"stylesheet\" href=\"css/toc-style.css\">";
              added_css = 1;
            }
            
            # Add TOC after body tag
            /<body>/ {
              print $0;
              print "    <div class=\"toc-container\">";
              print "        <div class=\"toc\">";
              print "            <h2>Table of Contents</h2>";
              print "            <ul>";
              print "                " toc;
              print "            </ul>";
              print "        </div>";
              print "    </div>";
              print "    <div class=\"content-container\">";
              in_body = 1;
              added_toc = 1;
              next;
            }
            
            # Close content container before body end
            /<\/body>/ && in_body == 1 {
              print "    </div>";
              print $0;
              next;
            }
            
            # Print all other lines
            { print $0; }
            ' "$file" > "$temp"
            
            # Replace original with modified file
            mv "$temp" "$file"
          done

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: docs
          branch: gh-pages
          clean: true
