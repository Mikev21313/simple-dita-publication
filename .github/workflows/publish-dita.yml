name: Auto-Build and Deploy DITA to GitHub Pages
on:
  # Automatically build and deploy when pushing to main branch
  push:
    branches: [ main ]
    paths:
      - 'dita-source/**'  # Only trigger when DITA content changes
  
  # Automatically build and deploy when creating or updating a pull request
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'dita-source/**'  # Only trigger when DITA content changes
      
  # Add ability to manually trigger the workflow from GitHub Actions tab
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to GitHub Pages?'
        required: true
        default: 'true'
        type: boolean
      title:
        description: 'Documentation Title (leave empty for default)'
        required: false
        type: string

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          
      - name: Install DITA-OT
        run: |
          wget https://github.com/dita-ot/dita-ot/releases/download/3.6.1/dita-ot-3.6.1.zip
          unzip dita-ot-3.6.1.zip
          chmod +x dita-ot-3.6.1/bin/dita
          
      # Extract documentation title from DITA map
      - name: Extract documentation title
        id: extract_title
        run: |
          # Default title in case extraction fails
          DEFAULT_TITLE="Documentation"
          
          # Use manual title if provided through workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.title }}" ]]; then
            DOCS_TITLE="${{ github.event.inputs.title }}"
            echo "Using manually provided title: $DOCS_TITLE"
          else
            # Try to extract title from DITA map
            if [ -f "dita-source/maps/simple-guide.ditamap" ]; then
              EXTRACTED_TITLE=$(grep -oP '(?<=<title>).*?(?=</title>)' dita-source/maps/simple-guide.ditamap | head -1)
              if [ -n "$EXTRACTED_TITLE" ]; then
                DOCS_TITLE="$EXTRACTED_TITLE"
                echo "Extracted title from DITA map: $DOCS_TITLE"
              else
                DOCS_TITLE="$DEFAULT_TITLE"
                echo "Could not extract title from DITA map, using default: $DOCS_TITLE"
              fi
            else
              DOCS_TITLE="$DEFAULT_TITLE"
              echo "DITA map not found, using default title: $DOCS_TITLE"
            fi
          fi
          
          # Set output variable for use in other steps
          echo "docs_title=$DOCS_TITLE" >> $GITHUB_OUTPUT
          
      # Create header and footer for consistent navigation
      - name: Create header and footer
        run: |
          # Get title from previous step
          DOCS_TITLE="${{ steps.extract_title.outputs.docs_title }}"
          
          # Create directory for header and footer files
          mkdir -p custom-templates
          
          # Create header with consistent navigation and title
          cat > custom-templates/header.html << EOF
          <div id="site-header">
            <div class="site-title">
              <a href="index.html">$DOCS_TITLE</a>
            </div>
            <nav class="main-nav">
              <ul>
                <li><a href="topics/welcome.html">Test welcome page</a></li>
                <li><a href="topics/second-topic.html">Second Section</a></li>
                <li><a href="topics/Top.html">Welcome to My Simple DITA Publication</a>
                  <ul>
                    <li><a href="topics/test_2171_manual.html">test 2171 manual</a></li>
                  </ul>
                </li>
              </ul>
            </nav>
          </div>
          <hr>
          EOF
          
          # Create footer with title
          cat > custom-templates/footer.html << EOF
          <hr>
          <div id="site-footer">
            <p>Â© 2025 $DOCS_TITLE | <a href="index.html">Home</a> | Last updated: <span id="last-updated"></span></p>
          </div>
          <script>
            // Highlight current page in navigation
            document.addEventListener('DOMContentLoaded', function() {
              const currentPath = window.location.pathname;
              const links = document.querySelectorAll('.main-nav a');
              
              links.forEach(link => {
                if (currentPath.endsWith(link.getAttribute('href'))) {
                  link.classList.add('active');
                  link.parentElement.classList.add('current');
                }
              });
              
              // Add last updated date
              document.getElementById('last-updated').textContent = new Date().toLocaleDateString();
            });
          </script>
          EOF
          
      # Create custom CSS
      - name: Create CSS
        run: |
          mkdir -p custom-templates/css
          cat > custom-templates/css/custom.css << 'EOF'
          /* Base styles */
          body {
            font-family: Arial, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.5;
          }
          
          /* Header and navigation */
          #site-header {
            margin-bottom: 20px;
          }
          
          .site-title {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 10px;
          }
          
          .site-title a {
            color: #333;
            text-decoration: none;
          }
          
          /* Main navigation */
          .main-nav ul {
            list-style: none;
            padding: 0;
            margin: 0;
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 10px;
          }
          
          .main-nav li {
            margin: 5px 0;
            position: relative;
          }
          
          .main-nav a {
            color: #0066cc;
            text-decoration: none;
            display: block;
            padding: 5px 10px;
          }
          
          .main-nav a:hover {
            background-color: #e8e8e8;
            border-radius: 3px;
          }
          
          .main-nav a.active {
            font-weight: bold;
            background-color: #e0e0e0;
            border-radius: 3px;
          }
          
          .main-nav li.current > a {
            font-weight: bold;
          }
          
          .main-nav ul ul {
            margin-left: 20px;
            border: none;
            background: none;
            padding: 0;
          }
          
          /* Make sure original title doesn't appear if we have our custom header */
          .title {
            display: none;
          }
          
          /* Content area */
          .topictitle1 {
            font-size: 1.8em;
            border-bottom: 1px solid #ddd;
            padding-bottom: 5px;
            margin-bottom: 15px;
          }
          
          .topictitle2 {
            font-size: 1.5em;
          }
          
          /* Footer */
          #site-footer {
            margin-top: 30px;
            color: #666;
            font-size: 0.9em;
          }
          EOF
          
      # Set HTML page titles to match documentation title
      - name: Create title-setting script
        run: |
          cat > custom-templates/set-title.js << EOF
          const DOCS_TITLE = "${{ steps.extract_title.outputs.docs_title }}";
          document.title = DOCS_TITLE;
          EOF
          
      # Transform DITA to HTML with custom header and footer
      - name: Transform DITA to HTML
        run: |
          ./dita-ot-3.6.1/bin/dita \
          --input=dita-source/maps/simple-guide.ditamap \
          --format=html5 \
          --output=docs \
          --args.xhtml.toc=toc \
          --args.css=css/custom.css \
          --args.cssroot=custom-templates \
          --args.copycss=yes \
          --args.hdr=custom-templates/header.html \
          --args.ftr=custom-templates/footer.html \
          --nav-toc=partial \
          --args.outext=.html \
          --verbose
          
      # Update HTML title tags in all files and insert the script
      - name: Set consistent HTML titles
        run: |
          DOCS_TITLE="${{ steps.extract_title.outputs.docs_title }}"
          
          # Copy the title script to output
          mkdir -p docs/js
          cp custom-templates/set-title.js docs/js/
          
          # Add script to all HTML files
          find docs -name "*.html" -type f -exec sed -i 's/<\/head>/<script src="\/js\/set-title.js"><\/script><\/head>/' {} \;
          
          # Set HTML title tags directly as a fallback
          find docs -name "*.html" -type f -exec sed -i "s/<title>.*<\/title>/<title>$DOCS_TITLE<\/title>/" {} \;
          
      # Add timestamp to show when the site was built
      - name: Add build timestamp
        run: |
          TIMESTAMP=$(date)
          echo "<!-- Site built at: $TIMESTAMP -->" >> docs/index.html
          
      # Ensure output directory exists and has index.html
      - name: Check output
        run: |
          if [ ! -d "docs" ]; then
            echo "Output directory not created"
            exit 1
          fi
          
          # Check for index page
          if [ ! -f "docs/index.html" ]; then
            echo "Creating index.html..."
            cp docs/topics/welcome.html docs/index.html
            # Adjust paths in the copied file
            sed -i 's/href="css\//href="css\//g' docs/index.html
          fi
          
      # Add .nojekyll file to prevent GitHub from processing with Jekyll
      - name: Disable Jekyll
        run: touch docs/.nojekyll
          
      # Only deploy if on main branch or if manually triggered with deploy=true
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true')
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: docs
          branch: gh-pages
          clean: true