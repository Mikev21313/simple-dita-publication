name: Auto-Build and Deploy DITA to GitHub Pages
on:
  # Automatically build and deploy when pushing to main branch
  push:
    branches: [ main ]
    paths:
      - 'dita-source/**'  # Only trigger when DITA content changes

  # Automatically build and deploy when creating or updating a pull request
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'dita-source/**'  # Only trigger when DITA content changes

  # Add ability to manually trigger the workflow from GitHub Actions tab
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to GitHub Pages?'
        required: true
        default: 'true'
        type: boolean
      title:
        description: 'Documentation Title (leave empty for default)'
        required: false
        type: string

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      -- name: Create header and footer
        run: |
          # Get title from previous step
          DOCS_TITLE="${{ steps.extract_title.outputs.docs_title }}"

      - name: Install DITA-OT
        run: |
          wget https://github.com/dita-ot/dita-ot/releases/download/3.6.1/dita-ot-3.6.1.zip
          unzip dita-ot-3.6.1.zip
          chmod +x dita-ot-3.6.1/bin/dita

      # Extract documentation title from DITA map
      - name: Extract documentation title
        id: extract_title
        run: |
          # Default title in case extraction fails
          DEFAULT_TITLE="Documentation"

          # Use manual title if provided through workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.title }}" ]]; then
            DOCS_TITLE="${{ github.event.inputs.title }}"
            echo "Using manually provided title: $DOCS_TITLE"
          else
            # Try to extract title from DITA map
            if [ -f "dita-source/maps/simple-guide.ditamap" ]; then
              EXTRACTED_TITLE=$(grep -oP '(?<=<title>).*?(?=</title>)' dita-source/maps/simple-guide.ditamap | head -1)
              if [ -n "$EXTRACTED_TITLE" ]; then
                DOCS_TITLE="$EXTRACTED_TITLE"
                echo "Extracted title from DITA map: $DOCS_TITLE"
              else
                DOCS_TITLE="$DEFAULT_TITLE"
                echo "Could not extract title from DITA map, using default: $DOCS_TITLE"
              fi
            else
              DOCS_TITLE="$DEFAULT_TITLE"
              echo "DITA map not found, using default title: $DOCS_TITLE"
            fi
          fi

          # Set output variable for use in other steps
          echo "docs_title=$DOCS_TITLE" >> $GITHUB_OUTPUT

      # Create header and footer for consistent navigation
      - name: Create header and footer
        run: |
          # Get title from previous step
          DOCS_TITLE="${{ steps.extract_title.outputs.docs_title }}"

          # Create directory for header and footer files
          mkdir -p custom-templates

          # Create header with consistent navigation and title
          cat > custom-templates/header.html << 'EOF'
<div id="site-header">
  <div class="site-title">
    <a href="index.html">TITLE_PLACEHOLDER</a>
  </div>
  <nav class="main-nav">
    <ul>
      <li><a href="topics/welcome.html">Test welcome page</a></li>
      <li><a href="topics/second-topic.html">Second Section</a></li>
      <li><a href="topics/Top.html">Welcome to My Simple DITA Publication</a>
        <ul>
          <li><a href="topics/test_2171_manual.html">test 2171 manual</a></li>
        </ul>
      </li>
    </ul>
  </nav>
</div>
<hr>
EOF
          # Replace placeholder with actual title
          sed -i "s/TITLE_PLACEHOLDER/$DOCS_TITLE/g" custom-templates/header.html

          # Create footer with title
          cat > custom-templates/footer.html << 'EOF'
<hr>
<div id="site-footer">
  <p>Â© 2025 TITLE_PLACEHOLDER | <a href="index.html">Home</a> | Last updated: <span id="last-updated"></span></p>
</div>
<script>
  // Highlight current page in navigation
  document.addEventListener('DOMContentLoaded', function() {
    const currentPath = window.location.pathname;
    const links = document.querySelectorAll('.main-nav a');

    links.forEach(link => {
      if (currentPath.endsWith(link.getAttribute('href'))) {
        link.classList.add('active');
        link.parentElement.classList.add('current');
      }
    });

    // Add last updated date
    document.getElementById('last-updated').textContent = new Date().toLocaleDateString();
  });
</script>
EOF
          # Replace placeholder with actual title in footer
          sed -i "s/TITLE_PLACEHOLDER/$DOCS_TITLE/g" custom-templates/footer.html

          # Create title-setting script
          mkdir -p custom-templates/js
          cat > custom-templates/js/set-title.js << 'EOF'
const DOCS_TITLE = "TITLE_PLACEHOLDER";
document.title = DOCS_TITLE;
EOF
          # Replace placeholder with actual title in script
          sed -i "s/TITLE_PLACEHOLDER/$DOCS_TITLE/g" custom-templates/js/set-title.js

      # Create custom CSS with Figtree font
      - name: Create CSS
        run: |
          mkdir -p custom-templates/css
          cat > custom-templates/css/custom.css << 'EOF'
/*
 * Custom CSS for Automotive History Publication
 * This file is used by the GitHub Actions workflow to style the DITA-OT HTML output.
 * It is placed in the custom-templates/css/ directory and copied to the docs/css/ directory by the build process.
 */

/* Import Figtree font as specified in the workflow */
@import url('https://fonts.googleapis.com/css2?family=Figtree:wght@300;400;500;600;700&display=swap');

/* Basic body styling */
body {
    font-family: 'Figtree', sans-serif; /* Use the imported font */
    max-width: 1200px; /* Limit content width for readability */
    margin: 0 auto; /* Center the content block */
    padding: 20px; /* Add padding around the content */
    line-height: 1.6; /* Improve line spacing */
    color: #333; /* Dark grey text for readability */
    background-color: #f4f4f4; /* Light grey background */
}

/* Style for the main container if needed (adjust based on DITA-OT output structure) */
/* .container-fluid {
    padding: 0;
} */

/* Header styling */
#site-header {
    margin-bottom: 30px; /* Space below the header */
    padding-bottom: 15px;
    border-bottom: 2px solid #d3d3d3; /* Subtle separator */
    background-color: #fff; /* White background for header */
    padding: 15px 20px;
    border-radius: 8px; /* Rounded corners */
    box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* Subtle shadow */
}

.site-title {
    font-size: 2em; /* Larger title */
    font-weight: 700; /* Bold title */
    margin-bottom: 10px;
    color: #0056b3; /* A shade of blue, common in automotive branding */
}

.site-title a {
    color: inherit; /* Inherit color from parent */
    text-decoration: none; /* No underline on title link */
    transition: color 0.2s ease;
}

.site-title a:hover {
    color: #003d82; /* Darker blue on hover */
}

/* Main navigation styling */
.main-nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
    background-color: #e9ecef; /* Slightly darker background for nav */
    border: 1px solid #ced4da;
    border-radius: 6px;
    padding: 8px; /* Reduced padding */
    display: flex; /* Arrange nav items in a row */
    flex-wrap: wrap; /* Allow items to wrap on smaller screens */
    gap: 10px; /* Space between nav items */
}

.main-nav li {
    margin: 0; /* Remove default margin */
    position: relative;
}

.main-nav a {
    color: #007bff; /* Bootstrap primary blue */
    text-decoration: none;
    display: block;
    padding: 8px 15px; /* Adjusted padding */
    border-radius: 4px;
    transition: background-color 0.2s ease, color 0.2s ease;
    font-weight: 500; /* Medium font weight */
}

.main-nav a:hover {
    background-color: #007bff; /* Blue background on hover */
    color: #fff; /* White text on hover */
}

.main-nav a.active,
.main-nav li.current > a {
    font-weight: 600; /* Bolder for active/current */
    background-color: #0056b3; /* Darker blue background for active */
    color: #fff; /* White text for active */
}

/* Styling for nested navigation lists (if applicable) */
.main-nav ul ul {
    margin-left: 15px; /* Reduced indent */
    border: none;
    background: none;
    padding: 0;
    flex-direction: column; /* Stack nested items vertically */
    gap: 0; /* Remove gap for nested items */
}

.main-nav ul ul a {
    padding: 4px 10px; /* Smaller padding for nested links */
    font-weight: 400; /* Normal font weight for nested links */
    color: #495057; /* Darker grey for nested links */
}

.main-nav ul ul a:hover {
    background-color: #e2e6ea; /* Light grey background on hover */
    color: #212529; /* Darker text on hover */
}


/* Hide the original DITA title if custom header is used */
.title {
    display: none;
}

/* Content area headings */
.topictitle1 {
    font-size: 2em; /* Larger main topic title */
    font-weight: 700;
    color: #343a40; /* Dark grey */
    border-bottom: 2px solid #007bff; /* Blue underline */
    padding-bottom: 10px;
    margin-bottom: 25px;
}

.topictitle2 {
    font-size: 1.6em; /* Sub-topic title size */
    font-weight: 600;
    color: #495057; /* Darker grey */
    margin-top: 20px; /* Space above sub-title */
    margin-bottom: 15px;
}

/* Paragraph styling */
.p, p {
    color: #495057;
    line-height: 1.7; /* Increased line height for readability */
    margin-bottom: 15px; /* Space between paragraphs */
}

/* Styling for links within content */
.xref, a:not(.main-nav a):not(.site-title a) {
    color: #007bff;
    text-decoration: none;
    border-bottom: 1px solid rgba(0, 123, 255, 0.3); /* Subtle blue underline */
    transition: border-color 0.2s ease;
}

.xref:hover, a:not(.main-nav a):not(.site-title a):hover {
    border-bottom-color: #007bff; /* Solid blue underline on hover */
}

/* Styling for tables (basic) */
table {
    border-collapse: collapse;
    width: 100%;
    margin: 20px 0;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    background-color: #fff;
    border-radius: 8px;
    overflow: hidden; /* Ensures rounded corners on table content */
}

th, td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #dee2e6; /* Light grey row separator */
}

th {
    background-color: #007bff; /* Blue header background */
    color: #fff; /* White text in header */
    font-weight: 600;
}

/* Style for the last row */
tbody tr:last-child td {
    border-bottom: none;
}

/* Style for images (make them responsive) */
img {
    max-width: 100%; /* Ensure images don't overflow their container */
    height: auto; /* Maintain aspect ratio */
    display: block; /* Remove extra space below image */
    margin: 15px 0; /* Space above and below images */
    border-radius: 5px; /* Slightly rounded corners for images */
}


/* Footer styling */
#site-footer {
    margin-top: 40px; /* Space above the footer */
    color: #6c757d; /* Muted grey text */
    font-size: 0.9em;
    border-top: 1px solid #ced4da; /* Separator line */
    padding-top: 16px;
    text-align: center; /* Center footer text */
}

#site-footer a {
    color: #007bff;
    text-decoration: none;
    transition: color 0.2s ease;
}

#site-footer a:hover {
    color: #0056b3;
}

/* Lists styling */
ul, ol {
    padding-left: 30px; /* Standard list indent */
    margin-bottom: 15px;
}

li {
    margin-bottom: 8px; /* Space between list items */
}

/* Code and preformatted text styling */
pre, code {
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
    background-color: #e9ecef; /* Light background for code */
    border-radius: 4px;
    padding: 2px 4px;
    font-size: 0.95em;
}

pre {
    padding: 15px;
    overflow-x: auto; /* Add scroll for long lines */
    border: 1px solid #ced4da;
    margin: 15px 0;
    border-radius: 5px;
}
EOF

      # Transform DITA to HTML with custom header and footer
      - name: Transform DITA to HTML
        run: |
          # Execute the DITA command from the repository root
          ./dita-ot-3.6.1/bin/dita \
          --input=dita-source/maps/simple-guide.ditamap \
          --format=html5 \
          --output=docs \
          --args.xhtml.toc=toc \
          --args.css=css/custom.css \
          --args.cssroot=custom-templates \
          --args.copycss=yes \
          --args.hdr=custom-templates/header.html \
          --args.ftr=custom-templates/footer.html \
          --nav-toc=partial \
          --args.outext=.html \
          --verbose

      # Update HTML title tags in all files and insert the script
      - name: Set consistent HTML titles
        run: |
          DOCS_TITLE="${{ steps.extract_title.outputs.docs_title }}"

          # Copy the title script to output
          mkdir -p docs/js
          cp custom-templates/js/set-title.js docs/js/

          # Fix the script path in HTML files with proper relative path
          find docs -name "*.html" -type f -exec sed -i 's/<\/head>/<script src="\/js\/set-title.js"><\/script><\/head>/' {} \;

          # Set HTML title tags directly as a fallback
          find docs -name "*.html" -type f -exec sed -i "s/<title>.*<\/title>/<title>$DOCS_TITLE<\/title>/" {} \;

      # Fix the JavaScript path for GitHub Pages
      - name: Fix JavaScript paths for GitHub Pages
        run: |
          # Get the repository name for proper path prefixing
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d '/' -f 2)

          # Update script paths to work with GitHub Pages
          find docs -name "*.html" -type f -exec sed -i "s|/js/set-title.js|/$REPO_NAME/js/set-title.js|g" {} \;

      # Add timestamp to show when the site was built
      - name: Add build timestamp
        run: |
          TIMESTAMP=$(date)
          echo "" >> docs/index.html

      # Ensure output directory exists and has index.html
      - name: Check output
        run: |
          if [ ! -d "docs" ]; then
            echo "Output directory not created"
            exit 1
          fi

          # Check for index page
          if [ ! -f "docs/index.html" ]; then
            echo "Creating index.html..."
            # Assuming topics/welcome.html is the intended index page
            cp docs/topics/welcome.html docs/index.html
            # Adjust paths in the copied file if necessary (e.g., relative links)
            # This might require more sophisticated path adjustment depending on your DITA structure
            # For simplicity, we'll assume relative paths work or are handled by the script fix
            # sed -i 's/href="css\//href="css\//g' docs/index.html # Example adjustment
          fi

      # Add .nojekyll file to prevent GitHub from processing with Jekyll
      - name: Disable Jekyll
        run: touch docs/.nojekyll

      # Only deploy if on main branch or if manually triggered with deploy=true
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true')
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: docs
          branch: gh-pages
          clean: true